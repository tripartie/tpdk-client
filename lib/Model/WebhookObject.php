<?php
/**
 * WebhookObject
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tripartie
 *
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.194
 * Contact: noc@tripartie.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tripartie\Tpdk\Model;

use \ArrayAccess;
use \Tripartie\Tpdk\ObjectSerializer;

/**
 * WebhookObject Class Doc Comment
 *
 * @category Class
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebhookObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Webhook_object';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ulid' => 'string',
        'transaction' => '\Tripartie\Tpdk\Model\TransactionRead',
        'status' => 'string',
        'redirectUrl' => 'string',
        'itemCount' => 'int',
        'issueType' => 'string',
        'issueInDescriptionType' => 'string',
        'issueMentionedInOffer' => 'bool',
        'issueDetails' => 'string',
        'complainantTruthfulnessScore' => 'int',
        'sellerTruthfulnessScore' => 'int',
        'complainantStake' => 'string',
        'inferredStake' => 'string',
        'recommendedSolution' => 'string',
        'recommendedPartialRefundAmount' => 'int',
        'chosenSolution' => 'string',
        'chosenPartialRefundAmount' => 'int',
        'counterSolution' => 'string',
        'counterPartialRefundAmount' => 'int',
        'sellerNotes' => 'string',
        'sellerRejectionReason' => 'string',
        'complainantApproval' => 'bool',
        'sellerApproval' => 'bool',
        'platformSolution' => 'string',
        'platformPartialRefundAmount' => 'int',
        'platformApproval' => 'bool',
        'platformActorType' => 'string',
        'platformReasoning' => 'string',
        'arbitrationBy' => 'string',
        'parcels' => '\Tripartie\Tpdk\Model\ParcelRead[]',
        'views' => '\Tripartie\Tpdk\Model\ViewRead[]',
        'metadata' => '\Tripartie\Tpdk\Model\MetadataRead[]',
        'events' => '\Tripartie\Tpdk\Model\WorkflowEventRead[]',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'viewCount' => 'int',
        'statusExpiration' => '\DateTime',
        'awaitedParty' => 'string',
        'iri' => 'string',
        'messageCount' => 'int',
        'closedInFavorOf' => 'string',
        'disbursedByBuyer' => 'float',
        'maxRefundableForBuyer' => 'float',
        'id' => 'int',
        'firstName' => 'string',
        'lastName' => 'string',
        'language' => 'string',
        'email' => 'string',
        'mobilePhoneNumber' => 'string',
        'publicUrl' => 'string',
        'organization' => '\Tripartie\Tpdk\Model\OrganizationRead',
        'seller' => '\Tripartie\Tpdk\Model\PersonaRead',
        'nature' => 'string',
        'title' => 'string',
        'description' => 'string',
        'unitPrice' => 'float',
        'currencyCode' => 'string',
        'condition' => 'string',
        'medias' => '\Tripartie\Tpdk\Model\MediaRead[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ulid' => null,
        'transaction' => null,
        'status' => null,
        'redirectUrl' => null,
        'itemCount' => null,
        'issueType' => null,
        'issueInDescriptionType' => null,
        'issueMentionedInOffer' => null,
        'issueDetails' => null,
        'complainantTruthfulnessScore' => null,
        'sellerTruthfulnessScore' => null,
        'complainantStake' => null,
        'inferredStake' => null,
        'recommendedSolution' => null,
        'recommendedPartialRefundAmount' => null,
        'chosenSolution' => null,
        'chosenPartialRefundAmount' => null,
        'counterSolution' => null,
        'counterPartialRefundAmount' => null,
        'sellerNotes' => null,
        'sellerRejectionReason' => null,
        'complainantApproval' => null,
        'sellerApproval' => null,
        'platformSolution' => null,
        'platformPartialRefundAmount' => null,
        'platformApproval' => null,
        'platformActorType' => null,
        'platformReasoning' => null,
        'arbitrationBy' => 'iri-reference',
        'parcels' => null,
        'views' => null,
        'metadata' => null,
        'events' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'viewCount' => null,
        'statusExpiration' => 'date-time',
        'awaitedParty' => null,
        'iri' => 'iri-reference',
        'messageCount' => null,
        'closedInFavorOf' => null,
        'disbursedByBuyer' => null,
        'maxRefundableForBuyer' => null,
        'id' => null,
        'firstName' => null,
        'lastName' => null,
        'language' => null,
        'email' => null,
        'mobilePhoneNumber' => null,
        'publicUrl' => null,
        'organization' => null,
        'seller' => null,
        'nature' => null,
        'title' => null,
        'description' => null,
        'unitPrice' => null,
        'currencyCode' => null,
        'condition' => null,
        'medias' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ulid' => false,
        'transaction' => false,
        'status' => false,
        'redirectUrl' => false,
        'itemCount' => false,
        'issueType' => false,
        'issueInDescriptionType' => false,
        'issueMentionedInOffer' => false,
        'issueDetails' => false,
        'complainantTruthfulnessScore' => false,
        'sellerTruthfulnessScore' => false,
        'complainantStake' => false,
        'inferredStake' => false,
        'recommendedSolution' => false,
        'recommendedPartialRefundAmount' => false,
        'chosenSolution' => false,
        'chosenPartialRefundAmount' => false,
        'counterSolution' => false,
        'counterPartialRefundAmount' => false,
        'sellerNotes' => false,
        'sellerRejectionReason' => false,
        'complainantApproval' => false,
        'sellerApproval' => false,
        'platformSolution' => false,
        'platformPartialRefundAmount' => false,
        'platformApproval' => false,
        'platformActorType' => false,
        'platformReasoning' => false,
        'arbitrationBy' => false,
        'parcels' => false,
        'views' => false,
        'metadata' => false,
        'events' => false,
        'createdAt' => false,
        'updatedAt' => false,
        'viewCount' => false,
        'statusExpiration' => false,
        'awaitedParty' => false,
        'iri' => false,
        'messageCount' => false,
        'closedInFavorOf' => false,
        'disbursedByBuyer' => false,
        'maxRefundableForBuyer' => false,
        'id' => false,
        'firstName' => false,
        'lastName' => false,
        'language' => false,
        'email' => false,
        'mobilePhoneNumber' => false,
        'publicUrl' => false,
        'organization' => false,
        'seller' => false,
        'nature' => false,
        'title' => false,
        'description' => false,
        'unitPrice' => false,
        'currencyCode' => false,
        'condition' => false,
        'medias' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ulid' => 'ulid',
        'transaction' => 'transaction',
        'status' => 'status',
        'redirectUrl' => 'redirectUrl',
        'itemCount' => 'itemCount',
        'issueType' => 'issueType',
        'issueInDescriptionType' => 'issueInDescriptionType',
        'issueMentionedInOffer' => 'issueMentionedInOffer',
        'issueDetails' => 'issueDetails',
        'complainantTruthfulnessScore' => 'complainantTruthfulnessScore',
        'sellerTruthfulnessScore' => 'sellerTruthfulnessScore',
        'complainantStake' => 'complainantStake',
        'inferredStake' => 'inferredStake',
        'recommendedSolution' => 'recommendedSolution',
        'recommendedPartialRefundAmount' => 'recommendedPartialRefundAmount',
        'chosenSolution' => 'chosenSolution',
        'chosenPartialRefundAmount' => 'chosenPartialRefundAmount',
        'counterSolution' => 'counterSolution',
        'counterPartialRefundAmount' => 'counterPartialRefundAmount',
        'sellerNotes' => 'sellerNotes',
        'sellerRejectionReason' => 'sellerRejectionReason',
        'complainantApproval' => 'complainantApproval',
        'sellerApproval' => 'sellerApproval',
        'platformSolution' => 'platformSolution',
        'platformPartialRefundAmount' => 'platformPartialRefundAmount',
        'platformApproval' => 'platformApproval',
        'platformActorType' => 'platformActorType',
        'platformReasoning' => 'platformReasoning',
        'arbitrationBy' => 'arbitrationBy',
        'parcels' => 'parcels',
        'views' => 'views',
        'metadata' => 'metadata',
        'events' => 'events',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt',
        'viewCount' => 'viewCount',
        'statusExpiration' => 'statusExpiration',
        'awaitedParty' => 'awaitedParty',
        'iri' => 'iri',
        'messageCount' => 'messageCount',
        'closedInFavorOf' => 'closedInFavorOf',
        'disbursedByBuyer' => 'disbursedByBuyer',
        'maxRefundableForBuyer' => 'maxRefundableForBuyer',
        'id' => 'id',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'language' => 'language',
        'email' => 'email',
        'mobilePhoneNumber' => 'mobilePhoneNumber',
        'publicUrl' => 'publicUrl',
        'organization' => 'organization',
        'seller' => 'seller',
        'nature' => 'nature',
        'title' => 'title',
        'description' => 'description',
        'unitPrice' => 'unitPrice',
        'currencyCode' => 'currencyCode',
        'condition' => 'condition',
        'medias' => 'medias'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ulid' => 'setUlid',
        'transaction' => 'setTransaction',
        'status' => 'setStatus',
        'redirectUrl' => 'setRedirectUrl',
        'itemCount' => 'setItemCount',
        'issueType' => 'setIssueType',
        'issueInDescriptionType' => 'setIssueInDescriptionType',
        'issueMentionedInOffer' => 'setIssueMentionedInOffer',
        'issueDetails' => 'setIssueDetails',
        'complainantTruthfulnessScore' => 'setComplainantTruthfulnessScore',
        'sellerTruthfulnessScore' => 'setSellerTruthfulnessScore',
        'complainantStake' => 'setComplainantStake',
        'inferredStake' => 'setInferredStake',
        'recommendedSolution' => 'setRecommendedSolution',
        'recommendedPartialRefundAmount' => 'setRecommendedPartialRefundAmount',
        'chosenSolution' => 'setChosenSolution',
        'chosenPartialRefundAmount' => 'setChosenPartialRefundAmount',
        'counterSolution' => 'setCounterSolution',
        'counterPartialRefundAmount' => 'setCounterPartialRefundAmount',
        'sellerNotes' => 'setSellerNotes',
        'sellerRejectionReason' => 'setSellerRejectionReason',
        'complainantApproval' => 'setComplainantApproval',
        'sellerApproval' => 'setSellerApproval',
        'platformSolution' => 'setPlatformSolution',
        'platformPartialRefundAmount' => 'setPlatformPartialRefundAmount',
        'platformApproval' => 'setPlatformApproval',
        'platformActorType' => 'setPlatformActorType',
        'platformReasoning' => 'setPlatformReasoning',
        'arbitrationBy' => 'setArbitrationBy',
        'parcels' => 'setParcels',
        'views' => 'setViews',
        'metadata' => 'setMetadata',
        'events' => 'setEvents',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'viewCount' => 'setViewCount',
        'statusExpiration' => 'setStatusExpiration',
        'awaitedParty' => 'setAwaitedParty',
        'iri' => 'setIri',
        'messageCount' => 'setMessageCount',
        'closedInFavorOf' => 'setClosedInFavorOf',
        'disbursedByBuyer' => 'setDisbursedByBuyer',
        'maxRefundableForBuyer' => 'setMaxRefundableForBuyer',
        'id' => 'setId',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'language' => 'setLanguage',
        'email' => 'setEmail',
        'mobilePhoneNumber' => 'setMobilePhoneNumber',
        'publicUrl' => 'setPublicUrl',
        'organization' => 'setOrganization',
        'seller' => 'setSeller',
        'nature' => 'setNature',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'unitPrice' => 'setUnitPrice',
        'currencyCode' => 'setCurrencyCode',
        'condition' => 'setCondition',
        'medias' => 'setMedias'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ulid' => 'getUlid',
        'transaction' => 'getTransaction',
        'status' => 'getStatus',
        'redirectUrl' => 'getRedirectUrl',
        'itemCount' => 'getItemCount',
        'issueType' => 'getIssueType',
        'issueInDescriptionType' => 'getIssueInDescriptionType',
        'issueMentionedInOffer' => 'getIssueMentionedInOffer',
        'issueDetails' => 'getIssueDetails',
        'complainantTruthfulnessScore' => 'getComplainantTruthfulnessScore',
        'sellerTruthfulnessScore' => 'getSellerTruthfulnessScore',
        'complainantStake' => 'getComplainantStake',
        'inferredStake' => 'getInferredStake',
        'recommendedSolution' => 'getRecommendedSolution',
        'recommendedPartialRefundAmount' => 'getRecommendedPartialRefundAmount',
        'chosenSolution' => 'getChosenSolution',
        'chosenPartialRefundAmount' => 'getChosenPartialRefundAmount',
        'counterSolution' => 'getCounterSolution',
        'counterPartialRefundAmount' => 'getCounterPartialRefundAmount',
        'sellerNotes' => 'getSellerNotes',
        'sellerRejectionReason' => 'getSellerRejectionReason',
        'complainantApproval' => 'getComplainantApproval',
        'sellerApproval' => 'getSellerApproval',
        'platformSolution' => 'getPlatformSolution',
        'platformPartialRefundAmount' => 'getPlatformPartialRefundAmount',
        'platformApproval' => 'getPlatformApproval',
        'platformActorType' => 'getPlatformActorType',
        'platformReasoning' => 'getPlatformReasoning',
        'arbitrationBy' => 'getArbitrationBy',
        'parcels' => 'getParcels',
        'views' => 'getViews',
        'metadata' => 'getMetadata',
        'events' => 'getEvents',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'viewCount' => 'getViewCount',
        'statusExpiration' => 'getStatusExpiration',
        'awaitedParty' => 'getAwaitedParty',
        'iri' => 'getIri',
        'messageCount' => 'getMessageCount',
        'closedInFavorOf' => 'getClosedInFavorOf',
        'disbursedByBuyer' => 'getDisbursedByBuyer',
        'maxRefundableForBuyer' => 'getMaxRefundableForBuyer',
        'id' => 'getId',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'language' => 'getLanguage',
        'email' => 'getEmail',
        'mobilePhoneNumber' => 'getMobilePhoneNumber',
        'publicUrl' => 'getPublicUrl',
        'organization' => 'getOrganization',
        'seller' => 'getSeller',
        'nature' => 'getNature',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'unitPrice' => 'getUnitPrice',
        'currencyCode' => 'getCurrencyCode',
        'condition' => 'getCondition',
        'medias' => 'getMedias'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_CREATED = 'CREATED';
    public const STATUS_SUBMITTED = 'SUBMITTED';
    public const STATUS_OPENED = 'OPENED';
    public const STATUS_ABANDONED = 'ABANDONED';
    public const STATUS_OBJECTED = 'OBJECTED';
    public const STATUS_PENDING_SHIPMENT = 'PENDING_SHIPMENT';
    public const STATUS_SHIPPED = 'SHIPPED';
    public const STATUS_IN_TRANSIT = 'IN_TRANSIT';
    public const STATUS_RETURNED = 'RETURNED';
    public const STATUS_DISMISSED = 'DISMISSED';
    public const STATUS_RESOLVED = 'RESOLVED';
    public const STATUS_PENDING = 'PENDING';
    public const ISSUE_TYPE_NOT_AS_DESCRIBED = 'NOT_AS_DESCRIBED';
    public const ISSUE_TYPE_DOES_NOT_WORK = 'DOES_NOT_WORK';
    public const ISSUE_TYPE_IS_INCOMPLETE = 'IS_INCOMPLETE';
    public const ISSUE_TYPE_DELIVERY_ISSUE = 'DELIVERY_ISSUE';
    public const ISSUE_TYPE_ALLEGED_FRAUD = 'ALLEGED_FRAUD';
    public const ISSUE_TYPE_NULL = 'null';
    public const ISSUE_IN_DESCRIPTION_TYPE_WRONG_COLOUR = 'WRONG_COLOUR';
    public const ISSUE_IN_DESCRIPTION_TYPE_DAMAGED_OR_USED = 'DAMAGED_OR_USED';
    public const ISSUE_IN_DESCRIPTION_TYPE_INCORRECT_FORMAT_OR_SIZE = 'INCORRECT_FORMAT_OR_SIZE';
    public const ISSUE_IN_DESCRIPTION_TYPE_DIFFERENT_MATERIAL = 'DIFFERENT_MATERIAL';
    public const ISSUE_IN_DESCRIPTION_TYPE_NULL = 'null';
    public const COMPLAINANT_STAKE_LOW = 'LOW';
    public const COMPLAINANT_STAKE_MEDIUM = 'MEDIUM';
    public const COMPLAINANT_STAKE_HIGH = 'HIGH';
    public const COMPLAINANT_STAKE_NULL = 'null';
    public const INFERRED_STAKE_LOW = 'LOW';
    public const INFERRED_STAKE_MEDIUM = 'MEDIUM';
    public const INFERRED_STAKE_HIGH = 'HIGH';
    public const INFERRED_STAKE_NULL = 'null';
    public const RECOMMENDED_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN = 'PARTIAL_REFUND_WITH_PARTIAL_RETURN';
    public const RECOMMENDED_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN = 'PARTIAL_REFUND_WITHOUT_RETURN';
    public const RECOMMENDED_SOLUTION_COMPLETE_REFUND_WITH_RETURN = 'COMPLETE_REFUND_WITH_RETURN';
    public const RECOMMENDED_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN = 'COMPLETE_REFUND_WITHOUT_RETURN';
    public const RECOMMENDED_SOLUTION_ABANDON_CLAIM = 'ABANDON_CLAIM';
    public const RECOMMENDED_SOLUTION_NULL = 'null';
    public const CHOSEN_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN = 'PARTIAL_REFUND_WITH_PARTIAL_RETURN';
    public const CHOSEN_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN = 'PARTIAL_REFUND_WITHOUT_RETURN';
    public const CHOSEN_SOLUTION_COMPLETE_REFUND_WITH_RETURN = 'COMPLETE_REFUND_WITH_RETURN';
    public const CHOSEN_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN = 'COMPLETE_REFUND_WITHOUT_RETURN';
    public const CHOSEN_SOLUTION_ABANDON_CLAIM = 'ABANDON_CLAIM';
    public const CHOSEN_SOLUTION_NULL = 'null';
    public const COUNTER_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN = 'PARTIAL_REFUND_WITH_PARTIAL_RETURN';
    public const COUNTER_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN = 'PARTIAL_REFUND_WITHOUT_RETURN';
    public const COUNTER_SOLUTION_COMPLETE_REFUND_WITH_RETURN = 'COMPLETE_REFUND_WITH_RETURN';
    public const COUNTER_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN = 'COMPLETE_REFUND_WITHOUT_RETURN';
    public const COUNTER_SOLUTION_ABANDON_CLAIM = 'ABANDON_CLAIM';
    public const COUNTER_SOLUTION_NULL = 'null';
    public const SELLER_REJECTION_REASON_UNJUSTIFIED_REQUEST = 'UNJUSTIFIED_REQUEST';
    public const SELLER_REJECTION_REASON_ABUSIVE_REQUEST = 'ABUSIVE_REQUEST';
    public const SELLER_REJECTION_REASON_FRAUD_ATTEMPT = 'FRAUD_ATTEMPT';
    public const SELLER_REJECTION_REASON_OTHER = 'OTHER';
    public const SELLER_REJECTION_REASON_NULL = 'null';
    public const PLATFORM_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN = 'PARTIAL_REFUND_WITH_PARTIAL_RETURN';
    public const PLATFORM_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN = 'PARTIAL_REFUND_WITHOUT_RETURN';
    public const PLATFORM_SOLUTION_COMPLETE_REFUND_WITH_RETURN = 'COMPLETE_REFUND_WITH_RETURN';
    public const PLATFORM_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN = 'COMPLETE_REFUND_WITHOUT_RETURN';
    public const PLATFORM_SOLUTION_ABANDON_CLAIM = 'ABANDON_CLAIM';
    public const PLATFORM_SOLUTION_NULL = 'null';
    public const PLATFORM_ACTOR_TYPE_RULING = 'RULING';
    public const PLATFORM_ACTOR_TYPE_AI = 'AI';
    public const PLATFORM_ACTOR_TYPE_CUSTOMER_CARE = 'CUSTOMER_CARE';
    public const PLATFORM_ACTOR_TYPE_PLATFORM_SUPPORT = 'PLATFORM_SUPPORT';
    public const PLATFORM_ACTOR_TYPE_NULL = 'null';
    public const AWAITED_PARTY_BUYER = 'BUYER';
    public const AWAITED_PARTY_PLATFORM = 'PLATFORM';
    public const AWAITED_PARTY_SELLER = 'SELLER';
    public const CLOSED_IN_FAVOR_OF_BUYER = 'BUYER';
    public const CLOSED_IN_FAVOR_OF_SELLER = 'SELLER';
    public const NATURE_SERVICE = 'service';
    public const NATURE_PHYSICAL_ITEM = 'physical_item';
    public const NATURE_DEMATERIALIZED_ITEM = 'dematerialized_item';
    public const NATURE_RENT_ITEM = 'rent_item';
    public const CONDITION__NEW = 'NEW';
    public const CONDITION_USED = 'USED';
    public const CONDITION_DAMAGED = 'DAMAGED';
    public const CONDITION_DETERIORATED = 'DETERIORATED';
    public const CONDITION_UNRECOVERABLE = 'UNRECOVERABLE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CREATED,
            self::STATUS_SUBMITTED,
            self::STATUS_OPENED,
            self::STATUS_ABANDONED,
            self::STATUS_OBJECTED,
            self::STATUS_PENDING_SHIPMENT,
            self::STATUS_SHIPPED,
            self::STATUS_IN_TRANSIT,
            self::STATUS_RETURNED,
            self::STATUS_DISMISSED,
            self::STATUS_RESOLVED,
            self::STATUS_PENDING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIssueTypeAllowableValues()
    {
        return [
            self::ISSUE_TYPE_NOT_AS_DESCRIBED,
            self::ISSUE_TYPE_DOES_NOT_WORK,
            self::ISSUE_TYPE_IS_INCOMPLETE,
            self::ISSUE_TYPE_DELIVERY_ISSUE,
            self::ISSUE_TYPE_ALLEGED_FRAUD,
            self::ISSUE_TYPE_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIssueInDescriptionTypeAllowableValues()
    {
        return [
            self::ISSUE_IN_DESCRIPTION_TYPE_WRONG_COLOUR,
            self::ISSUE_IN_DESCRIPTION_TYPE_DAMAGED_OR_USED,
            self::ISSUE_IN_DESCRIPTION_TYPE_INCORRECT_FORMAT_OR_SIZE,
            self::ISSUE_IN_DESCRIPTION_TYPE_DIFFERENT_MATERIAL,
            self::ISSUE_IN_DESCRIPTION_TYPE_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getComplainantStakeAllowableValues()
    {
        return [
            self::COMPLAINANT_STAKE_LOW,
            self::COMPLAINANT_STAKE_MEDIUM,
            self::COMPLAINANT_STAKE_HIGH,
            self::COMPLAINANT_STAKE_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInferredStakeAllowableValues()
    {
        return [
            self::INFERRED_STAKE_LOW,
            self::INFERRED_STAKE_MEDIUM,
            self::INFERRED_STAKE_HIGH,
            self::INFERRED_STAKE_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecommendedSolutionAllowableValues()
    {
        return [
            self::RECOMMENDED_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN,
            self::RECOMMENDED_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN,
            self::RECOMMENDED_SOLUTION_COMPLETE_REFUND_WITH_RETURN,
            self::RECOMMENDED_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN,
            self::RECOMMENDED_SOLUTION_ABANDON_CLAIM,
            self::RECOMMENDED_SOLUTION_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChosenSolutionAllowableValues()
    {
        return [
            self::CHOSEN_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN,
            self::CHOSEN_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN,
            self::CHOSEN_SOLUTION_COMPLETE_REFUND_WITH_RETURN,
            self::CHOSEN_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN,
            self::CHOSEN_SOLUTION_ABANDON_CLAIM,
            self::CHOSEN_SOLUTION_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCounterSolutionAllowableValues()
    {
        return [
            self::COUNTER_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN,
            self::COUNTER_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN,
            self::COUNTER_SOLUTION_COMPLETE_REFUND_WITH_RETURN,
            self::COUNTER_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN,
            self::COUNTER_SOLUTION_ABANDON_CLAIM,
            self::COUNTER_SOLUTION_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSellerRejectionReasonAllowableValues()
    {
        return [
            self::SELLER_REJECTION_REASON_UNJUSTIFIED_REQUEST,
            self::SELLER_REJECTION_REASON_ABUSIVE_REQUEST,
            self::SELLER_REJECTION_REASON_FRAUD_ATTEMPT,
            self::SELLER_REJECTION_REASON_OTHER,
            self::SELLER_REJECTION_REASON_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlatformSolutionAllowableValues()
    {
        return [
            self::PLATFORM_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN,
            self::PLATFORM_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN,
            self::PLATFORM_SOLUTION_COMPLETE_REFUND_WITH_RETURN,
            self::PLATFORM_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN,
            self::PLATFORM_SOLUTION_ABANDON_CLAIM,
            self::PLATFORM_SOLUTION_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlatformActorTypeAllowableValues()
    {
        return [
            self::PLATFORM_ACTOR_TYPE_RULING,
            self::PLATFORM_ACTOR_TYPE_AI,
            self::PLATFORM_ACTOR_TYPE_CUSTOMER_CARE,
            self::PLATFORM_ACTOR_TYPE_PLATFORM_SUPPORT,
            self::PLATFORM_ACTOR_TYPE_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAwaitedPartyAllowableValues()
    {
        return [
            self::AWAITED_PARTY_BUYER,
            self::AWAITED_PARTY_PLATFORM,
            self::AWAITED_PARTY_SELLER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClosedInFavorOfAllowableValues()
    {
        return [
            self::CLOSED_IN_FAVOR_OF_BUYER,
            self::CLOSED_IN_FAVOR_OF_SELLER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNatureAllowableValues()
    {
        return [
            self::NATURE_SERVICE,
            self::NATURE_PHYSICAL_ITEM,
            self::NATURE_DEMATERIALIZED_ITEM,
            self::NATURE_RENT_ITEM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConditionAllowableValues()
    {
        return [
            self::CONDITION__NEW,
            self::CONDITION_USED,
            self::CONDITION_DAMAGED,
            self::CONDITION_DETERIORATED,
            self::CONDITION_UNRECOVERABLE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ulid', $data ?? [], null);
        $this->setIfExists('transaction', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], 'CREATED');
        $this->setIfExists('redirectUrl', $data ?? [], null);
        $this->setIfExists('itemCount', $data ?? [], 1);
        $this->setIfExists('issueType', $data ?? [], null);
        $this->setIfExists('issueInDescriptionType', $data ?? [], null);
        $this->setIfExists('issueMentionedInOffer', $data ?? [], null);
        $this->setIfExists('issueDetails', $data ?? [], null);
        $this->setIfExists('complainantTruthfulnessScore', $data ?? [], 100);
        $this->setIfExists('sellerTruthfulnessScore', $data ?? [], 100);
        $this->setIfExists('complainantStake', $data ?? [], null);
        $this->setIfExists('inferredStake', $data ?? [], null);
        $this->setIfExists('recommendedSolution', $data ?? [], null);
        $this->setIfExists('recommendedPartialRefundAmount', $data ?? [], null);
        $this->setIfExists('chosenSolution', $data ?? [], null);
        $this->setIfExists('chosenPartialRefundAmount', $data ?? [], null);
        $this->setIfExists('counterSolution', $data ?? [], null);
        $this->setIfExists('counterPartialRefundAmount', $data ?? [], null);
        $this->setIfExists('sellerNotes', $data ?? [], null);
        $this->setIfExists('sellerRejectionReason', $data ?? [], null);
        $this->setIfExists('complainantApproval', $data ?? [], null);
        $this->setIfExists('sellerApproval', $data ?? [], null);
        $this->setIfExists('platformSolution', $data ?? [], null);
        $this->setIfExists('platformPartialRefundAmount', $data ?? [], null);
        $this->setIfExists('platformApproval', $data ?? [], null);
        $this->setIfExists('platformActorType', $data ?? [], null);
        $this->setIfExists('platformReasoning', $data ?? [], null);
        $this->setIfExists('arbitrationBy', $data ?? [], null);
        $this->setIfExists('parcels', $data ?? [], null);
        $this->setIfExists('views', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('events', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('viewCount', $data ?? [], null);
        $this->setIfExists('statusExpiration', $data ?? [], null);
        $this->setIfExists('awaitedParty', $data ?? [], null);
        $this->setIfExists('iri', $data ?? [], null);
        $this->setIfExists('messageCount', $data ?? [], null);
        $this->setIfExists('closedInFavorOf', $data ?? [], null);
        $this->setIfExists('disbursedByBuyer', $data ?? [], null);
        $this->setIfExists('maxRefundableForBuyer', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('mobilePhoneNumber', $data ?? [], null);
        $this->setIfExists('publicUrl', $data ?? [], null);
        $this->setIfExists('organization', $data ?? [], null);
        $this->setIfExists('seller', $data ?? [], null);
        $this->setIfExists('nature', $data ?? [], 'physical_item');
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('unitPrice', $data ?? [], null);
        $this->setIfExists('currencyCode', $data ?? [], 'EUR');
        $this->setIfExists('condition', $data ?? [], 'USED');
        $this->setIfExists('medias', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ulid'] === null) {
            $invalidProperties[] = "'ulid' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIssueTypeAllowableValues();
        if (!is_null($this->container['issueType']) && !in_array($this->container['issueType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'issueType', must be one of '%s'",
                $this->container['issueType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIssueInDescriptionTypeAllowableValues();
        if (!is_null($this->container['issueInDescriptionType']) && !in_array($this->container['issueInDescriptionType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'issueInDescriptionType', must be one of '%s'",
                $this->container['issueInDescriptionType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['complainantTruthfulnessScore'] === null) {
            $invalidProperties[] = "'complainantTruthfulnessScore' can't be null";
        }
        if ($this->container['sellerTruthfulnessScore'] === null) {
            $invalidProperties[] = "'sellerTruthfulnessScore' can't be null";
        }
        $allowedValues = $this->getComplainantStakeAllowableValues();
        if (!is_null($this->container['complainantStake']) && !in_array($this->container['complainantStake'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'complainantStake', must be one of '%s'",
                $this->container['complainantStake'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInferredStakeAllowableValues();
        if (!is_null($this->container['inferredStake']) && !in_array($this->container['inferredStake'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'inferredStake', must be one of '%s'",
                $this->container['inferredStake'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRecommendedSolutionAllowableValues();
        if (!is_null($this->container['recommendedSolution']) && !in_array($this->container['recommendedSolution'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'recommendedSolution', must be one of '%s'",
                $this->container['recommendedSolution'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChosenSolutionAllowableValues();
        if (!is_null($this->container['chosenSolution']) && !in_array($this->container['chosenSolution'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'chosenSolution', must be one of '%s'",
                $this->container['chosenSolution'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCounterSolutionAllowableValues();
        if (!is_null($this->container['counterSolution']) && !in_array($this->container['counterSolution'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'counterSolution', must be one of '%s'",
                $this->container['counterSolution'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSellerRejectionReasonAllowableValues();
        if (!is_null($this->container['sellerRejectionReason']) && !in_array($this->container['sellerRejectionReason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sellerRejectionReason', must be one of '%s'",
                $this->container['sellerRejectionReason'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPlatformSolutionAllowableValues();
        if (!is_null($this->container['platformSolution']) && !in_array($this->container['platformSolution'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'platformSolution', must be one of '%s'",
                $this->container['platformSolution'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPlatformActorTypeAllowableValues();
        if (!is_null($this->container['platformActorType']) && !in_array($this->container['platformActorType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'platformActorType', must be one of '%s'",
                $this->container['platformActorType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['parcels'] === null) {
            $invalidProperties[] = "'parcels' can't be null";
        }
        if ($this->container['views'] === null) {
            $invalidProperties[] = "'views' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        $allowedValues = $this->getAwaitedPartyAllowableValues();
        if (!is_null($this->container['awaitedParty']) && !in_array($this->container['awaitedParty'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'awaitedParty', must be one of '%s'",
                $this->container['awaitedParty'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getClosedInFavorOfAllowableValues();
        if (!is_null($this->container['closedInFavorOf']) && !in_array($this->container['closedInFavorOf'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'closedInFavorOf', must be one of '%s'",
                $this->container['closedInFavorOf'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['seller'] === null) {
            $invalidProperties[] = "'seller' can't be null";
        }
        if ($this->container['nature'] === null) {
            $invalidProperties[] = "'nature' can't be null";
        }
        $allowedValues = $this->getNatureAllowableValues();
        if (!is_null($this->container['nature']) && !in_array($this->container['nature'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'nature', must be one of '%s'",
                $this->container['nature'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getConditionAllowableValues();
        if (!is_null($this->container['condition']) && !in_array($this->container['condition'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'condition', must be one of '%s'",
                $this->container['condition'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['medias'] === null) {
            $invalidProperties[] = "'medias' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ulid
     *
     * @return string
     */
    public function getUlid()
    {
        return $this->container['ulid'];
    }

    /**
     * Sets ulid
     *
     * @param string $ulid ulid
     *
     * @return self
     */
    public function setUlid($ulid)
    {
        if (is_null($ulid)) {
            throw new \InvalidArgumentException('non-nullable ulid cannot be null');
        }
        $this->container['ulid'] = $ulid;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return \Tripartie\Tpdk\Model\TransactionRead|null
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param \Tripartie\Tpdk\Model\TransactionRead|null $transaction transaction
     *
     * @return self
     */
    public function setTransaction($transaction)
    {
        if (is_null($transaction)) {
            throw new \InvalidArgumentException('non-nullable transaction cannot be null');
        }
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets redirectUrl
     *
     * @return string|null
     */
    public function getRedirectUrl()
    {
        return $this->container['redirectUrl'];
    }

    /**
     * Sets redirectUrl
     *
     * @param string|null $redirectUrl Fill-in that field IF you intend to redirect your customer instead of using a WebView.
     *
     * @return self
     */
    public function setRedirectUrl($redirectUrl)
    {
        if (is_null($redirectUrl)) {
            throw new \InvalidArgumentException('non-nullable redirectUrl cannot be null');
        }
        $this->container['redirectUrl'] = $redirectUrl;

        return $this;
    }

    /**
     * Gets itemCount
     *
     * @return int|null
     */
    public function getItemCount()
    {
        return $this->container['itemCount'];
    }

    /**
     * Sets itemCount
     *
     * @param int|null $itemCount itemCount
     *
     * @return self
     */
    public function setItemCount($itemCount)
    {
        if (is_null($itemCount)) {
            throw new \InvalidArgumentException('non-nullable itemCount cannot be null');
        }
        $this->container['itemCount'] = $itemCount;

        return $this;
    }

    /**
     * Gets issueType
     *
     * @return string|null
     */
    public function getIssueType()
    {
        return $this->container['issueType'];
    }

    /**
     * Sets issueType
     *
     * @param string|null $issueType issueType
     *
     * @return self
     */
    public function setIssueType($issueType)
    {
        if (is_null($issueType)) {
            throw new \InvalidArgumentException('non-nullable issueType cannot be null');
        }
        $allowedValues = $this->getIssueTypeAllowableValues();
        if (!in_array($issueType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'issueType', must be one of '%s'",
                    $issueType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['issueType'] = $issueType;

        return $this;
    }

    /**
     * Gets issueInDescriptionType
     *
     * @return string|null
     */
    public function getIssueInDescriptionType()
    {
        return $this->container['issueInDescriptionType'];
    }

    /**
     * Sets issueInDescriptionType
     *
     * @param string|null $issueInDescriptionType To be set only in conjunction of issueType = NOT_AS_DESCRIBED.
     *
     * @return self
     */
    public function setIssueInDescriptionType($issueInDescriptionType)
    {
        if (is_null($issueInDescriptionType)) {
            throw new \InvalidArgumentException('non-nullable issueInDescriptionType cannot be null');
        }
        $allowedValues = $this->getIssueInDescriptionTypeAllowableValues();
        if (!in_array($issueInDescriptionType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'issueInDescriptionType', must be one of '%s'",
                    $issueInDescriptionType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['issueInDescriptionType'] = $issueInDescriptionType;

        return $this;
    }

    /**
     * Gets issueMentionedInOffer
     *
     * @return bool|null
     */
    public function getIssueMentionedInOffer()
    {
        return $this->container['issueMentionedInOffer'];
    }

    /**
     * Sets issueMentionedInOffer
     *
     * @param bool|null $issueMentionedInOffer issueMentionedInOffer
     *
     * @return self
     */
    public function setIssueMentionedInOffer($issueMentionedInOffer)
    {
        if (is_null($issueMentionedInOffer)) {
            throw new \InvalidArgumentException('non-nullable issueMentionedInOffer cannot be null');
        }
        $this->container['issueMentionedInOffer'] = $issueMentionedInOffer;

        return $this;
    }

    /**
     * Gets issueDetails
     *
     * @return string|null
     */
    public function getIssueDetails()
    {
        return $this->container['issueDetails'];
    }

    /**
     * Sets issueDetails
     *
     * @param string|null $issueDetails issueDetails
     *
     * @return self
     */
    public function setIssueDetails($issueDetails)
    {
        if (is_null($issueDetails)) {
            throw new \InvalidArgumentException('non-nullable issueDetails cannot be null');
        }
        $this->container['issueDetails'] = $issueDetails;

        return $this;
    }

    /**
     * Gets complainantTruthfulnessScore
     *
     * @return int
     */
    public function getComplainantTruthfulnessScore()
    {
        return $this->container['complainantTruthfulnessScore'];
    }

    /**
     * Sets complainantTruthfulnessScore
     *
     * @param int $complainantTruthfulnessScore complainantTruthfulnessScore
     *
     * @return self
     */
    public function setComplainantTruthfulnessScore($complainantTruthfulnessScore)
    {
        if (is_null($complainantTruthfulnessScore)) {
            throw new \InvalidArgumentException('non-nullable complainantTruthfulnessScore cannot be null');
        }
        $this->container['complainantTruthfulnessScore'] = $complainantTruthfulnessScore;

        return $this;
    }

    /**
     * Gets sellerTruthfulnessScore
     *
     * @return int
     */
    public function getSellerTruthfulnessScore()
    {
        return $this->container['sellerTruthfulnessScore'];
    }

    /**
     * Sets sellerTruthfulnessScore
     *
     * @param int $sellerTruthfulnessScore sellerTruthfulnessScore
     *
     * @return self
     */
    public function setSellerTruthfulnessScore($sellerTruthfulnessScore)
    {
        if (is_null($sellerTruthfulnessScore)) {
            throw new \InvalidArgumentException('non-nullable sellerTruthfulnessScore cannot be null');
        }
        $this->container['sellerTruthfulnessScore'] = $sellerTruthfulnessScore;

        return $this;
    }

    /**
     * Gets complainantStake
     *
     * @return string|null
     */
    public function getComplainantStake()
    {
        return $this->container['complainantStake'];
    }

    /**
     * Sets complainantStake
     *
     * @param string|null $complainantStake complainantStake
     *
     * @return self
     */
    public function setComplainantStake($complainantStake)
    {
        if (is_null($complainantStake)) {
            throw new \InvalidArgumentException('non-nullable complainantStake cannot be null');
        }
        $allowedValues = $this->getComplainantStakeAllowableValues();
        if (!in_array($complainantStake, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'complainantStake', must be one of '%s'",
                    $complainantStake,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['complainantStake'] = $complainantStake;

        return $this;
    }

    /**
     * Gets inferredStake
     *
     * @return string|null
     */
    public function getInferredStake()
    {
        return $this->container['inferredStake'];
    }

    /**
     * Sets inferredStake
     *
     * @param string|null $inferredStake inferredStake
     *
     * @return self
     */
    public function setInferredStake($inferredStake)
    {
        if (is_null($inferredStake)) {
            throw new \InvalidArgumentException('non-nullable inferredStake cannot be null');
        }
        $allowedValues = $this->getInferredStakeAllowableValues();
        if (!in_array($inferredStake, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'inferredStake', must be one of '%s'",
                    $inferredStake,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['inferredStake'] = $inferredStake;

        return $this;
    }

    /**
     * Gets recommendedSolution
     *
     * @return string|null
     */
    public function getRecommendedSolution()
    {
        return $this->container['recommendedSolution'];
    }

    /**
     * Sets recommendedSolution
     *
     * @param string|null $recommendedSolution recommendedSolution
     *
     * @return self
     */
    public function setRecommendedSolution($recommendedSolution)
    {
        if (is_null($recommendedSolution)) {
            throw new \InvalidArgumentException('non-nullable recommendedSolution cannot be null');
        }
        $allowedValues = $this->getRecommendedSolutionAllowableValues();
        if (!in_array($recommendedSolution, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'recommendedSolution', must be one of '%s'",
                    $recommendedSolution,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recommendedSolution'] = $recommendedSolution;

        return $this;
    }

    /**
     * Gets recommendedPartialRefundAmount
     *
     * @return int|null
     */
    public function getRecommendedPartialRefundAmount()
    {
        return $this->container['recommendedPartialRefundAmount'];
    }

    /**
     * Sets recommendedPartialRefundAmount
     *
     * @param int|null $recommendedPartialRefundAmount recommendedPartialRefundAmount
     *
     * @return self
     */
    public function setRecommendedPartialRefundAmount($recommendedPartialRefundAmount)
    {
        if (is_null($recommendedPartialRefundAmount)) {
            throw new \InvalidArgumentException('non-nullable recommendedPartialRefundAmount cannot be null');
        }
        $this->container['recommendedPartialRefundAmount'] = $recommendedPartialRefundAmount;

        return $this;
    }

    /**
     * Gets chosenSolution
     *
     * @return string|null
     */
    public function getChosenSolution()
    {
        return $this->container['chosenSolution'];
    }

    /**
     * Sets chosenSolution
     *
     * @param string|null $chosenSolution chosenSolution
     *
     * @return self
     */
    public function setChosenSolution($chosenSolution)
    {
        if (is_null($chosenSolution)) {
            throw new \InvalidArgumentException('non-nullable chosenSolution cannot be null');
        }
        $allowedValues = $this->getChosenSolutionAllowableValues();
        if (!in_array($chosenSolution, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'chosenSolution', must be one of '%s'",
                    $chosenSolution,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['chosenSolution'] = $chosenSolution;

        return $this;
    }

    /**
     * Gets chosenPartialRefundAmount
     *
     * @return int|null
     */
    public function getChosenPartialRefundAmount()
    {
        return $this->container['chosenPartialRefundAmount'];
    }

    /**
     * Sets chosenPartialRefundAmount
     *
     * @param int|null $chosenPartialRefundAmount chosenPartialRefundAmount
     *
     * @return self
     */
    public function setChosenPartialRefundAmount($chosenPartialRefundAmount)
    {
        if (is_null($chosenPartialRefundAmount)) {
            throw new \InvalidArgumentException('non-nullable chosenPartialRefundAmount cannot be null');
        }
        $this->container['chosenPartialRefundAmount'] = $chosenPartialRefundAmount;

        return $this;
    }

    /**
     * Gets counterSolution
     *
     * @return string|null
     */
    public function getCounterSolution()
    {
        return $this->container['counterSolution'];
    }

    /**
     * Sets counterSolution
     *
     * @param string|null $counterSolution counterSolution
     *
     * @return self
     */
    public function setCounterSolution($counterSolution)
    {
        if (is_null($counterSolution)) {
            throw new \InvalidArgumentException('non-nullable counterSolution cannot be null');
        }
        $allowedValues = $this->getCounterSolutionAllowableValues();
        if (!in_array($counterSolution, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'counterSolution', must be one of '%s'",
                    $counterSolution,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['counterSolution'] = $counterSolution;

        return $this;
    }

    /**
     * Gets counterPartialRefundAmount
     *
     * @return int|null
     */
    public function getCounterPartialRefundAmount()
    {
        return $this->container['counterPartialRefundAmount'];
    }

    /**
     * Sets counterPartialRefundAmount
     *
     * @param int|null $counterPartialRefundAmount counterPartialRefundAmount
     *
     * @return self
     */
    public function setCounterPartialRefundAmount($counterPartialRefundAmount)
    {
        if (is_null($counterPartialRefundAmount)) {
            throw new \InvalidArgumentException('non-nullable counterPartialRefundAmount cannot be null');
        }
        $this->container['counterPartialRefundAmount'] = $counterPartialRefundAmount;

        return $this;
    }

    /**
     * Gets sellerNotes
     *
     * @return string|null
     */
    public function getSellerNotes()
    {
        return $this->container['sellerNotes'];
    }

    /**
     * Sets sellerNotes
     *
     * @param string|null $sellerNotes sellerNotes
     *
     * @return self
     */
    public function setSellerNotes($sellerNotes)
    {
        if (is_null($sellerNotes)) {
            throw new \InvalidArgumentException('non-nullable sellerNotes cannot be null');
        }
        $this->container['sellerNotes'] = $sellerNotes;

        return $this;
    }

    /**
     * Gets sellerRejectionReason
     *
     * @return string|null
     */
    public function getSellerRejectionReason()
    {
        return $this->container['sellerRejectionReason'];
    }

    /**
     * Sets sellerRejectionReason
     *
     * @param string|null $sellerRejectionReason sellerRejectionReason
     *
     * @return self
     */
    public function setSellerRejectionReason($sellerRejectionReason)
    {
        if (is_null($sellerRejectionReason)) {
            throw new \InvalidArgumentException('non-nullable sellerRejectionReason cannot be null');
        }
        $allowedValues = $this->getSellerRejectionReasonAllowableValues();
        if (!in_array($sellerRejectionReason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sellerRejectionReason', must be one of '%s'",
                    $sellerRejectionReason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sellerRejectionReason'] = $sellerRejectionReason;

        return $this;
    }

    /**
     * Gets complainantApproval
     *
     * @return bool|null
     */
    public function getComplainantApproval()
    {
        return $this->container['complainantApproval'];
    }

    /**
     * Sets complainantApproval
     *
     * @param bool|null $complainantApproval complainantApproval
     *
     * @return self
     */
    public function setComplainantApproval($complainantApproval)
    {
        if (is_null($complainantApproval)) {
            throw new \InvalidArgumentException('non-nullable complainantApproval cannot be null');
        }
        $this->container['complainantApproval'] = $complainantApproval;

        return $this;
    }

    /**
     * Gets sellerApproval
     *
     * @return bool|null
     */
    public function getSellerApproval()
    {
        return $this->container['sellerApproval'];
    }

    /**
     * Sets sellerApproval
     *
     * @param bool|null $sellerApproval sellerApproval
     *
     * @return self
     */
    public function setSellerApproval($sellerApproval)
    {
        if (is_null($sellerApproval)) {
            throw new \InvalidArgumentException('non-nullable sellerApproval cannot be null');
        }
        $this->container['sellerApproval'] = $sellerApproval;

        return $this;
    }

    /**
     * Gets platformSolution
     *
     * @return string|null
     */
    public function getPlatformSolution()
    {
        return $this->container['platformSolution'];
    }

    /**
     * Sets platformSolution
     *
     * @param string|null $platformSolution platformSolution
     *
     * @return self
     */
    public function setPlatformSolution($platformSolution)
    {
        if (is_null($platformSolution)) {
            throw new \InvalidArgumentException('non-nullable platformSolution cannot be null');
        }
        $allowedValues = $this->getPlatformSolutionAllowableValues();
        if (!in_array($platformSolution, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'platformSolution', must be one of '%s'",
                    $platformSolution,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['platformSolution'] = $platformSolution;

        return $this;
    }

    /**
     * Gets platformPartialRefundAmount
     *
     * @return int|null
     */
    public function getPlatformPartialRefundAmount()
    {
        return $this->container['platformPartialRefundAmount'];
    }

    /**
     * Sets platformPartialRefundAmount
     *
     * @param int|null $platformPartialRefundAmount platformPartialRefundAmount
     *
     * @return self
     */
    public function setPlatformPartialRefundAmount($platformPartialRefundAmount)
    {
        if (is_null($platformPartialRefundAmount)) {
            throw new \InvalidArgumentException('non-nullable platformPartialRefundAmount cannot be null');
        }
        $this->container['platformPartialRefundAmount'] = $platformPartialRefundAmount;

        return $this;
    }

    /**
     * Gets platformApproval
     *
     * @return bool|null
     */
    public function getPlatformApproval()
    {
        return $this->container['platformApproval'];
    }

    /**
     * Sets platformApproval
     *
     * @param bool|null $platformApproval platformApproval
     *
     * @return self
     */
    public function setPlatformApproval($platformApproval)
    {
        if (is_null($platformApproval)) {
            throw new \InvalidArgumentException('non-nullable platformApproval cannot be null');
        }
        $this->container['platformApproval'] = $platformApproval;

        return $this;
    }

    /**
     * Gets platformActorType
     *
     * @return string|null
     */
    public function getPlatformActorType()
    {
        return $this->container['platformActorType'];
    }

    /**
     * Sets platformActorType
     *
     * @param string|null $platformActorType platformActorType
     *
     * @return self
     */
    public function setPlatformActorType($platformActorType)
    {
        if (is_null($platformActorType)) {
            throw new \InvalidArgumentException('non-nullable platformActorType cannot be null');
        }
        $allowedValues = $this->getPlatformActorTypeAllowableValues();
        if (!in_array($platformActorType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'platformActorType', must be one of '%s'",
                    $platformActorType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['platformActorType'] = $platformActorType;

        return $this;
    }

    /**
     * Gets platformReasoning
     *
     * @return string|null
     */
    public function getPlatformReasoning()
    {
        return $this->container['platformReasoning'];
    }

    /**
     * Sets platformReasoning
     *
     * @param string|null $platformReasoning Explicit additional information about the platform decision. Could be written by AI, Ruling or Customer Care.
     *
     * @return self
     */
    public function setPlatformReasoning($platformReasoning)
    {
        if (is_null($platformReasoning)) {
            throw new \InvalidArgumentException('non-nullable platformReasoning cannot be null');
        }
        $this->container['platformReasoning'] = $platformReasoning;

        return $this;
    }

    /**
     * Gets arbitrationBy
     *
     * @return string|null
     */
    public function getArbitrationBy()
    {
        return $this->container['arbitrationBy'];
    }

    /**
     * Sets arbitrationBy
     *
     * @param string|null $arbitrationBy arbitrationBy
     *
     * @return self
     */
    public function setArbitrationBy($arbitrationBy)
    {
        if (is_null($arbitrationBy)) {
            throw new \InvalidArgumentException('non-nullable arbitrationBy cannot be null');
        }
        $this->container['arbitrationBy'] = $arbitrationBy;

        return $this;
    }

    /**
     * Gets parcels
     *
     * @return \Tripartie\Tpdk\Model\ParcelRead[]
     */
    public function getParcels()
    {
        return $this->container['parcels'];
    }

    /**
     * Sets parcels
     *
     * @param \Tripartie\Tpdk\Model\ParcelRead[] $parcels parcels
     *
     * @return self
     */
    public function setParcels($parcels)
    {
        if (is_null($parcels)) {
            throw new \InvalidArgumentException('non-nullable parcels cannot be null');
        }
        $this->container['parcels'] = $parcels;

        return $this;
    }

    /**
     * Gets views
     *
     * @return \Tripartie\Tpdk\Model\ViewRead[]
     */
    public function getViews()
    {
        return $this->container['views'];
    }

    /**
     * Sets views
     *
     * @param \Tripartie\Tpdk\Model\ViewRead[] $views views
     *
     * @return self
     */
    public function setViews($views)
    {
        if (is_null($views)) {
            throw new \InvalidArgumentException('non-nullable views cannot be null');
        }
        $this->container['views'] = $views;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Tripartie\Tpdk\Model\MetadataRead[]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Tripartie\Tpdk\Model\MetadataRead[] $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \Tripartie\Tpdk\Model\WorkflowEventRead[]|null
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \Tripartie\Tpdk\Model\WorkflowEventRead[]|null $events events
     *
     * @return self
     */
    public function setEvents($events)
    {
        if (is_null($events)) {
            throw new \InvalidArgumentException('non-nullable events cannot be null');
        }
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets viewCount
     *
     * @return int|null
     */
    public function getViewCount()
    {
        return $this->container['viewCount'];
    }

    /**
     * Sets viewCount
     *
     * @param int|null $viewCount viewCount
     *
     * @return self
     */
    public function setViewCount($viewCount)
    {
        if (is_null($viewCount)) {
            throw new \InvalidArgumentException('non-nullable viewCount cannot be null');
        }
        $this->container['viewCount'] = $viewCount;

        return $this;
    }

    /**
     * Gets statusExpiration
     *
     * @return \DateTime|null
     */
    public function getStatusExpiration()
    {
        return $this->container['statusExpiration'];
    }

    /**
     * Sets statusExpiration
     *
     * @param \DateTime|null $statusExpiration Yield if eligible the date-time at which the dispute state expire.
     *
     * @return self
     */
    public function setStatusExpiration($statusExpiration)
    {
        if (is_null($statusExpiration)) {
            throw new \InvalidArgumentException('non-nullable statusExpiration cannot be null');
        }
        $this->container['statusExpiration'] = $statusExpiration;

        return $this;
    }

    /**
     * Gets awaitedParty
     *
     * @return string|null
     */
    public function getAwaitedParty()
    {
        return $this->container['awaitedParty'];
    }

    /**
     * Sets awaitedParty
     *
     * @param string|null $awaitedParty Determine who is awaited (actor) for the next transition
     *
     * @return self
     */
    public function setAwaitedParty($awaitedParty)
    {
        if (is_null($awaitedParty)) {
            throw new \InvalidArgumentException('non-nullable awaitedParty cannot be null');
        }
        $allowedValues = $this->getAwaitedPartyAllowableValues();
        if (!in_array($awaitedParty, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'awaitedParty', must be one of '%s'",
                    $awaitedParty,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['awaitedParty'] = $awaitedParty;

        return $this;
    }

    /**
     * Gets iri
     *
     * @return string|null
     */
    public function getIri()
    {
        return $this->container['iri'];
    }

    /**
     * Sets iri
     *
     * @param string|null $iri iri
     *
     * @return self
     */
    public function setIri($iri)
    {
        if (is_null($iri)) {
            throw new \InvalidArgumentException('non-nullable iri cannot be null');
        }
        $this->container['iri'] = $iri;

        return $this;
    }

    /**
     * Gets messageCount
     *
     * @return int|null
     */
    public function getMessageCount()
    {
        return $this->container['messageCount'];
    }

    /**
     * Sets messageCount
     *
     * @param int|null $messageCount messageCount
     *
     * @return self
     */
    public function setMessageCount($messageCount)
    {
        if (is_null($messageCount)) {
            throw new \InvalidArgumentException('non-nullable messageCount cannot be null');
        }
        $this->container['messageCount'] = $messageCount;

        return $this;
    }

    /**
     * Gets closedInFavorOf
     *
     * @return string|null
     */
    public function getClosedInFavorOf()
    {
        return $this->container['closedInFavorOf'];
    }

    /**
     * Sets closedInFavorOf
     *
     * @param string|null $closedInFavorOf Determine who won the case, if not specified, then it is ongoing.
     *
     * @return self
     */
    public function setClosedInFavorOf($closedInFavorOf)
    {
        if (is_null($closedInFavorOf)) {
            throw new \InvalidArgumentException('non-nullable closedInFavorOf cannot be null');
        }
        $allowedValues = $this->getClosedInFavorOfAllowableValues();
        if (!in_array($closedInFavorOf, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'closedInFavorOf', must be one of '%s'",
                    $closedInFavorOf,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['closedInFavorOf'] = $closedInFavorOf;

        return $this;
    }

    /**
     * Gets disbursedByBuyer
     *
     * @return float|null
     */
    public function getDisbursedByBuyer()
    {
        return $this->container['disbursedByBuyer'];
    }

    /**
     * Sets disbursedByBuyer
     *
     * @param float|null $disbursedByBuyer Total amount disbursed by the buyer to acquire the item.
     *
     * @return self
     */
    public function setDisbursedByBuyer($disbursedByBuyer)
    {
        if (is_null($disbursedByBuyer)) {
            throw new \InvalidArgumentException('non-nullable disbursedByBuyer cannot be null');
        }
        $this->container['disbursedByBuyer'] = $disbursedByBuyer;

        return $this;
    }

    /**
     * Gets maxRefundableForBuyer
     *
     * @return float|null
     */
    public function getMaxRefundableForBuyer()
    {
        return $this->container['maxRefundableForBuyer'];
    }

    /**
     * Sets maxRefundableForBuyer
     *
     * @param float|null $maxRefundableForBuyer How much the buyer can actually receive back in case of a full refund.
     *
     * @return self
     */
    public function setMaxRefundableForBuyer($maxRefundableForBuyer)
    {
        if (is_null($maxRefundableForBuyer)) {
            throw new \InvalidArgumentException('non-nullable maxRefundableForBuyer cannot be null');
        }
        $this->container['maxRefundableForBuyer'] = $maxRefundableForBuyer;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName firstName
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            throw new \InvalidArgumentException('non-nullable firstName cannot be null');
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName lastName
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            throw new \InvalidArgumentException('non-nullable lastName cannot be null');
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language That data is used for rendering the frontend application with given language. If not set, will be inferred. Custom codes can be issued for specific requirements.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets mobilePhoneNumber
     *
     * @return string|null
     */
    public function getMobilePhoneNumber()
    {
        return $this->container['mobilePhoneNumber'];
    }

    /**
     * Sets mobilePhoneNumber
     *
     * @param string|null $mobilePhoneNumber mobilePhoneNumber
     *
     * @return self
     */
    public function setMobilePhoneNumber($mobilePhoneNumber)
    {
        if (is_null($mobilePhoneNumber)) {
            throw new \InvalidArgumentException('non-nullable mobilePhoneNumber cannot be null');
        }
        $this->container['mobilePhoneNumber'] = $mobilePhoneNumber;

        return $this;
    }

    /**
     * Gets publicUrl
     *
     * @return string|null
     */
    public function getPublicUrl()
    {
        return $this->container['publicUrl'];
    }

    /**
     * Sets publicUrl
     *
     * @param string|null $publicUrl If specified, there would be not need for you to fill-in details. Must be accessible over WAN.
     *
     * @return self
     */
    public function setPublicUrl($publicUrl)
    {
        if (is_null($publicUrl)) {
            throw new \InvalidArgumentException('non-nullable publicUrl cannot be null');
        }
        $this->container['publicUrl'] = $publicUrl;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \Tripartie\Tpdk\Model\OrganizationRead|null
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \Tripartie\Tpdk\Model\OrganizationRead|null $organization organization
     *
     * @return self
     */
    public function setOrganization($organization)
    {
        if (is_null($organization)) {
            throw new \InvalidArgumentException('non-nullable organization cannot be null');
        }
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return \Tripartie\Tpdk\Model\PersonaRead
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param \Tripartie\Tpdk\Model\PersonaRead $seller If the seller is actually YOUR organization, set it to NULL.
     *
     * @return self
     */
    public function setSeller($seller)
    {
        if (is_null($seller)) {
            throw new \InvalidArgumentException('non-nullable seller cannot be null');
        }
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets nature
     *
     * @return string
     */
    public function getNature()
    {
        return $this->container['nature'];
    }

    /**
     * Sets nature
     *
     * @param string $nature This WILL affect the assigned workflow. Choosing service will disable delivery for example. Refer to our technical hub for more information.
     *
     * @return self
     */
    public function setNature($nature)
    {
        if (is_null($nature)) {
            throw new \InvalidArgumentException('non-nullable nature cannot be null');
        }
        $allowedValues = $this->getNatureAllowableValues();
        if (!in_array($nature, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'nature', must be one of '%s'",
                    $nature,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nature'] = $nature;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets unitPrice
     *
     * @return float|null
     */
    public function getUnitPrice()
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice
     *
     * @param float|null $unitPrice unitPrice
     *
     * @return self
     */
    public function setUnitPrice($unitPrice)
    {
        if (is_null($unitPrice)) {
            throw new \InvalidArgumentException('non-nullable unitPrice cannot be null');
        }
        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets currencyCode
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currencyCode'];
    }

    /**
     * Sets currencyCode
     *
     * @param string|null $currencyCode currencyCode
     *
     * @return self
     */
    public function setCurrencyCode($currencyCode)
    {
        if (is_null($currencyCode)) {
            throw new \InvalidArgumentException('non-nullable currencyCode cannot be null');
        }
        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string|null
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string|null $condition condition
     *
     * @return self
     */
    public function setCondition($condition)
    {
        if (is_null($condition)) {
            throw new \InvalidArgumentException('non-nullable condition cannot be null');
        }
        $allowedValues = $this->getConditionAllowableValues();
        if (!in_array($condition, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'condition', must be one of '%s'",
                    $condition,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets medias
     *
     * @return \Tripartie\Tpdk\Model\MediaRead[]
     */
    public function getMedias()
    {
        return $this->container['medias'];
    }

    /**
     * Sets medias
     *
     * @param \Tripartie\Tpdk\Model\MediaRead[] $medias medias
     *
     * @return self
     */
    public function setMedias($medias)
    {
        if (is_null($medias)) {
            throw new \InvalidArgumentException('non-nullable medias cannot be null');
        }
        $this->container['medias'] = $medias;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


