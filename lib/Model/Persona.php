<?php
/**
 * Persona
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tripartie
 *
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.92
 * Contact: noc@tripartie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tripartie\Tpdk\Model;

use \ArrayAccess;
use \Tripartie\Tpdk\ObjectSerializer;

/**
 * Persona Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Persona implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Persona';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'captcha' => 'string',
        'organization' => 'string',
        'targetUrl' => 'string',
        'authUrl' => 'string',
        'expireAt' => '\DateTime',
        'password' => 'string',
        'plainPassword' => 'string',
        'firstName' => 'string',
        'lastName' => 'string',
        'gender' => 'string',
        'dateOfBirth' => '\DateTime',
        'language' => 'string',
        'email' => 'string',
        'mobilePhoneNumber' => 'string',
        'address' => '\Tripartie\Tpdk\Model\Address',
        'riskLevel' => 'string',
        'riskScore' => 'int',
        'externalPurchaseCount' => 'int',
        'externalSellCount' => 'int',
        'metadata' => '\Tripartie\Tpdk\Model\Metadata[]',
        'offers' => 'string[]',
        'purchases' => 'string[]',
        'views' => '\Tripartie\Tpdk\Model\View[]',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'offerCount' => 'int',
        'purchaseCount' => 'int',
        'roles' => 'string[]',
        'userIdentifier' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'captcha' => null,
        'organization' => 'iri-reference',
        'targetUrl' => null,
        'authUrl' => 'uri',
        'expireAt' => 'date-time',
        'password' => null,
        'plainPassword' => null,
        'firstName' => null,
        'lastName' => null,
        'gender' => null,
        'dateOfBirth' => 'date',
        'language' => null,
        'email' => null,
        'mobilePhoneNumber' => null,
        'address' => null,
        'riskLevel' => null,
        'riskScore' => null,
        'externalPurchaseCount' => null,
        'externalSellCount' => null,
        'metadata' => null,
        'offers' => 'iri-reference',
        'purchases' => 'iri-reference',
        'views' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'offerCount' => null,
        'purchaseCount' => null,
        'roles' => null,
        'userIdentifier' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'captcha' => true,
		'organization' => true,
		'targetUrl' => true,
		'authUrl' => true,
		'expireAt' => true,
		'password' => true,
		'plainPassword' => true,
		'firstName' => false,
		'lastName' => false,
		'gender' => false,
		'dateOfBirth' => true,
		'language' => true,
		'email' => true,
		'mobilePhoneNumber' => true,
		'address' => true,
		'riskLevel' => true,
		'riskScore' => true,
		'externalPurchaseCount' => false,
		'externalSellCount' => false,
		'metadata' => false,
		'offers' => false,
		'purchases' => false,
		'views' => false,
		'createdAt' => false,
		'updatedAt' => true,
		'offerCount' => false,
		'purchaseCount' => false,
		'roles' => false,
		'userIdentifier' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'captcha' => 'captcha',
        'organization' => 'organization',
        'targetUrl' => 'targetUrl',
        'authUrl' => 'authUrl',
        'expireAt' => 'expireAt',
        'password' => 'password',
        'plainPassword' => 'plainPassword',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'gender' => 'gender',
        'dateOfBirth' => 'dateOfBirth',
        'language' => 'language',
        'email' => 'email',
        'mobilePhoneNumber' => 'mobilePhoneNumber',
        'address' => 'address',
        'riskLevel' => 'riskLevel',
        'riskScore' => 'riskScore',
        'externalPurchaseCount' => 'externalPurchaseCount',
        'externalSellCount' => 'externalSellCount',
        'metadata' => 'metadata',
        'offers' => 'offers',
        'purchases' => 'purchases',
        'views' => 'views',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt',
        'offerCount' => 'offerCount',
        'purchaseCount' => 'purchaseCount',
        'roles' => 'roles',
        'userIdentifier' => 'userIdentifier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'captcha' => 'setCaptcha',
        'organization' => 'setOrganization',
        'targetUrl' => 'setTargetUrl',
        'authUrl' => 'setAuthUrl',
        'expireAt' => 'setExpireAt',
        'password' => 'setPassword',
        'plainPassword' => 'setPlainPassword',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'gender' => 'setGender',
        'dateOfBirth' => 'setDateOfBirth',
        'language' => 'setLanguage',
        'email' => 'setEmail',
        'mobilePhoneNumber' => 'setMobilePhoneNumber',
        'address' => 'setAddress',
        'riskLevel' => 'setRiskLevel',
        'riskScore' => 'setRiskScore',
        'externalPurchaseCount' => 'setExternalPurchaseCount',
        'externalSellCount' => 'setExternalSellCount',
        'metadata' => 'setMetadata',
        'offers' => 'setOffers',
        'purchases' => 'setPurchases',
        'views' => 'setViews',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'offerCount' => 'setOfferCount',
        'purchaseCount' => 'setPurchaseCount',
        'roles' => 'setRoles',
        'userIdentifier' => 'setUserIdentifier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'captcha' => 'getCaptcha',
        'organization' => 'getOrganization',
        'targetUrl' => 'getTargetUrl',
        'authUrl' => 'getAuthUrl',
        'expireAt' => 'getExpireAt',
        'password' => 'getPassword',
        'plainPassword' => 'getPlainPassword',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'gender' => 'getGender',
        'dateOfBirth' => 'getDateOfBirth',
        'language' => 'getLanguage',
        'email' => 'getEmail',
        'mobilePhoneNumber' => 'getMobilePhoneNumber',
        'address' => 'getAddress',
        'riskLevel' => 'getRiskLevel',
        'riskScore' => 'getRiskScore',
        'externalPurchaseCount' => 'getExternalPurchaseCount',
        'externalSellCount' => 'getExternalSellCount',
        'metadata' => 'getMetadata',
        'offers' => 'getOffers',
        'purchases' => 'getPurchases',
        'views' => 'getViews',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'offerCount' => 'getOfferCount',
        'purchaseCount' => 'getPurchaseCount',
        'roles' => 'getRoles',
        'userIdentifier' => 'getUserIdentifier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const GENDER_MALE = 'MALE';
    public const GENDER_FEMALE = 'FEMALE';
    public const GENDER_OTHER = 'OTHER';
    public const GENDER_RATHER_NOT_SAY = 'RATHER_NOT_SAY';
    public const RISK_LEVEL_WEAK = 'WEAK';
    public const RISK_LEVEL_MEDIUM = 'MEDIUM';
    public const RISK_LEVEL_HIGH = 'HIGH';
    public const RISK_LEVEL_NULL = 'null';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_MALE,
            self::GENDER_FEMALE,
            self::GENDER_OTHER,
            self::GENDER_RATHER_NOT_SAY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRiskLevelAllowableValues()
    {
        return [
            self::RISK_LEVEL_WEAK,
            self::RISK_LEVEL_MEDIUM,
            self::RISK_LEVEL_HIGH,
            self::RISK_LEVEL_NULL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('captcha', $data ?? [], null);
        $this->setIfExists('organization', $data ?? [], null);
        $this->setIfExists('targetUrl', $data ?? [], null);
        $this->setIfExists('authUrl', $data ?? [], null);
        $this->setIfExists('expireAt', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('plainPassword', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], 'RATHER_NOT_SAY');
        $this->setIfExists('dateOfBirth', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('mobilePhoneNumber', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('riskLevel', $data ?? [], null);
        $this->setIfExists('riskScore', $data ?? [], null);
        $this->setIfExists('externalPurchaseCount', $data ?? [], null);
        $this->setIfExists('externalSellCount', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('offers', $data ?? [], null);
        $this->setIfExists('purchases', $data ?? [], null);
        $this->setIfExists('views', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('offerCount', $data ?? [], null);
        $this->setIfExists('purchaseCount', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('userIdentifier', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gender', must be one of '%s'",
                $this->container['gender'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRiskLevelAllowableValues();
        if (!is_null($this->container['riskLevel']) && !in_array($this->container['riskLevel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'riskLevel', must be one of '%s'",
                $this->container['riskLevel'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['riskScore']) && ($this->container['riskScore'] > 100)) {
            $invalidProperties[] = "invalid value for 'riskScore', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['riskScore']) && ($this->container['riskScore'] < 0)) {
            $invalidProperties[] = "invalid value for 'riskScore', must be bigger than or equal to 0.";
        }

        if ($this->container['offers'] === null) {
            $invalidProperties[] = "'offers' can't be null";
        }
        if ($this->container['purchases'] === null) {
            $invalidProperties[] = "'purchases' can't be null";
        }
        if ($this->container['views'] === null) {
            $invalidProperties[] = "'views' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets captcha
     *
     * @return string|null
     */
    public function getCaptcha()
    {
        return $this->container['captcha'];
    }

    /**
     * Sets captcha
     *
     * @param string|null $captcha captcha
     *
     * @return self
     */
    public function setCaptcha($captcha)
    {
        if (is_null($captcha)) {
            array_push($this->openAPINullablesSetToNull, 'captcha');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('captcha', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['captcha'] = $captcha;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return string|null
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string|null $organization organization
     *
     * @return self
     */
    public function setOrganization($organization)
    {
        if (is_null($organization)) {
            array_push($this->openAPINullablesSetToNull, 'organization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets targetUrl
     *
     * @return string|null
     */
    public function getTargetUrl()
    {
        return $this->container['targetUrl'];
    }

    /**
     * Sets targetUrl
     *
     * @param string|null $targetUrl The URL you wish that Persona to go to without additional MFA. The URL MUST concern that Persona.
     *
     * @return self
     */
    public function setTargetUrl($targetUrl)
    {
        if (is_null($targetUrl)) {
            array_push($this->openAPINullablesSetToNull, 'targetUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetUrl'] = $targetUrl;

        return $this;
    }

    /**
     * Gets authUrl
     *
     * @return string|null
     */
    public function getAuthUrl()
    {
        return $this->container['authUrl'];
    }

    /**
     * Sets authUrl
     *
     * @param string|null $authUrl Url that is able to bypass MFA for a single user. Please note that this should not be shared between the complainant and the seller or anyone external to them.
     *
     * @return self
     */
    public function setAuthUrl($authUrl)
    {
        if (is_null($authUrl)) {
            array_push($this->openAPINullablesSetToNull, 'authUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authUrl'] = $authUrl;

        return $this;
    }

    /**
     * Gets expireAt
     *
     * @return \DateTime|null
     */
    public function getExpireAt()
    {
        return $this->container['expireAt'];
    }

    /**
     * Sets expireAt
     *
     * @param \DateTime|null $expireAt This authenticated-URL cannot be renewed, you will have to re-create one each time. Typically valid for a single hour.
     *
     * @return self
     */
    public function setExpireAt($expireAt)
    {
        if (is_null($expireAt)) {
            array_push($this->openAPINullablesSetToNull, 'expireAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expireAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expireAt'] = $expireAt;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password The hashed password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            array_push($this->openAPINullablesSetToNull, 'password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets plainPassword
     *
     * @return string|null
     */
    public function getPlainPassword()
    {
        return $this->container['plainPassword'];
    }

    /**
     * Sets plainPassword
     *
     * @param string|null $plainPassword plainPassword
     *
     * @return self
     */
    public function setPlainPassword($plainPassword)
    {
        if (is_null($plainPassword)) {
            array_push($this->openAPINullablesSetToNull, 'plainPassword');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plainPassword', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['plainPassword'] = $plainPassword;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName firstName
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            throw new \InvalidArgumentException('non-nullable firstName cannot be null');
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName lastName
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            throw new \InvalidArgumentException('non-nullable lastName cannot be null');
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gender', must be one of '%s'",
                    $gender,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets dateOfBirth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['dateOfBirth'];
    }

    /**
     * Sets dateOfBirth
     *
     * @param \DateTime|null $dateOfBirth dateOfBirth
     *
     * @return self
     */
    public function setDateOfBirth($dateOfBirth)
    {
        if (is_null($dateOfBirth)) {
            array_push($this->openAPINullablesSetToNull, 'dateOfBirth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dateOfBirth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dateOfBirth'] = $dateOfBirth;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language That data is used for rendering the frontend application with given language. If not set, will be inferred. Custom codes can be issued for specific requirements.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            array_push($this->openAPINullablesSetToNull, 'language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets mobilePhoneNumber
     *
     * @return string|null
     */
    public function getMobilePhoneNumber()
    {
        return $this->container['mobilePhoneNumber'];
    }

    /**
     * Sets mobilePhoneNumber
     *
     * @param string|null $mobilePhoneNumber mobilePhoneNumber
     *
     * @return self
     */
    public function setMobilePhoneNumber($mobilePhoneNumber)
    {
        if (is_null($mobilePhoneNumber)) {
            array_push($this->openAPINullablesSetToNull, 'mobilePhoneNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mobilePhoneNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mobilePhoneNumber'] = $mobilePhoneNumber;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Tripartie\Tpdk\Model\Address|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Tripartie\Tpdk\Model\Address|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            array_push($this->openAPINullablesSetToNull, 'address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets riskLevel
     *
     * @return string|null
     */
    public function getRiskLevel()
    {
        return $this->container['riskLevel'];
    }

    /**
     * Sets riskLevel
     *
     * @param string|null $riskLevel We sort Persona into three distinct risks' category. This is inferred from the riskScore.
     *
     * @return self
     */
    public function setRiskLevel($riskLevel)
    {
        if (is_null($riskLevel)) {
            array_push($this->openAPINullablesSetToNull, 'riskLevel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('riskLevel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRiskLevelAllowableValues();
        if (!is_null($riskLevel) && !in_array($riskLevel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'riskLevel', must be one of '%s'",
                    $riskLevel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['riskLevel'] = $riskLevel;

        return $this;
    }

    /**
     * Gets riskScore
     *
     * @return int|null
     */
    public function getRiskScore()
    {
        return $this->container['riskScore'];
    }

    /**
     * Sets riskScore
     *
     * @param int|null $riskScore That score is regularly updated, each action taken can potentially update that value. A value close to zero mean zero risk and close to a hundred mean risky.
     *
     * @return self
     */
    public function setRiskScore($riskScore)
    {
        if (is_null($riskScore)) {
            array_push($this->openAPINullablesSetToNull, 'riskScore');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('riskScore', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($riskScore) && ($riskScore > 100)) {
            throw new \InvalidArgumentException('invalid value for $riskScore when calling Persona., must be smaller than or equal to 100.');
        }
        if (!is_null($riskScore) && ($riskScore < 0)) {
            throw new \InvalidArgumentException('invalid value for $riskScore when calling Persona., must be bigger than or equal to 0.');
        }

        $this->container['riskScore'] = $riskScore;

        return $this;
    }

    /**
     * Gets externalPurchaseCount
     *
     * @return int|null
     */
    public function getExternalPurchaseCount()
    {
        return $this->container['externalPurchaseCount'];
    }

    /**
     * Sets externalPurchaseCount
     *
     * @param int|null $externalPurchaseCount Knowing the statistics on your user is used to better know its profile when you do not use the Safe-Checkout feature. Although it is not required, we recommend that you keep us informed.
     *
     * @return self
     */
    public function setExternalPurchaseCount($externalPurchaseCount)
    {
        if (is_null($externalPurchaseCount)) {
            throw new \InvalidArgumentException('non-nullable externalPurchaseCount cannot be null');
        }
        $this->container['externalPurchaseCount'] = $externalPurchaseCount;

        return $this;
    }

    /**
     * Gets externalSellCount
     *
     * @return int|null
     */
    public function getExternalSellCount()
    {
        return $this->container['externalSellCount'];
    }

    /**
     * Sets externalSellCount
     *
     * @param int|null $externalSellCount Knowing the statistics on your user is used to better know its profile when you do not use the Safe-Checkout feature. Although it is not required, we recommend that you keep us informed.
     *
     * @return self
     */
    public function setExternalSellCount($externalSellCount)
    {
        if (is_null($externalSellCount)) {
            throw new \InvalidArgumentException('non-nullable externalSellCount cannot be null');
        }
        $this->container['externalSellCount'] = $externalSellCount;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Tripartie\Tpdk\Model\Metadata[]|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Tripartie\Tpdk\Model\Metadata[]|null $metadata You can assign different meta to your Persona object for different purposes. eg. Ease searching.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets offers
     *
     * @return string[]
     */
    public function getOffers()
    {
        return $this->container['offers'];
    }

    /**
     * Sets offers
     *
     * @param string[] $offers offers
     *
     * @return self
     */
    public function setOffers($offers)
    {
        if (is_null($offers)) {
            throw new \InvalidArgumentException('non-nullable offers cannot be null');
        }
        $this->container['offers'] = $offers;

        return $this;
    }

    /**
     * Gets purchases
     *
     * @return string[]
     */
    public function getPurchases()
    {
        return $this->container['purchases'];
    }

    /**
     * Sets purchases
     *
     * @param string[] $purchases purchases
     *
     * @return self
     */
    public function setPurchases($purchases)
    {
        if (is_null($purchases)) {
            throw new \InvalidArgumentException('non-nullable purchases cannot be null');
        }
        $this->container['purchases'] = $purchases;

        return $this;
    }

    /**
     * Gets views
     *
     * @return \Tripartie\Tpdk\Model\View[]
     */
    public function getViews()
    {
        return $this->container['views'];
    }

    /**
     * Sets views
     *
     * @param \Tripartie\Tpdk\Model\View[] $views views
     *
     * @return self
     */
    public function setViews($views)
    {
        if (is_null($views)) {
            throw new \InvalidArgumentException('non-nullable views cannot be null');
        }
        $this->container['views'] = $views;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            array_push($this->openAPINullablesSetToNull, 'updatedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updatedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets offerCount
     *
     * @return int|null
     */
    public function getOfferCount()
    {
        return $this->container['offerCount'];
    }

    /**
     * Sets offerCount
     *
     * @param int|null $offerCount Issued Offers count owned by a given Persona
     *
     * @return self
     */
    public function setOfferCount($offerCount)
    {
        if (is_null($offerCount)) {
            throw new \InvalidArgumentException('non-nullable offerCount cannot be null');
        }
        $this->container['offerCount'] = $offerCount;

        return $this;
    }

    /**
     * Gets purchaseCount
     *
     * @return int|null
     */
    public function getPurchaseCount()
    {
        return $this->container['purchaseCount'];
    }

    /**
     * Sets purchaseCount
     *
     * @param int|null $purchaseCount purchaseCount
     *
     * @return self
     */
    public function setPurchaseCount($purchaseCount)
    {
        if (is_null($purchaseCount)) {
            throw new \InvalidArgumentException('non-nullable purchaseCount cannot be null');
        }
        $this->container['purchaseCount'] = $purchaseCount;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[]|null $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets userIdentifier
     *
     * @return string|null
     */
    public function getUserIdentifier()
    {
        return $this->container['userIdentifier'];
    }

    /**
     * Sets userIdentifier
     *
     * @param string|null $userIdentifier Either email or the mobile phone number
     *
     * @return self
     */
    public function setUserIdentifier($userIdentifier)
    {
        if (is_null($userIdentifier)) {
            throw new \InvalidArgumentException('non-nullable userIdentifier cannot be null');
        }
        $this->container['userIdentifier'] = $userIdentifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


