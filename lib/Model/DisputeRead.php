<?php
/**
 * DisputeRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tripartie
 *
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: noc@tripartie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tripartie\Tpdk\Model;

use \ArrayAccess;
use \Tripartie\Tpdk\ObjectSerializer;

/**
 * DisputeRead Class Doc Comment
 *
 * @category Class
 * @description Access directly our resolution center without having used the safe-checkout feature.
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DisputeRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Dispute-Read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ulid' => 'string',
        'transaction' => '\Tripartie\Tpdk\Model\TransactionRead',
        'status' => 'string',
        'itemCount' => 'int',
        'issueType' => 'string',
        'issueInDescriptionType' => 'string',
        'issueDetails' => 'string',
        'complainantTruthfulnessScore' => 'int',
        'sellerTruthfulnessScore' => 'int',
        'complainantStake' => 'string',
        'inferredStake' => 'string',
        'recommendedSolution' => 'string',
        'recommendedPartialRefundAmount' => 'int',
        'chosenSolution' => 'string',
        'chosenPartialRefundAmount' => 'int',
        'counterSolution' => 'string',
        'counterPartialRefundAmount' => 'int',
        'complainantApproval' => 'bool',
        'sellerApproval' => 'bool',
        'platformSolution' => 'string',
        'platformPartialRefundAmount' => 'int',
        'platformApproval' => 'bool',
        'arbitrationBy' => 'string',
        'parcels' => '\Tripartie\Tpdk\Model\ParcelRead[]',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'iri' => 'string',
        'messageCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ulid' => null,
        'transaction' => null,
        'status' => null,
        'itemCount' => null,
        'issueType' => null,
        'issueInDescriptionType' => null,
        'issueDetails' => null,
        'complainantTruthfulnessScore' => null,
        'sellerTruthfulnessScore' => null,
        'complainantStake' => null,
        'inferredStake' => null,
        'recommendedSolution' => null,
        'recommendedPartialRefundAmount' => null,
        'chosenSolution' => null,
        'chosenPartialRefundAmount' => null,
        'counterSolution' => null,
        'counterPartialRefundAmount' => null,
        'complainantApproval' => null,
        'sellerApproval' => null,
        'platformSolution' => null,
        'platformPartialRefundAmount' => null,
        'platformApproval' => null,
        'arbitrationBy' => 'iri-reference',
        'parcels' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'iri' => 'iri-reference',
        'messageCount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ulid' => false,
		'transaction' => false,
		'status' => false,
		'itemCount' => true,
		'issueType' => false,
		'issueInDescriptionType' => true,
		'issueDetails' => false,
		'complainantTruthfulnessScore' => false,
		'sellerTruthfulnessScore' => false,
		'complainantStake' => false,
		'inferredStake' => true,
		'recommendedSolution' => true,
		'recommendedPartialRefundAmount' => true,
		'chosenSolution' => true,
		'chosenPartialRefundAmount' => true,
		'counterSolution' => true,
		'counterPartialRefundAmount' => true,
		'complainantApproval' => true,
		'sellerApproval' => true,
		'platformSolution' => true,
		'platformPartialRefundAmount' => true,
		'platformApproval' => true,
		'arbitrationBy' => true,
		'parcels' => false,
		'createdAt' => false,
		'updatedAt' => true,
		'iri' => false,
		'messageCount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ulid' => 'ulid',
        'transaction' => 'transaction',
        'status' => 'status',
        'itemCount' => 'itemCount',
        'issueType' => 'issueType',
        'issueInDescriptionType' => 'issueInDescriptionType',
        'issueDetails' => 'issueDetails',
        'complainantTruthfulnessScore' => 'complainantTruthfulnessScore',
        'sellerTruthfulnessScore' => 'sellerTruthfulnessScore',
        'complainantStake' => 'complainantStake',
        'inferredStake' => 'inferredStake',
        'recommendedSolution' => 'recommendedSolution',
        'recommendedPartialRefundAmount' => 'recommendedPartialRefundAmount',
        'chosenSolution' => 'chosenSolution',
        'chosenPartialRefundAmount' => 'chosenPartialRefundAmount',
        'counterSolution' => 'counterSolution',
        'counterPartialRefundAmount' => 'counterPartialRefundAmount',
        'complainantApproval' => 'complainantApproval',
        'sellerApproval' => 'sellerApproval',
        'platformSolution' => 'platformSolution',
        'platformPartialRefundAmount' => 'platformPartialRefundAmount',
        'platformApproval' => 'platformApproval',
        'arbitrationBy' => 'arbitrationBy',
        'parcels' => 'parcels',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt',
        'iri' => 'iri',
        'messageCount' => 'messageCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ulid' => 'setUlid',
        'transaction' => 'setTransaction',
        'status' => 'setStatus',
        'itemCount' => 'setItemCount',
        'issueType' => 'setIssueType',
        'issueInDescriptionType' => 'setIssueInDescriptionType',
        'issueDetails' => 'setIssueDetails',
        'complainantTruthfulnessScore' => 'setComplainantTruthfulnessScore',
        'sellerTruthfulnessScore' => 'setSellerTruthfulnessScore',
        'complainantStake' => 'setComplainantStake',
        'inferredStake' => 'setInferredStake',
        'recommendedSolution' => 'setRecommendedSolution',
        'recommendedPartialRefundAmount' => 'setRecommendedPartialRefundAmount',
        'chosenSolution' => 'setChosenSolution',
        'chosenPartialRefundAmount' => 'setChosenPartialRefundAmount',
        'counterSolution' => 'setCounterSolution',
        'counterPartialRefundAmount' => 'setCounterPartialRefundAmount',
        'complainantApproval' => 'setComplainantApproval',
        'sellerApproval' => 'setSellerApproval',
        'platformSolution' => 'setPlatformSolution',
        'platformPartialRefundAmount' => 'setPlatformPartialRefundAmount',
        'platformApproval' => 'setPlatformApproval',
        'arbitrationBy' => 'setArbitrationBy',
        'parcels' => 'setParcels',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'iri' => 'setIri',
        'messageCount' => 'setMessageCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ulid' => 'getUlid',
        'transaction' => 'getTransaction',
        'status' => 'getStatus',
        'itemCount' => 'getItemCount',
        'issueType' => 'getIssueType',
        'issueInDescriptionType' => 'getIssueInDescriptionType',
        'issueDetails' => 'getIssueDetails',
        'complainantTruthfulnessScore' => 'getComplainantTruthfulnessScore',
        'sellerTruthfulnessScore' => 'getSellerTruthfulnessScore',
        'complainantStake' => 'getComplainantStake',
        'inferredStake' => 'getInferredStake',
        'recommendedSolution' => 'getRecommendedSolution',
        'recommendedPartialRefundAmount' => 'getRecommendedPartialRefundAmount',
        'chosenSolution' => 'getChosenSolution',
        'chosenPartialRefundAmount' => 'getChosenPartialRefundAmount',
        'counterSolution' => 'getCounterSolution',
        'counterPartialRefundAmount' => 'getCounterPartialRefundAmount',
        'complainantApproval' => 'getComplainantApproval',
        'sellerApproval' => 'getSellerApproval',
        'platformSolution' => 'getPlatformSolution',
        'platformPartialRefundAmount' => 'getPlatformPartialRefundAmount',
        'platformApproval' => 'getPlatformApproval',
        'arbitrationBy' => 'getArbitrationBy',
        'parcels' => 'getParcels',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'iri' => 'getIri',
        'messageCount' => 'getMessageCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_CREATED = 'CREATED';
    public const STATUS_SUBMITTED = 'SUBMITTED';
    public const STATUS_OPENED = 'OPENED';
    public const STATUS_ABANDONED = 'ABANDONED';
    public const STATUS_PENDING = 'PENDING';
    public const STATUS_OBJECTED = 'OBJECTED';
    public const STATUS_SHIPPED = 'SHIPPED';
    public const STATUS_IN_TRANSIT = 'IN_TRANSIT';
    public const STATUS_RETURNED = 'RETURNED';
    public const STATUS_DISMISSED = 'DISMISSED';
    public const STATUS_RESOLVED = 'RESOLVED';
    public const ISSUE_TYPE_NOT_AS_DESCRIBED = 'NOT_AS_DESCRIBED';
    public const ISSUE_TYPE_DOES_NOT_WORK = 'DOES_NOT_WORK';
    public const ISSUE_TYPE_IS_INCOMPLETE = 'IS_INCOMPLETE';
    public const ISSUE_TYPE_DELIVERY_ISSUE = 'DELIVERY_ISSUE';
    public const ISSUE_TYPE_ALLEGED_FRAUD = 'ALLEGED_FRAUD';
    public const ISSUE_IN_DESCRIPTION_TYPE_WRONG_COLOUR = 'WRONG_COLOUR';
    public const ISSUE_IN_DESCRIPTION_TYPE_DAMAGED_OR_USED = 'DAMAGED_OR_USED';
    public const ISSUE_IN_DESCRIPTION_TYPE_INCORRECT_FORMAT_OR_SIZE = 'INCORRECT_FORMAT_OR_SIZE';
    public const ISSUE_IN_DESCRIPTION_TYPE_DIFFERENT_MATERIAL = 'DIFFERENT_MATERIAL';
    public const ISSUE_IN_DESCRIPTION_TYPE_NULL = 'null';
    public const COMPLAINANT_STAKE_LOW = 'LOW';
    public const COMPLAINANT_STAKE_MEDIUM = 'MEDIUM';
    public const COMPLAINANT_STAKE_HIGH = 'HIGH';
    public const INFERRED_STAKE_LOW = 'LOW';
    public const INFERRED_STAKE_MEDIUM = 'MEDIUM';
    public const INFERRED_STAKE_HIGH = 'HIGH';
    public const INFERRED_STAKE_NULL = 'null';
    public const RECOMMENDED_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN = 'PARTIAL_REFUND_WITH_PARTIAL_RETURN';
    public const RECOMMENDED_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN = 'PARTIAL_REFUND_WITHOUT_RETURN';
    public const RECOMMENDED_SOLUTION_COMPLETE_REFUND_WITH_RETURN = 'COMPLETE_REFUND_WITH_RETURN';
    public const RECOMMENDED_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN = 'COMPLETE_REFUND_WITHOUT_RETURN';
    public const RECOMMENDED_SOLUTION_ABANDON_CLAIM = 'ABANDON_CLAIM';
    public const RECOMMENDED_SOLUTION_NULL = 'null';
    public const CHOSEN_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN = 'PARTIAL_REFUND_WITH_PARTIAL_RETURN';
    public const CHOSEN_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN = 'PARTIAL_REFUND_WITHOUT_RETURN';
    public const CHOSEN_SOLUTION_COMPLETE_REFUND_WITH_RETURN = 'COMPLETE_REFUND_WITH_RETURN';
    public const CHOSEN_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN = 'COMPLETE_REFUND_WITHOUT_RETURN';
    public const CHOSEN_SOLUTION_ABANDON_CLAIM = 'ABANDON_CLAIM';
    public const CHOSEN_SOLUTION_NULL = 'null';
    public const COUNTER_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN = 'PARTIAL_REFUND_WITH_PARTIAL_RETURN';
    public const COUNTER_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN = 'PARTIAL_REFUND_WITHOUT_RETURN';
    public const COUNTER_SOLUTION_COMPLETE_REFUND_WITH_RETURN = 'COMPLETE_REFUND_WITH_RETURN';
    public const COUNTER_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN = 'COMPLETE_REFUND_WITHOUT_RETURN';
    public const COUNTER_SOLUTION_ABANDON_CLAIM = 'ABANDON_CLAIM';
    public const COUNTER_SOLUTION_NULL = 'null';
    public const PLATFORM_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN = 'PARTIAL_REFUND_WITH_PARTIAL_RETURN';
    public const PLATFORM_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN = 'PARTIAL_REFUND_WITHOUT_RETURN';
    public const PLATFORM_SOLUTION_COMPLETE_REFUND_WITH_RETURN = 'COMPLETE_REFUND_WITH_RETURN';
    public const PLATFORM_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN = 'COMPLETE_REFUND_WITHOUT_RETURN';
    public const PLATFORM_SOLUTION_ABANDON_CLAIM = 'ABANDON_CLAIM';
    public const PLATFORM_SOLUTION_NULL = 'null';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CREATED,
            self::STATUS_SUBMITTED,
            self::STATUS_OPENED,
            self::STATUS_ABANDONED,
            self::STATUS_PENDING,
            self::STATUS_OBJECTED,
            self::STATUS_SHIPPED,
            self::STATUS_IN_TRANSIT,
            self::STATUS_RETURNED,
            self::STATUS_DISMISSED,
            self::STATUS_RESOLVED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIssueTypeAllowableValues()
    {
        return [
            self::ISSUE_TYPE_NOT_AS_DESCRIBED,
            self::ISSUE_TYPE_DOES_NOT_WORK,
            self::ISSUE_TYPE_IS_INCOMPLETE,
            self::ISSUE_TYPE_DELIVERY_ISSUE,
            self::ISSUE_TYPE_ALLEGED_FRAUD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIssueInDescriptionTypeAllowableValues()
    {
        return [
            self::ISSUE_IN_DESCRIPTION_TYPE_WRONG_COLOUR,
            self::ISSUE_IN_DESCRIPTION_TYPE_DAMAGED_OR_USED,
            self::ISSUE_IN_DESCRIPTION_TYPE_INCORRECT_FORMAT_OR_SIZE,
            self::ISSUE_IN_DESCRIPTION_TYPE_DIFFERENT_MATERIAL,
            self::ISSUE_IN_DESCRIPTION_TYPE_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getComplainantStakeAllowableValues()
    {
        return [
            self::COMPLAINANT_STAKE_LOW,
            self::COMPLAINANT_STAKE_MEDIUM,
            self::COMPLAINANT_STAKE_HIGH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInferredStakeAllowableValues()
    {
        return [
            self::INFERRED_STAKE_LOW,
            self::INFERRED_STAKE_MEDIUM,
            self::INFERRED_STAKE_HIGH,
            self::INFERRED_STAKE_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecommendedSolutionAllowableValues()
    {
        return [
            self::RECOMMENDED_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN,
            self::RECOMMENDED_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN,
            self::RECOMMENDED_SOLUTION_COMPLETE_REFUND_WITH_RETURN,
            self::RECOMMENDED_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN,
            self::RECOMMENDED_SOLUTION_ABANDON_CLAIM,
            self::RECOMMENDED_SOLUTION_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChosenSolutionAllowableValues()
    {
        return [
            self::CHOSEN_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN,
            self::CHOSEN_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN,
            self::CHOSEN_SOLUTION_COMPLETE_REFUND_WITH_RETURN,
            self::CHOSEN_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN,
            self::CHOSEN_SOLUTION_ABANDON_CLAIM,
            self::CHOSEN_SOLUTION_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCounterSolutionAllowableValues()
    {
        return [
            self::COUNTER_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN,
            self::COUNTER_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN,
            self::COUNTER_SOLUTION_COMPLETE_REFUND_WITH_RETURN,
            self::COUNTER_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN,
            self::COUNTER_SOLUTION_ABANDON_CLAIM,
            self::COUNTER_SOLUTION_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlatformSolutionAllowableValues()
    {
        return [
            self::PLATFORM_SOLUTION_PARTIAL_REFUND_WITH_PARTIAL_RETURN,
            self::PLATFORM_SOLUTION_PARTIAL_REFUND_WITHOUT_RETURN,
            self::PLATFORM_SOLUTION_COMPLETE_REFUND_WITH_RETURN,
            self::PLATFORM_SOLUTION_COMPLETE_REFUND_WITHOUT_RETURN,
            self::PLATFORM_SOLUTION_ABANDON_CLAIM,
            self::PLATFORM_SOLUTION_NULL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ulid', $data ?? [], null);
        $this->setIfExists('transaction', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], 'CREATED');
        $this->setIfExists('itemCount', $data ?? [], null);
        $this->setIfExists('issueType', $data ?? [], null);
        $this->setIfExists('issueInDescriptionType', $data ?? [], null);
        $this->setIfExists('issueDetails', $data ?? [], null);
        $this->setIfExists('complainantTruthfulnessScore', $data ?? [], 100);
        $this->setIfExists('sellerTruthfulnessScore', $data ?? [], 100);
        $this->setIfExists('complainantStake', $data ?? [], null);
        $this->setIfExists('inferredStake', $data ?? [], null);
        $this->setIfExists('recommendedSolution', $data ?? [], null);
        $this->setIfExists('recommendedPartialRefundAmount', $data ?? [], null);
        $this->setIfExists('chosenSolution', $data ?? [], null);
        $this->setIfExists('chosenPartialRefundAmount', $data ?? [], null);
        $this->setIfExists('counterSolution', $data ?? [], null);
        $this->setIfExists('counterPartialRefundAmount', $data ?? [], null);
        $this->setIfExists('complainantApproval', $data ?? [], null);
        $this->setIfExists('sellerApproval', $data ?? [], null);
        $this->setIfExists('platformSolution', $data ?? [], null);
        $this->setIfExists('platformPartialRefundAmount', $data ?? [], null);
        $this->setIfExists('platformApproval', $data ?? [], null);
        $this->setIfExists('arbitrationBy', $data ?? [], null);
        $this->setIfExists('parcels', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('iri', $data ?? [], null);
        $this->setIfExists('messageCount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ulid'] === null) {
            $invalidProperties[] = "'ulid' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['issueType'] === null) {
            $invalidProperties[] = "'issueType' can't be null";
        }
        $allowedValues = $this->getIssueTypeAllowableValues();
        if (!is_null($this->container['issueType']) && !in_array($this->container['issueType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'issueType', must be one of '%s'",
                $this->container['issueType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIssueInDescriptionTypeAllowableValues();
        if (!is_null($this->container['issueInDescriptionType']) && !in_array($this->container['issueInDescriptionType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'issueInDescriptionType', must be one of '%s'",
                $this->container['issueInDescriptionType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['complainantTruthfulnessScore'] === null) {
            $invalidProperties[] = "'complainantTruthfulnessScore' can't be null";
        }
        if ($this->container['sellerTruthfulnessScore'] === null) {
            $invalidProperties[] = "'sellerTruthfulnessScore' can't be null";
        }
        if ($this->container['complainantStake'] === null) {
            $invalidProperties[] = "'complainantStake' can't be null";
        }
        $allowedValues = $this->getComplainantStakeAllowableValues();
        if (!is_null($this->container['complainantStake']) && !in_array($this->container['complainantStake'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'complainantStake', must be one of '%s'",
                $this->container['complainantStake'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInferredStakeAllowableValues();
        if (!is_null($this->container['inferredStake']) && !in_array($this->container['inferredStake'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'inferredStake', must be one of '%s'",
                $this->container['inferredStake'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRecommendedSolutionAllowableValues();
        if (!is_null($this->container['recommendedSolution']) && !in_array($this->container['recommendedSolution'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'recommendedSolution', must be one of '%s'",
                $this->container['recommendedSolution'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChosenSolutionAllowableValues();
        if (!is_null($this->container['chosenSolution']) && !in_array($this->container['chosenSolution'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'chosenSolution', must be one of '%s'",
                $this->container['chosenSolution'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCounterSolutionAllowableValues();
        if (!is_null($this->container['counterSolution']) && !in_array($this->container['counterSolution'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'counterSolution', must be one of '%s'",
                $this->container['counterSolution'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['sellerApproval'] === null) {
            $invalidProperties[] = "'sellerApproval' can't be null";
        }
        $allowedValues = $this->getPlatformSolutionAllowableValues();
        if (!is_null($this->container['platformSolution']) && !in_array($this->container['platformSolution'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'platformSolution', must be one of '%s'",
                $this->container['platformSolution'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['platformPartialRefundAmount']) && ($this->container['platformPartialRefundAmount'] <= 0)) {
            $invalidProperties[] = "invalid value for 'platformPartialRefundAmount', must be bigger than 0.";
        }

        if ($this->container['parcels'] === null) {
            $invalidProperties[] = "'parcels' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ulid
     *
     * @return string
     */
    public function getUlid()
    {
        return $this->container['ulid'];
    }

    /**
     * Sets ulid
     *
     * @param string $ulid ulid
     *
     * @return self
     */
    public function setUlid($ulid)
    {
        if (is_null($ulid)) {
            throw new \InvalidArgumentException('non-nullable ulid cannot be null');
        }
        $this->container['ulid'] = $ulid;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return \Tripartie\Tpdk\Model\TransactionRead|null
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param \Tripartie\Tpdk\Model\TransactionRead|null $transaction transaction
     *
     * @return self
     */
    public function setTransaction($transaction)
    {
        if (is_null($transaction)) {
            throw new \InvalidArgumentException('non-nullable transaction cannot be null');
        }
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets itemCount
     *
     * @return int|null
     */
    public function getItemCount()
    {
        return $this->container['itemCount'];
    }

    /**
     * Sets itemCount
     *
     * @param int|null $itemCount The dispute may concern only PART of the package. Specify it there.
     *
     * @return self
     */
    public function setItemCount($itemCount)
    {
        if (is_null($itemCount)) {
            array_push($this->openAPINullablesSetToNull, 'itemCount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('itemCount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['itemCount'] = $itemCount;

        return $this;
    }

    /**
     * Gets issueType
     *
     * @return string
     */
    public function getIssueType()
    {
        return $this->container['issueType'];
    }

    /**
     * Sets issueType
     *
     * @param string $issueType issueType
     *
     * @return self
     */
    public function setIssueType($issueType)
    {
        if (is_null($issueType)) {
            throw new \InvalidArgumentException('non-nullable issueType cannot be null');
        }
        $allowedValues = $this->getIssueTypeAllowableValues();
        if (!in_array($issueType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'issueType', must be one of '%s'",
                    $issueType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['issueType'] = $issueType;

        return $this;
    }

    /**
     * Gets issueInDescriptionType
     *
     * @return string|null
     */
    public function getIssueInDescriptionType()
    {
        return $this->container['issueInDescriptionType'];
    }

    /**
     * Sets issueInDescriptionType
     *
     * @param string|null $issueInDescriptionType To be set only in conjunction of issueType = NOT_AS_DESCRIBED.
     *
     * @return self
     */
    public function setIssueInDescriptionType($issueInDescriptionType)
    {
        if (is_null($issueInDescriptionType)) {
            array_push($this->openAPINullablesSetToNull, 'issueInDescriptionType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issueInDescriptionType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getIssueInDescriptionTypeAllowableValues();
        if (!is_null($issueInDescriptionType) && !in_array($issueInDescriptionType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'issueInDescriptionType', must be one of '%s'",
                    $issueInDescriptionType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['issueInDescriptionType'] = $issueInDescriptionType;

        return $this;
    }

    /**
     * Gets issueDetails
     *
     * @return string|null
     */
    public function getIssueDetails()
    {
        return $this->container['issueDetails'];
    }

    /**
     * Sets issueDetails
     *
     * @param string|null $issueDetails issueDetails
     *
     * @return self
     */
    public function setIssueDetails($issueDetails)
    {
        if (is_null($issueDetails)) {
            throw new \InvalidArgumentException('non-nullable issueDetails cannot be null');
        }
        $this->container['issueDetails'] = $issueDetails;

        return $this;
    }

    /**
     * Gets complainantTruthfulnessScore
     *
     * @return int
     */
    public function getComplainantTruthfulnessScore()
    {
        return $this->container['complainantTruthfulnessScore'];
    }

    /**
     * Sets complainantTruthfulnessScore
     *
     * @param int $complainantTruthfulnessScore complainantTruthfulnessScore
     *
     * @return self
     */
    public function setComplainantTruthfulnessScore($complainantTruthfulnessScore)
    {
        if (is_null($complainantTruthfulnessScore)) {
            throw new \InvalidArgumentException('non-nullable complainantTruthfulnessScore cannot be null');
        }
        $this->container['complainantTruthfulnessScore'] = $complainantTruthfulnessScore;

        return $this;
    }

    /**
     * Gets sellerTruthfulnessScore
     *
     * @return int
     */
    public function getSellerTruthfulnessScore()
    {
        return $this->container['sellerTruthfulnessScore'];
    }

    /**
     * Sets sellerTruthfulnessScore
     *
     * @param int $sellerTruthfulnessScore sellerTruthfulnessScore
     *
     * @return self
     */
    public function setSellerTruthfulnessScore($sellerTruthfulnessScore)
    {
        if (is_null($sellerTruthfulnessScore)) {
            throw new \InvalidArgumentException('non-nullable sellerTruthfulnessScore cannot be null');
        }
        $this->container['sellerTruthfulnessScore'] = $sellerTruthfulnessScore;

        return $this;
    }

    /**
     * Gets complainantStake
     *
     * @return string
     */
    public function getComplainantStake()
    {
        return $this->container['complainantStake'];
    }

    /**
     * Sets complainantStake
     *
     * @param string $complainantStake complainantStake
     *
     * @return self
     */
    public function setComplainantStake($complainantStake)
    {
        if (is_null($complainantStake)) {
            throw new \InvalidArgumentException('non-nullable complainantStake cannot be null');
        }
        $allowedValues = $this->getComplainantStakeAllowableValues();
        if (!in_array($complainantStake, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'complainantStake', must be one of '%s'",
                    $complainantStake,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['complainantStake'] = $complainantStake;

        return $this;
    }

    /**
     * Gets inferredStake
     *
     * @return string|null
     */
    public function getInferredStake()
    {
        return $this->container['inferredStake'];
    }

    /**
     * Sets inferredStake
     *
     * @param string|null $inferredStake inferredStake
     *
     * @return self
     */
    public function setInferredStake($inferredStake)
    {
        if (is_null($inferredStake)) {
            array_push($this->openAPINullablesSetToNull, 'inferredStake');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inferredStake', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getInferredStakeAllowableValues();
        if (!is_null($inferredStake) && !in_array($inferredStake, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'inferredStake', must be one of '%s'",
                    $inferredStake,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['inferredStake'] = $inferredStake;

        return $this;
    }

    /**
     * Gets recommendedSolution
     *
     * @return string|null
     */
    public function getRecommendedSolution()
    {
        return $this->container['recommendedSolution'];
    }

    /**
     * Sets recommendedSolution
     *
     * @param string|null $recommendedSolution recommendedSolution
     *
     * @return self
     */
    public function setRecommendedSolution($recommendedSolution)
    {
        if (is_null($recommendedSolution)) {
            array_push($this->openAPINullablesSetToNull, 'recommendedSolution');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recommendedSolution', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRecommendedSolutionAllowableValues();
        if (!is_null($recommendedSolution) && !in_array($recommendedSolution, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'recommendedSolution', must be one of '%s'",
                    $recommendedSolution,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recommendedSolution'] = $recommendedSolution;

        return $this;
    }

    /**
     * Gets recommendedPartialRefundAmount
     *
     * @return int|null
     */
    public function getRecommendedPartialRefundAmount()
    {
        return $this->container['recommendedPartialRefundAmount'];
    }

    /**
     * Sets recommendedPartialRefundAmount
     *
     * @param int|null $recommendedPartialRefundAmount recommendedPartialRefundAmount
     *
     * @return self
     */
    public function setRecommendedPartialRefundAmount($recommendedPartialRefundAmount)
    {
        if (is_null($recommendedPartialRefundAmount)) {
            array_push($this->openAPINullablesSetToNull, 'recommendedPartialRefundAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recommendedPartialRefundAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recommendedPartialRefundAmount'] = $recommendedPartialRefundAmount;

        return $this;
    }

    /**
     * Gets chosenSolution
     *
     * @return string|null
     */
    public function getChosenSolution()
    {
        return $this->container['chosenSolution'];
    }

    /**
     * Sets chosenSolution
     *
     * @param string|null $chosenSolution chosenSolution
     *
     * @return self
     */
    public function setChosenSolution($chosenSolution)
    {
        if (is_null($chosenSolution)) {
            array_push($this->openAPINullablesSetToNull, 'chosenSolution');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chosenSolution', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getChosenSolutionAllowableValues();
        if (!is_null($chosenSolution) && !in_array($chosenSolution, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'chosenSolution', must be one of '%s'",
                    $chosenSolution,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['chosenSolution'] = $chosenSolution;

        return $this;
    }

    /**
     * Gets chosenPartialRefundAmount
     *
     * @return int|null
     */
    public function getChosenPartialRefundAmount()
    {
        return $this->container['chosenPartialRefundAmount'];
    }

    /**
     * Sets chosenPartialRefundAmount
     *
     * @param int|null $chosenPartialRefundAmount chosenPartialRefundAmount
     *
     * @return self
     */
    public function setChosenPartialRefundAmount($chosenPartialRefundAmount)
    {
        if (is_null($chosenPartialRefundAmount)) {
            array_push($this->openAPINullablesSetToNull, 'chosenPartialRefundAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chosenPartialRefundAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['chosenPartialRefundAmount'] = $chosenPartialRefundAmount;

        return $this;
    }

    /**
     * Gets counterSolution
     *
     * @return string|null
     */
    public function getCounterSolution()
    {
        return $this->container['counterSolution'];
    }

    /**
     * Sets counterSolution
     *
     * @param string|null $counterSolution counterSolution
     *
     * @return self
     */
    public function setCounterSolution($counterSolution)
    {
        if (is_null($counterSolution)) {
            array_push($this->openAPINullablesSetToNull, 'counterSolution');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counterSolution', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getCounterSolutionAllowableValues();
        if (!is_null($counterSolution) && !in_array($counterSolution, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'counterSolution', must be one of '%s'",
                    $counterSolution,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['counterSolution'] = $counterSolution;

        return $this;
    }

    /**
     * Gets counterPartialRefundAmount
     *
     * @return int|null
     */
    public function getCounterPartialRefundAmount()
    {
        return $this->container['counterPartialRefundAmount'];
    }

    /**
     * Sets counterPartialRefundAmount
     *
     * @param int|null $counterPartialRefundAmount counterPartialRefundAmount
     *
     * @return self
     */
    public function setCounterPartialRefundAmount($counterPartialRefundAmount)
    {
        if (is_null($counterPartialRefundAmount)) {
            array_push($this->openAPINullablesSetToNull, 'counterPartialRefundAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counterPartialRefundAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counterPartialRefundAmount'] = $counterPartialRefundAmount;

        return $this;
    }

    /**
     * Gets complainantApproval
     *
     * @return bool|null
     */
    public function getComplainantApproval()
    {
        return $this->container['complainantApproval'];
    }

    /**
     * Sets complainantApproval
     *
     * @param bool|null $complainantApproval complainantApproval
     *
     * @return self
     */
    public function setComplainantApproval($complainantApproval)
    {
        if (is_null($complainantApproval)) {
            array_push($this->openAPINullablesSetToNull, 'complainantApproval');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('complainantApproval', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['complainantApproval'] = $complainantApproval;

        return $this;
    }

    /**
     * Gets sellerApproval
     *
     * @return bool
     */
    public function getSellerApproval()
    {
        return $this->container['sellerApproval'];
    }

    /**
     * Sets sellerApproval
     *
     * @param bool $sellerApproval sellerApproval
     *
     * @return self
     */
    public function setSellerApproval($sellerApproval)
    {
        if (is_null($sellerApproval)) {
            array_push($this->openAPINullablesSetToNull, 'sellerApproval');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sellerApproval', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sellerApproval'] = $sellerApproval;

        return $this;
    }

    /**
     * Gets platformSolution
     *
     * @return string|null
     */
    public function getPlatformSolution()
    {
        return $this->container['platformSolution'];
    }

    /**
     * Sets platformSolution
     *
     * @param string|null $platformSolution platformSolution
     *
     * @return self
     */
    public function setPlatformSolution($platformSolution)
    {
        if (is_null($platformSolution)) {
            array_push($this->openAPINullablesSetToNull, 'platformSolution');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('platformSolution', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPlatformSolutionAllowableValues();
        if (!is_null($platformSolution) && !in_array($platformSolution, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'platformSolution', must be one of '%s'",
                    $platformSolution,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['platformSolution'] = $platformSolution;

        return $this;
    }

    /**
     * Gets platformPartialRefundAmount
     *
     * @return int|null
     */
    public function getPlatformPartialRefundAmount()
    {
        return $this->container['platformPartialRefundAmount'];
    }

    /**
     * Sets platformPartialRefundAmount
     *
     * @param int|null $platformPartialRefundAmount platformPartialRefundAmount
     *
     * @return self
     */
    public function setPlatformPartialRefundAmount($platformPartialRefundAmount)
    {
        if (is_null($platformPartialRefundAmount)) {
            array_push($this->openAPINullablesSetToNull, 'platformPartialRefundAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('platformPartialRefundAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($platformPartialRefundAmount) && ($platformPartialRefundAmount <= 0)) {
            throw new \InvalidArgumentException('invalid value for $platformPartialRefundAmount when calling DisputeRead., must be bigger than 0.');
        }

        $this->container['platformPartialRefundAmount'] = $platformPartialRefundAmount;

        return $this;
    }

    /**
     * Gets platformApproval
     *
     * @return bool|null
     */
    public function getPlatformApproval()
    {
        return $this->container['platformApproval'];
    }

    /**
     * Sets platformApproval
     *
     * @param bool|null $platformApproval platformApproval
     *
     * @return self
     */
    public function setPlatformApproval($platformApproval)
    {
        if (is_null($platformApproval)) {
            array_push($this->openAPINullablesSetToNull, 'platformApproval');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('platformApproval', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['platformApproval'] = $platformApproval;

        return $this;
    }

    /**
     * Gets arbitrationBy
     *
     * @return string|null
     */
    public function getArbitrationBy()
    {
        return $this->container['arbitrationBy'];
    }

    /**
     * Sets arbitrationBy
     *
     * @param string|null $arbitrationBy arbitrationBy
     *
     * @return self
     */
    public function setArbitrationBy($arbitrationBy)
    {
        if (is_null($arbitrationBy)) {
            array_push($this->openAPINullablesSetToNull, 'arbitrationBy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('arbitrationBy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['arbitrationBy'] = $arbitrationBy;

        return $this;
    }

    /**
     * Gets parcels
     *
     * @return \Tripartie\Tpdk\Model\ParcelRead[]
     */
    public function getParcels()
    {
        return $this->container['parcels'];
    }

    /**
     * Sets parcels
     *
     * @param \Tripartie\Tpdk\Model\ParcelRead[] $parcels parcels
     *
     * @return self
     */
    public function setParcels($parcels)
    {
        if (is_null($parcels)) {
            throw new \InvalidArgumentException('non-nullable parcels cannot be null');
        }
        $this->container['parcels'] = $parcels;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            array_push($this->openAPINullablesSetToNull, 'updatedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updatedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets iri
     *
     * @return string|null
     */
    public function getIri()
    {
        return $this->container['iri'];
    }

    /**
     * Sets iri
     *
     * @param string|null $iri iri
     *
     * @return self
     */
    public function setIri($iri)
    {
        if (is_null($iri)) {
            throw new \InvalidArgumentException('non-nullable iri cannot be null');
        }
        $this->container['iri'] = $iri;

        return $this;
    }

    /**
     * Gets messageCount
     *
     * @return int|null
     */
    public function getMessageCount()
    {
        return $this->container['messageCount'];
    }

    /**
     * Sets messageCount
     *
     * @param int|null $messageCount messageCount
     *
     * @return self
     */
    public function setMessageCount($messageCount)
    {
        if (is_null($messageCount)) {
            throw new \InvalidArgumentException('non-nullable messageCount cannot be null');
        }
        $this->container['messageCount'] = $messageCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


