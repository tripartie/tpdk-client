<?php
/**
 * User
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tripartie
 *
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.194
 * Contact: noc@tripartie.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tripartie\Tpdk\Model;

use \ArrayAccess;
use \Tripartie\Tpdk\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'captcha' => 'string',
        'firstName' => 'string',
        'lastName' => 'string',
        'publicName' => 'string',
        'roleInCompany' => 'string',
        'birthday' => '\DateTime',
        'email' => 'string',
        'invitedRole' => 'string[]',
        'roles' => 'string[]',
        'password' => 'string',
        'plainPassword' => 'string',
        'newPassword' => 'string',
        'totpSecret' => 'string',
        'totpUri' => 'string',
        'totpEnabled' => 'bool',
        'totpChallenge' => 'string',
        'intlPhoneNumber' => 'string',
        'originCountry' => 'string',
        'preferredLanguage' => 'string',
        'lastSuccessfulLogIn' => '\DateTime',
        'emailVerificationCode' => 'string',
        'emailVerificationInput' => 'string',
        'phoneVerificationCode' => 'string',
        'phoneVerificationInput' => 'string',
        'avatar' => 'string',
        'notifications' => 'string[]',
        'medias' => 'string[]',
        'views' => '\Tripartie\Tpdk\Model\View[]',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'consentMailNotification' => 'bool',
        'consentMailAds' => 'bool',
        'lockdown' => 'bool',
        'keys' => 'string[]',
        'organization' => 'string',
        'impersonatedOrganization' => 'string',
        'iri' => 'string',
        'username' => 'string',
        'salt' => 'string',
        'userIdentifier' => 'string',
        'impersonatingOrganization' => 'bool',
        '_2fa' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'captcha' => null,
        'firstName' => null,
        'lastName' => null,
        'publicName' => null,
        'roleInCompany' => null,
        'birthday' => 'date-time',
        'email' => null,
        'invitedRole' => null,
        'roles' => null,
        'password' => null,
        'plainPassword' => null,
        'newPassword' => null,
        'totpSecret' => null,
        'totpUri' => null,
        'totpEnabled' => null,
        'totpChallenge' => null,
        'intlPhoneNumber' => null,
        'originCountry' => null,
        'preferredLanguage' => null,
        'lastSuccessfulLogIn' => 'date-time',
        'emailVerificationCode' => null,
        'emailVerificationInput' => null,
        'phoneVerificationCode' => null,
        'phoneVerificationInput' => null,
        'avatar' => 'iri-reference',
        'notifications' => 'iri-reference',
        'medias' => 'iri-reference',
        'views' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'consentMailNotification' => null,
        'consentMailAds' => null,
        'lockdown' => null,
        'keys' => 'iri-reference',
        'organization' => 'iri-reference',
        'impersonatedOrganization' => 'iri-reference',
        'iri' => 'iri-reference',
        'username' => null,
        'salt' => null,
        'userIdentifier' => null,
        'impersonatingOrganization' => null,
        '_2fa' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'captcha' => true,
        'firstName' => false,
        'lastName' => false,
        'publicName' => true,
        'roleInCompany' => true,
        'birthday' => true,
        'email' => false,
        'invitedRole' => false,
        'roles' => false,
        'password' => true,
        'plainPassword' => true,
        'newPassword' => true,
        'totpSecret' => true,
        'totpUri' => true,
        'totpEnabled' => false,
        'totpChallenge' => true,
        'intlPhoneNumber' => true,
        'originCountry' => true,
        'preferredLanguage' => true,
        'lastSuccessfulLogIn' => true,
        'emailVerificationCode' => true,
        'emailVerificationInput' => true,
        'phoneVerificationCode' => true,
        'phoneVerificationInput' => true,
        'avatar' => true,
        'notifications' => false,
        'medias' => false,
        'views' => false,
        'createdAt' => false,
        'updatedAt' => false,
        'consentMailNotification' => false,
        'consentMailAds' => false,
        'lockdown' => false,
        'keys' => false,
        'organization' => true,
        'impersonatedOrganization' => true,
        'iri' => false,
        'username' => false,
        'salt' => true,
        'userIdentifier' => false,
        'impersonatingOrganization' => false,
        '_2fa' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'captcha' => 'captcha',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'publicName' => 'publicName',
        'roleInCompany' => 'roleInCompany',
        'birthday' => 'birthday',
        'email' => 'email',
        'invitedRole' => 'invitedRole',
        'roles' => 'roles',
        'password' => 'password',
        'plainPassword' => 'plainPassword',
        'newPassword' => 'newPassword',
        'totpSecret' => 'totpSecret',
        'totpUri' => 'totpUri',
        'totpEnabled' => 'totpEnabled',
        'totpChallenge' => 'totpChallenge',
        'intlPhoneNumber' => 'intlPhoneNumber',
        'originCountry' => 'originCountry',
        'preferredLanguage' => 'preferredLanguage',
        'lastSuccessfulLogIn' => 'lastSuccessfulLogIn',
        'emailVerificationCode' => 'emailVerificationCode',
        'emailVerificationInput' => 'emailVerificationInput',
        'phoneVerificationCode' => 'phoneVerificationCode',
        'phoneVerificationInput' => 'phoneVerificationInput',
        'avatar' => 'avatar',
        'notifications' => 'notifications',
        'medias' => 'medias',
        'views' => 'views',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt',
        'consentMailNotification' => 'consentMailNotification',
        'consentMailAds' => 'consentMailAds',
        'lockdown' => 'lockdown',
        'keys' => 'keys',
        'organization' => 'organization',
        'impersonatedOrganization' => 'impersonatedOrganization',
        'iri' => 'iri',
        'username' => 'username',
        'salt' => 'salt',
        'userIdentifier' => 'userIdentifier',
        'impersonatingOrganization' => 'impersonatingOrganization',
        '_2fa' => '2fa'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'captcha' => 'setCaptcha',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'publicName' => 'setPublicName',
        'roleInCompany' => 'setRoleInCompany',
        'birthday' => 'setBirthday',
        'email' => 'setEmail',
        'invitedRole' => 'setInvitedRole',
        'roles' => 'setRoles',
        'password' => 'setPassword',
        'plainPassword' => 'setPlainPassword',
        'newPassword' => 'setNewPassword',
        'totpSecret' => 'setTotpSecret',
        'totpUri' => 'setTotpUri',
        'totpEnabled' => 'setTotpEnabled',
        'totpChallenge' => 'setTotpChallenge',
        'intlPhoneNumber' => 'setIntlPhoneNumber',
        'originCountry' => 'setOriginCountry',
        'preferredLanguage' => 'setPreferredLanguage',
        'lastSuccessfulLogIn' => 'setLastSuccessfulLogIn',
        'emailVerificationCode' => 'setEmailVerificationCode',
        'emailVerificationInput' => 'setEmailVerificationInput',
        'phoneVerificationCode' => 'setPhoneVerificationCode',
        'phoneVerificationInput' => 'setPhoneVerificationInput',
        'avatar' => 'setAvatar',
        'notifications' => 'setNotifications',
        'medias' => 'setMedias',
        'views' => 'setViews',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'consentMailNotification' => 'setConsentMailNotification',
        'consentMailAds' => 'setConsentMailAds',
        'lockdown' => 'setLockdown',
        'keys' => 'setKeys',
        'organization' => 'setOrganization',
        'impersonatedOrganization' => 'setImpersonatedOrganization',
        'iri' => 'setIri',
        'username' => 'setUsername',
        'salt' => 'setSalt',
        'userIdentifier' => 'setUserIdentifier',
        'impersonatingOrganization' => 'setImpersonatingOrganization',
        '_2fa' => 'set2fa'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'captcha' => 'getCaptcha',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'publicName' => 'getPublicName',
        'roleInCompany' => 'getRoleInCompany',
        'birthday' => 'getBirthday',
        'email' => 'getEmail',
        'invitedRole' => 'getInvitedRole',
        'roles' => 'getRoles',
        'password' => 'getPassword',
        'plainPassword' => 'getPlainPassword',
        'newPassword' => 'getNewPassword',
        'totpSecret' => 'getTotpSecret',
        'totpUri' => 'getTotpUri',
        'totpEnabled' => 'getTotpEnabled',
        'totpChallenge' => 'getTotpChallenge',
        'intlPhoneNumber' => 'getIntlPhoneNumber',
        'originCountry' => 'getOriginCountry',
        'preferredLanguage' => 'getPreferredLanguage',
        'lastSuccessfulLogIn' => 'getLastSuccessfulLogIn',
        'emailVerificationCode' => 'getEmailVerificationCode',
        'emailVerificationInput' => 'getEmailVerificationInput',
        'phoneVerificationCode' => 'getPhoneVerificationCode',
        'phoneVerificationInput' => 'getPhoneVerificationInput',
        'avatar' => 'getAvatar',
        'notifications' => 'getNotifications',
        'medias' => 'getMedias',
        'views' => 'getViews',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'consentMailNotification' => 'getConsentMailNotification',
        'consentMailAds' => 'getConsentMailAds',
        'lockdown' => 'getLockdown',
        'keys' => 'getKeys',
        'organization' => 'getOrganization',
        'impersonatedOrganization' => 'getImpersonatedOrganization',
        'iri' => 'getIri',
        'username' => 'getUsername',
        'salt' => 'getSalt',
        'userIdentifier' => 'getUserIdentifier',
        'impersonatingOrganization' => 'getImpersonatingOrganization',
        '_2fa' => 'get2fa'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INVITED_ROLE_ADMIN = 'ROLE_ADMIN';
    public const INVITED_ROLE_CONSULTANT = 'ROLE_CONSULTANT';
    public const INVITED_ROLE_ACCOUNTING_MANAGER = 'ROLE_ACCOUNTING_MANAGER';
    public const INVITED_ROLE_BILLING_MANAGER = 'ROLE_BILLING_MANAGER';
    public const INVITED_ROLE_CUSTOMER_SERVICE = 'ROLE_CUSTOMER_SERVICE';
    public const INVITED_ROLE_CUSTOMER_SERVICE2 = 'ROLE_CUSTOMER_SERVICE';
    public const INVITED_ROLE_PLATFORM_ADMIN = 'ROLE_PLATFORM_ADMIN';
    public const INVITED_ROLE_PLATFORM_SUPPORT = 'ROLE_PLATFORM_SUPPORT';
    public const INVITED_ROLE_ORGANIZATION_OWNER = 'ROLE_ORGANIZATION_OWNER';
    public const ROLES_ORGANIZATION_OWNER = 'ROLE_ORGANIZATION_OWNER';
    public const ROLES_ADMIN = 'ROLE_ADMIN';
    public const ROLES_CONSULTANT = 'ROLE_CONSULTANT';
    public const ROLES_ACCOUNTING_MANAGER = 'ROLE_ACCOUNTING_MANAGER';
    public const ROLES_BILLING_MANAGER = 'ROLE_BILLING_MANAGER';
    public const ROLES_CUSTOMER_SERVICE = 'ROLE_CUSTOMER_SERVICE';
    public const ROLES_PLATFORM_SUPPORT = 'ROLE_PLATFORM_SUPPORT';
    public const ROLES_PLATFORM_ADMIN = 'ROLE_PLATFORM_ADMIN';
    public const ROLES_USER = 'ROLE_USER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvitedRoleAllowableValues()
    {
        return [
            self::INVITED_ROLE_ADMIN,
            self::INVITED_ROLE_CONSULTANT,
            self::INVITED_ROLE_ACCOUNTING_MANAGER,
            self::INVITED_ROLE_BILLING_MANAGER,
            self::INVITED_ROLE_CUSTOMER_SERVICE,
            self::INVITED_ROLE_CUSTOMER_SERVICE2,
            self::INVITED_ROLE_PLATFORM_ADMIN,
            self::INVITED_ROLE_PLATFORM_SUPPORT,
            self::INVITED_ROLE_ORGANIZATION_OWNER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRolesAllowableValues()
    {
        return [
            self::ROLES_ORGANIZATION_OWNER,
            self::ROLES_ADMIN,
            self::ROLES_CONSULTANT,
            self::ROLES_ACCOUNTING_MANAGER,
            self::ROLES_BILLING_MANAGER,
            self::ROLES_CUSTOMER_SERVICE,
            self::ROLES_PLATFORM_SUPPORT,
            self::ROLES_PLATFORM_ADMIN,
            self::ROLES_USER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('captcha', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('publicName', $data ?? [], null);
        $this->setIfExists('roleInCompany', $data ?? [], null);
        $this->setIfExists('birthday', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('invitedRole', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('plainPassword', $data ?? [], null);
        $this->setIfExists('newPassword', $data ?? [], null);
        $this->setIfExists('totpSecret', $data ?? [], null);
        $this->setIfExists('totpUri', $data ?? [], null);
        $this->setIfExists('totpEnabled', $data ?? [], null);
        $this->setIfExists('totpChallenge', $data ?? [], null);
        $this->setIfExists('intlPhoneNumber', $data ?? [], null);
        $this->setIfExists('originCountry', $data ?? [], null);
        $this->setIfExists('preferredLanguage', $data ?? [], null);
        $this->setIfExists('lastSuccessfulLogIn', $data ?? [], null);
        $this->setIfExists('emailVerificationCode', $data ?? [], null);
        $this->setIfExists('emailVerificationInput', $data ?? [], null);
        $this->setIfExists('phoneVerificationCode', $data ?? [], null);
        $this->setIfExists('phoneVerificationInput', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('notifications', $data ?? [], null);
        $this->setIfExists('medias', $data ?? [], null);
        $this->setIfExists('views', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('consentMailNotification', $data ?? [], null);
        $this->setIfExists('consentMailAds', $data ?? [], null);
        $this->setIfExists('lockdown', $data ?? [], null);
        $this->setIfExists('keys', $data ?? [], null);
        $this->setIfExists('organization', $data ?? [], null);
        $this->setIfExists('impersonatedOrganization', $data ?? [], null);
        $this->setIfExists('iri', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('salt', $data ?? [], null);
        $this->setIfExists('userIdentifier', $data ?? [], null);
        $this->setIfExists('impersonatingOrganization', $data ?? [], null);
        $this->setIfExists('_2fa', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['roles'] === null) {
            $invalidProperties[] = "'roles' can't be null";
        }
        if (!is_null($this->container['originCountry']) && (mb_strlen($this->container['originCountry']) > 3)) {
            $invalidProperties[] = "invalid value for 'originCountry', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['preferredLanguage']) && (mb_strlen($this->container['preferredLanguage']) > 2)) {
            $invalidProperties[] = "invalid value for 'preferredLanguage', the character length must be smaller than or equal to 2.";
        }

        if ($this->container['views'] === null) {
            $invalidProperties[] = "'views' can't be null";
        }
        if ($this->container['consentMailNotification'] === null) {
            $invalidProperties[] = "'consentMailNotification' can't be null";
        }
        if ($this->container['consentMailAds'] === null) {
            $invalidProperties[] = "'consentMailAds' can't be null";
        }
        if ($this->container['lockdown'] === null) {
            $invalidProperties[] = "'lockdown' can't be null";
        }
        if ($this->container['keys'] === null) {
            $invalidProperties[] = "'keys' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets captcha
     *
     * @return string|null
     */
    public function getCaptcha()
    {
        return $this->container['captcha'];
    }

    /**
     * Sets captcha
     *
     * @param string|null $captcha captcha
     *
     * @return self
     */
    public function setCaptcha($captcha)
    {
        if (is_null($captcha)) {
            array_push($this->openAPINullablesSetToNull, 'captcha');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('captcha', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['captcha'] = $captcha;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName firstName
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            throw new \InvalidArgumentException('non-nullable firstName cannot be null');
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName lastName
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            throw new \InvalidArgumentException('non-nullable lastName cannot be null');
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets publicName
     *
     * @return string|null
     */
    public function getPublicName()
    {
        return $this->container['publicName'];
    }

    /**
     * Sets publicName
     *
     * @param string|null $publicName publicName
     *
     * @return self
     */
    public function setPublicName($publicName)
    {
        if (is_null($publicName)) {
            array_push($this->openAPINullablesSetToNull, 'publicName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('publicName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['publicName'] = $publicName;

        return $this;
    }

    /**
     * Gets roleInCompany
     *
     * @return string|null
     */
    public function getRoleInCompany()
    {
        return $this->container['roleInCompany'];
    }

    /**
     * Sets roleInCompany
     *
     * @param string|null $roleInCompany roleInCompany
     *
     * @return self
     */
    public function setRoleInCompany($roleInCompany)
    {
        if (is_null($roleInCompany)) {
            array_push($this->openAPINullablesSetToNull, 'roleInCompany');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roleInCompany', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roleInCompany'] = $roleInCompany;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return \DateTime|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param \DateTime|null $birthday birthday
     *
     * @return self
     */
    public function setBirthday($birthday)
    {
        if (is_null($birthday)) {
            array_push($this->openAPINullablesSetToNull, 'birthday');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birthday', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets invitedRole
     *
     * @return string[]|null
     */
    public function getInvitedRole()
    {
        return $this->container['invitedRole'];
    }

    /**
     * Sets invitedRole
     *
     * @param string[]|null $invitedRole invitedRole
     *
     * @return self
     */
    public function setInvitedRole($invitedRole)
    {
        if (is_null($invitedRole)) {
            throw new \InvalidArgumentException('non-nullable invitedRole cannot be null');
        }
        $allowedValues = $this->getInvitedRoleAllowableValues();
        if (array_diff($invitedRole, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'invitedRole', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invitedRole'] = $invitedRole;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[] $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }
        $allowedValues = $this->getRolesAllowableValues();
        if (array_diff($roles, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'roles', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password The hashed password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            array_push($this->openAPINullablesSetToNull, 'password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets plainPassword
     *
     * @return string|null
     */
    public function getPlainPassword()
    {
        return $this->container['plainPassword'];
    }

    /**
     * Sets plainPassword
     *
     * @param string|null $plainPassword plainPassword
     *
     * @return self
     */
    public function setPlainPassword($plainPassword)
    {
        if (is_null($plainPassword)) {
            array_push($this->openAPINullablesSetToNull, 'plainPassword');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plainPassword', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['plainPassword'] = $plainPassword;

        return $this;
    }

    /**
     * Gets newPassword
     *
     * @return string|null
     */
    public function getNewPassword()
    {
        return $this->container['newPassword'];
    }

    /**
     * Sets newPassword
     *
     * @param string|null $newPassword newPassword
     *
     * @return self
     */
    public function setNewPassword($newPassword)
    {
        if (is_null($newPassword)) {
            array_push($this->openAPINullablesSetToNull, 'newPassword');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('newPassword', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['newPassword'] = $newPassword;

        return $this;
    }

    /**
     * Gets totpSecret
     *
     * @return string|null
     */
    public function getTotpSecret()
    {
        return $this->container['totpSecret'];
    }

    /**
     * Sets totpSecret
     *
     * @param string|null $totpSecret totpSecret
     *
     * @return self
     */
    public function setTotpSecret($totpSecret)
    {
        if (is_null($totpSecret)) {
            array_push($this->openAPINullablesSetToNull, 'totpSecret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totpSecret', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totpSecret'] = $totpSecret;

        return $this;
    }

    /**
     * Gets totpUri
     *
     * @return string|null
     */
    public function getTotpUri()
    {
        return $this->container['totpUri'];
    }

    /**
     * Sets totpUri
     *
     * @param string|null $totpUri totpUri
     *
     * @return self
     */
    public function setTotpUri($totpUri)
    {
        if (is_null($totpUri)) {
            array_push($this->openAPINullablesSetToNull, 'totpUri');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totpUri', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totpUri'] = $totpUri;

        return $this;
    }

    /**
     * Gets totpEnabled
     *
     * @return bool|null
     */
    public function getTotpEnabled()
    {
        return $this->container['totpEnabled'];
    }

    /**
     * Sets totpEnabled
     *
     * @param bool|null $totpEnabled totpEnabled
     *
     * @return self
     */
    public function setTotpEnabled($totpEnabled)
    {
        if (is_null($totpEnabled)) {
            throw new \InvalidArgumentException('non-nullable totpEnabled cannot be null');
        }
        $this->container['totpEnabled'] = $totpEnabled;

        return $this;
    }

    /**
     * Gets totpChallenge
     *
     * @return string|null
     */
    public function getTotpChallenge()
    {
        return $this->container['totpChallenge'];
    }

    /**
     * Sets totpChallenge
     *
     * @param string|null $totpChallenge totpChallenge
     *
     * @return self
     */
    public function setTotpChallenge($totpChallenge)
    {
        if (is_null($totpChallenge)) {
            array_push($this->openAPINullablesSetToNull, 'totpChallenge');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totpChallenge', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totpChallenge'] = $totpChallenge;

        return $this;
    }

    /**
     * Gets intlPhoneNumber
     *
     * @return string|null
     */
    public function getIntlPhoneNumber()
    {
        return $this->container['intlPhoneNumber'];
    }

    /**
     * Sets intlPhoneNumber
     *
     * @param string|null $intlPhoneNumber intlPhoneNumber
     *
     * @return self
     */
    public function setIntlPhoneNumber($intlPhoneNumber)
    {
        if (is_null($intlPhoneNumber)) {
            array_push($this->openAPINullablesSetToNull, 'intlPhoneNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intlPhoneNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['intlPhoneNumber'] = $intlPhoneNumber;

        return $this;
    }

    /**
     * Gets originCountry
     *
     * @return string|null
     */
    public function getOriginCountry()
    {
        return $this->container['originCountry'];
    }

    /**
     * Sets originCountry
     *
     * @param string|null $originCountry The originating country
     *
     * @return self
     */
    public function setOriginCountry($originCountry)
    {
        if (is_null($originCountry)) {
            array_push($this->openAPINullablesSetToNull, 'originCountry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('originCountry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($originCountry) && (mb_strlen($originCountry) > 3)) {
            throw new \InvalidArgumentException('invalid length for $originCountry when calling User., must be smaller than or equal to 3.');
        }

        $this->container['originCountry'] = $originCountry;

        return $this;
    }

    /**
     * Gets preferredLanguage
     *
     * @return string|null
     */
    public function getPreferredLanguage()
    {
        return $this->container['preferredLanguage'];
    }

    /**
     * Sets preferredLanguage
     *
     * @param string|null $preferredLanguage preferredLanguage
     *
     * @return self
     */
    public function setPreferredLanguage($preferredLanguage)
    {
        if (is_null($preferredLanguage)) {
            array_push($this->openAPINullablesSetToNull, 'preferredLanguage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferredLanguage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($preferredLanguage) && (mb_strlen($preferredLanguage) > 2)) {
            throw new \InvalidArgumentException('invalid length for $preferredLanguage when calling User., must be smaller than or equal to 2.');
        }

        $this->container['preferredLanguage'] = $preferredLanguage;

        return $this;
    }

    /**
     * Gets lastSuccessfulLogIn
     *
     * @return \DateTime|null
     */
    public function getLastSuccessfulLogIn()
    {
        return $this->container['lastSuccessfulLogIn'];
    }

    /**
     * Sets lastSuccessfulLogIn
     *
     * @param \DateTime|null $lastSuccessfulLogIn lastSuccessfulLogIn
     *
     * @return self
     */
    public function setLastSuccessfulLogIn($lastSuccessfulLogIn)
    {
        if (is_null($lastSuccessfulLogIn)) {
            array_push($this->openAPINullablesSetToNull, 'lastSuccessfulLogIn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastSuccessfulLogIn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastSuccessfulLogIn'] = $lastSuccessfulLogIn;

        return $this;
    }

    /**
     * Gets emailVerificationCode
     *
     * @return string|null
     */
    public function getEmailVerificationCode()
    {
        return $this->container['emailVerificationCode'];
    }

    /**
     * Sets emailVerificationCode
     *
     * @param string|null $emailVerificationCode emailVerificationCode
     *
     * @return self
     */
    public function setEmailVerificationCode($emailVerificationCode)
    {
        if (is_null($emailVerificationCode)) {
            array_push($this->openAPINullablesSetToNull, 'emailVerificationCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emailVerificationCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emailVerificationCode'] = $emailVerificationCode;

        return $this;
    }

    /**
     * Gets emailVerificationInput
     *
     * @return string|null
     */
    public function getEmailVerificationInput()
    {
        return $this->container['emailVerificationInput'];
    }

    /**
     * Sets emailVerificationInput
     *
     * @param string|null $emailVerificationInput emailVerificationInput
     *
     * @return self
     */
    public function setEmailVerificationInput($emailVerificationInput)
    {
        if (is_null($emailVerificationInput)) {
            array_push($this->openAPINullablesSetToNull, 'emailVerificationInput');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emailVerificationInput', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emailVerificationInput'] = $emailVerificationInput;

        return $this;
    }

    /**
     * Gets phoneVerificationCode
     *
     * @return string|null
     */
    public function getPhoneVerificationCode()
    {
        return $this->container['phoneVerificationCode'];
    }

    /**
     * Sets phoneVerificationCode
     *
     * @param string|null $phoneVerificationCode phoneVerificationCode
     *
     * @return self
     */
    public function setPhoneVerificationCode($phoneVerificationCode)
    {
        if (is_null($phoneVerificationCode)) {
            array_push($this->openAPINullablesSetToNull, 'phoneVerificationCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phoneVerificationCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phoneVerificationCode'] = $phoneVerificationCode;

        return $this;
    }

    /**
     * Gets phoneVerificationInput
     *
     * @return string|null
     */
    public function getPhoneVerificationInput()
    {
        return $this->container['phoneVerificationInput'];
    }

    /**
     * Sets phoneVerificationInput
     *
     * @param string|null $phoneVerificationInput phoneVerificationInput
     *
     * @return self
     */
    public function setPhoneVerificationInput($phoneVerificationInput)
    {
        if (is_null($phoneVerificationInput)) {
            array_push($this->openAPINullablesSetToNull, 'phoneVerificationInput');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phoneVerificationInput', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phoneVerificationInput'] = $phoneVerificationInput;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string|null
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string|null $avatar avatar
     *
     * @return self
     */
    public function setAvatar($avatar)
    {
        if (is_null($avatar)) {
            array_push($this->openAPINullablesSetToNull, 'avatar');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return string[]|null
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param string[]|null $notifications notifications
     *
     * @return self
     */
    public function setNotifications($notifications)
    {
        if (is_null($notifications)) {
            throw new \InvalidArgumentException('non-nullable notifications cannot be null');
        }
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets medias
     *
     * @return string[]|null
     */
    public function getMedias()
    {
        return $this->container['medias'];
    }

    /**
     * Sets medias
     *
     * @param string[]|null $medias medias
     *
     * @return self
     */
    public function setMedias($medias)
    {
        if (is_null($medias)) {
            throw new \InvalidArgumentException('non-nullable medias cannot be null');
        }
        $this->container['medias'] = $medias;

        return $this;
    }

    /**
     * Gets views
     *
     * @return \Tripartie\Tpdk\Model\View[]
     */
    public function getViews()
    {
        return $this->container['views'];
    }

    /**
     * Sets views
     *
     * @param \Tripartie\Tpdk\Model\View[] $views views
     *
     * @return self
     */
    public function setViews($views)
    {
        if (is_null($views)) {
            throw new \InvalidArgumentException('non-nullable views cannot be null');
        }
        $this->container['views'] = $views;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets consentMailNotification
     *
     * @return bool
     */
    public function getConsentMailNotification()
    {
        return $this->container['consentMailNotification'];
    }

    /**
     * Sets consentMailNotification
     *
     * @param bool $consentMailNotification consentMailNotification
     *
     * @return self
     */
    public function setConsentMailNotification($consentMailNotification)
    {
        if (is_null($consentMailNotification)) {
            throw new \InvalidArgumentException('non-nullable consentMailNotification cannot be null');
        }
        $this->container['consentMailNotification'] = $consentMailNotification;

        return $this;
    }

    /**
     * Gets consentMailAds
     *
     * @return bool
     */
    public function getConsentMailAds()
    {
        return $this->container['consentMailAds'];
    }

    /**
     * Sets consentMailAds
     *
     * @param bool $consentMailAds consentMailAds
     *
     * @return self
     */
    public function setConsentMailAds($consentMailAds)
    {
        if (is_null($consentMailAds)) {
            throw new \InvalidArgumentException('non-nullable consentMailAds cannot be null');
        }
        $this->container['consentMailAds'] = $consentMailAds;

        return $this;
    }

    /**
     * Gets lockdown
     *
     * @return bool
     */
    public function getLockdown()
    {
        return $this->container['lockdown'];
    }

    /**
     * Sets lockdown
     *
     * @param bool $lockdown lockdown
     *
     * @return self
     */
    public function setLockdown($lockdown)
    {
        if (is_null($lockdown)) {
            throw new \InvalidArgumentException('non-nullable lockdown cannot be null');
        }
        $this->container['lockdown'] = $lockdown;

        return $this;
    }

    /**
     * Gets keys
     *
     * @return string[]
     */
    public function getKeys()
    {
        return $this->container['keys'];
    }

    /**
     * Sets keys
     *
     * @param string[] $keys keys
     *
     * @return self
     */
    public function setKeys($keys)
    {
        if (is_null($keys)) {
            throw new \InvalidArgumentException('non-nullable keys cannot be null');
        }
        $this->container['keys'] = $keys;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return string|null
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string|null $organization organization
     *
     * @return self
     */
    public function setOrganization($organization)
    {
        if (is_null($organization)) {
            array_push($this->openAPINullablesSetToNull, 'organization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets impersonatedOrganization
     *
     * @return string|null
     */
    public function getImpersonatedOrganization()
    {
        return $this->container['impersonatedOrganization'];
    }

    /**
     * Sets impersonatedOrganization
     *
     * @param string|null $impersonatedOrganization impersonatedOrganization
     *
     * @return self
     */
    public function setImpersonatedOrganization($impersonatedOrganization)
    {
        if (is_null($impersonatedOrganization)) {
            array_push($this->openAPINullablesSetToNull, 'impersonatedOrganization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('impersonatedOrganization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['impersonatedOrganization'] = $impersonatedOrganization;

        return $this;
    }

    /**
     * Gets iri
     *
     * @return string|null
     */
    public function getIri()
    {
        return $this->container['iri'];
    }

    /**
     * Sets iri
     *
     * @param string|null $iri iri
     *
     * @return self
     */
    public function setIri($iri)
    {
        if (is_null($iri)) {
            throw new \InvalidArgumentException('non-nullable iri cannot be null');
        }
        $this->container['iri'] = $iri;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username A visual identifier that represents this user.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets salt
     *
     * @return string|null
     */
    public function getSalt()
    {
        return $this->container['salt'];
    }

    /**
     * Sets salt
     *
     * @param string|null $salt salt
     *
     * @return self
     */
    public function setSalt($salt)
    {
        if (is_null($salt)) {
            array_push($this->openAPINullablesSetToNull, 'salt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('salt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['salt'] = $salt;

        return $this;
    }

    /**
     * Gets userIdentifier
     *
     * @return string|null
     */
    public function getUserIdentifier()
    {
        return $this->container['userIdentifier'];
    }

    /**
     * Sets userIdentifier
     *
     * @param string|null $userIdentifier userIdentifier
     *
     * @return self
     */
    public function setUserIdentifier($userIdentifier)
    {
        if (is_null($userIdentifier)) {
            throw new \InvalidArgumentException('non-nullable userIdentifier cannot be null');
        }
        $this->container['userIdentifier'] = $userIdentifier;

        return $this;
    }

    /**
     * Gets impersonatingOrganization
     *
     * @return bool|null
     */
    public function getImpersonatingOrganization()
    {
        return $this->container['impersonatingOrganization'];
    }

    /**
     * Sets impersonatingOrganization
     *
     * @param bool|null $impersonatingOrganization impersonatingOrganization
     *
     * @return self
     */
    public function setImpersonatingOrganization($impersonatingOrganization)
    {
        if (is_null($impersonatingOrganization)) {
            throw new \InvalidArgumentException('non-nullable impersonatingOrganization cannot be null');
        }
        $this->container['impersonatingOrganization'] = $impersonatingOrganization;

        return $this;
    }

    /**
     * Gets _2fa
     *
     * @return bool|null
     */
    public function get2fa()
    {
        return $this->container['_2fa'];
    }

    /**
     * Sets _2fa
     *
     * @param bool|null $_2fa _2fa
     *
     * @return self
     */
    public function set2fa($_2fa)
    {
        if (is_null($_2fa)) {
            throw new \InvalidArgumentException('non-nullable _2fa cannot be null');
        }
        $this->container['_2fa'] = $_2fa;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


