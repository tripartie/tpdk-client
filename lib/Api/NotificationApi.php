<?php
/**
 * NotificationApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tripartie
 *
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.92
 * Contact: noc@tripartie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tripartie\Tpdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tripartie\Tpdk\ApiException;
use Tripartie\Tpdk\Configuration;
use Tripartie\Tpdk\HeaderSelector;
use Tripartie\Tpdk\ObjectSerializer;

/**
 * NotificationApi Class Doc Comment
 *
 * @category Class
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NotificationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiPersonasIdnotificationsGetCollection' => [
            'application/json',
        ],
        'apiPersonasPersonaIdnotificationsIdPatch' => [
            'application/json',
        ],
        'apiUsersIdnotificationsGetCollection' => [
            'application/json',
        ],
        'apiUsersUserIdnotificationsIdPatch' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiPersonasIdnotificationsGetCollection
     *
     * Retrieve pending notifications for Persona
     *
     * @param  string $id Persona identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdnotificationsGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\NotificationRead[]
     */
    public function apiPersonasIdnotificationsGetCollection($id, $page = 1, string $contentType = self::contentTypes['apiPersonasIdnotificationsGetCollection'][0])
    {
        list($response) = $this->apiPersonasIdnotificationsGetCollectionWithHttpInfo($id, $page, $contentType);
        return $response;
    }

    /**
     * Operation apiPersonasIdnotificationsGetCollectionWithHttpInfo
     *
     * Retrieve pending notifications for Persona
     *
     * @param  string $id Persona identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdnotificationsGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\NotificationRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiPersonasIdnotificationsGetCollectionWithHttpInfo($id, $page = 1, string $contentType = self::contentTypes['apiPersonasIdnotificationsGetCollection'][0])
    {
        $request = $this->apiPersonasIdnotificationsGetCollectionRequest($id, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\NotificationRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\NotificationRead[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\NotificationRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\NotificationRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\NotificationRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPersonasIdnotificationsGetCollectionAsync
     *
     * Retrieve pending notifications for Persona
     *
     * @param  string $id Persona identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdnotificationsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasIdnotificationsGetCollectionAsync($id, $page = 1, string $contentType = self::contentTypes['apiPersonasIdnotificationsGetCollection'][0])
    {
        return $this->apiPersonasIdnotificationsGetCollectionAsyncWithHttpInfo($id, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPersonasIdnotificationsGetCollectionAsyncWithHttpInfo
     *
     * Retrieve pending notifications for Persona
     *
     * @param  string $id Persona identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdnotificationsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasIdnotificationsGetCollectionAsyncWithHttpInfo($id, $page = 1, string $contentType = self::contentTypes['apiPersonasIdnotificationsGetCollection'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\NotificationRead[]';
        $request = $this->apiPersonasIdnotificationsGetCollectionRequest($id, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPersonasIdnotificationsGetCollection'
     *
     * @param  string $id Persona identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdnotificationsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiPersonasIdnotificationsGetCollectionRequest($id, $page = 1, string $contentType = self::contentTypes['apiPersonasIdnotificationsGetCollection'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiPersonasIdnotificationsGetCollection'
            );
        }



        $resourcePath = '/personas/{id}/notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPersonasPersonaIdnotificationsIdPatch
     *
     * Mark as read/unread a notification for Persona
     *
     * @param  string $personaId Persona identifier (required)
     * @param  string $id Notification identifier (required)
     * @param  \Tripartie\Tpdk\Model\NotificationUpdate $notificationUpdate The updated Notification resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasPersonaIdnotificationsIdPatch'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\NotificationRead
     */
    public function apiPersonasPersonaIdnotificationsIdPatch($personaId, $id, $notificationUpdate, string $contentType = self::contentTypes['apiPersonasPersonaIdnotificationsIdPatch'][0])
    {
        list($response) = $this->apiPersonasPersonaIdnotificationsIdPatchWithHttpInfo($personaId, $id, $notificationUpdate, $contentType);
        return $response;
    }

    /**
     * Operation apiPersonasPersonaIdnotificationsIdPatchWithHttpInfo
     *
     * Mark as read/unread a notification for Persona
     *
     * @param  string $personaId Persona identifier (required)
     * @param  string $id Notification identifier (required)
     * @param  \Tripartie\Tpdk\Model\NotificationUpdate $notificationUpdate The updated Notification resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasPersonaIdnotificationsIdPatch'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\NotificationRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiPersonasPersonaIdnotificationsIdPatchWithHttpInfo($personaId, $id, $notificationUpdate, string $contentType = self::contentTypes['apiPersonasPersonaIdnotificationsIdPatch'][0])
    {
        $request = $this->apiPersonasPersonaIdnotificationsIdPatchRequest($personaId, $id, $notificationUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\NotificationRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\NotificationRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\NotificationRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\NotificationRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\NotificationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPersonasPersonaIdnotificationsIdPatchAsync
     *
     * Mark as read/unread a notification for Persona
     *
     * @param  string $personaId Persona identifier (required)
     * @param  string $id Notification identifier (required)
     * @param  \Tripartie\Tpdk\Model\NotificationUpdate $notificationUpdate The updated Notification resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasPersonaIdnotificationsIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasPersonaIdnotificationsIdPatchAsync($personaId, $id, $notificationUpdate, string $contentType = self::contentTypes['apiPersonasPersonaIdnotificationsIdPatch'][0])
    {
        return $this->apiPersonasPersonaIdnotificationsIdPatchAsyncWithHttpInfo($personaId, $id, $notificationUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPersonasPersonaIdnotificationsIdPatchAsyncWithHttpInfo
     *
     * Mark as read/unread a notification for Persona
     *
     * @param  string $personaId Persona identifier (required)
     * @param  string $id Notification identifier (required)
     * @param  \Tripartie\Tpdk\Model\NotificationUpdate $notificationUpdate The updated Notification resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasPersonaIdnotificationsIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasPersonaIdnotificationsIdPatchAsyncWithHttpInfo($personaId, $id, $notificationUpdate, string $contentType = self::contentTypes['apiPersonasPersonaIdnotificationsIdPatch'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\NotificationRead';
        $request = $this->apiPersonasPersonaIdnotificationsIdPatchRequest($personaId, $id, $notificationUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPersonasPersonaIdnotificationsIdPatch'
     *
     * @param  string $personaId Persona identifier (required)
     * @param  string $id Notification identifier (required)
     * @param  \Tripartie\Tpdk\Model\NotificationUpdate $notificationUpdate The updated Notification resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasPersonaIdnotificationsIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiPersonasPersonaIdnotificationsIdPatchRequest($personaId, $id, $notificationUpdate, string $contentType = self::contentTypes['apiPersonasPersonaIdnotificationsIdPatch'][0])
    {

        // verify the required parameter 'personaId' is set
        if ($personaId === null || (is_array($personaId) && count($personaId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $personaId when calling apiPersonasPersonaIdnotificationsIdPatch'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiPersonasPersonaIdnotificationsIdPatch'
            );
        }

        // verify the required parameter 'notificationUpdate' is set
        if ($notificationUpdate === null || (is_array($notificationUpdate) && count($notificationUpdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notificationUpdate when calling apiPersonasPersonaIdnotificationsIdPatch'
            );
        }


        $resourcePath = '/personas/{personaId}/notifications/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($personaId !== null) {
            $resourcePath = str_replace(
                '{' . 'personaId' . '}',
                ObjectSerializer::toPathValue($personaId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($notificationUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($notificationUpdate));
            } else {
                $httpBody = $notificationUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiUsersIdnotificationsGetCollection
     *
     * Retrieves the collection of Notification resources.
     *
     * @param  string $id User identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdnotificationsGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\NotificationRead[]
     */
    public function apiUsersIdnotificationsGetCollection($id, $page = 1, string $contentType = self::contentTypes['apiUsersIdnotificationsGetCollection'][0])
    {
        list($response) = $this->apiUsersIdnotificationsGetCollectionWithHttpInfo($id, $page, $contentType);
        return $response;
    }

    /**
     * Operation apiUsersIdnotificationsGetCollectionWithHttpInfo
     *
     * Retrieves the collection of Notification resources.
     *
     * @param  string $id User identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdnotificationsGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\NotificationRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiUsersIdnotificationsGetCollectionWithHttpInfo($id, $page = 1, string $contentType = self::contentTypes['apiUsersIdnotificationsGetCollection'][0])
    {
        $request = $this->apiUsersIdnotificationsGetCollectionRequest($id, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\NotificationRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\NotificationRead[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\NotificationRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\NotificationRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\NotificationRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiUsersIdnotificationsGetCollectionAsync
     *
     * Retrieves the collection of Notification resources.
     *
     * @param  string $id User identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdnotificationsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsersIdnotificationsGetCollectionAsync($id, $page = 1, string $contentType = self::contentTypes['apiUsersIdnotificationsGetCollection'][0])
    {
        return $this->apiUsersIdnotificationsGetCollectionAsyncWithHttpInfo($id, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiUsersIdnotificationsGetCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Notification resources.
     *
     * @param  string $id User identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdnotificationsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsersIdnotificationsGetCollectionAsyncWithHttpInfo($id, $page = 1, string $contentType = self::contentTypes['apiUsersIdnotificationsGetCollection'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\NotificationRead[]';
        $request = $this->apiUsersIdnotificationsGetCollectionRequest($id, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiUsersIdnotificationsGetCollection'
     *
     * @param  string $id User identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdnotificationsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiUsersIdnotificationsGetCollectionRequest($id, $page = 1, string $contentType = self::contentTypes['apiUsersIdnotificationsGetCollection'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiUsersIdnotificationsGetCollection'
            );
        }



        $resourcePath = '/users/{id}/notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiUsersUserIdnotificationsIdPatch
     *
     * Mark as read/unread a notification for User
     *
     * @param  string $userId User identifier (required)
     * @param  string $id Notification identifier (required)
     * @param  \Tripartie\Tpdk\Model\NotificationUpdate $notificationUpdate The updated Notification resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersUserIdnotificationsIdPatch'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\NotificationRead
     */
    public function apiUsersUserIdnotificationsIdPatch($userId, $id, $notificationUpdate, string $contentType = self::contentTypes['apiUsersUserIdnotificationsIdPatch'][0])
    {
        list($response) = $this->apiUsersUserIdnotificationsIdPatchWithHttpInfo($userId, $id, $notificationUpdate, $contentType);
        return $response;
    }

    /**
     * Operation apiUsersUserIdnotificationsIdPatchWithHttpInfo
     *
     * Mark as read/unread a notification for User
     *
     * @param  string $userId User identifier (required)
     * @param  string $id Notification identifier (required)
     * @param  \Tripartie\Tpdk\Model\NotificationUpdate $notificationUpdate The updated Notification resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersUserIdnotificationsIdPatch'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\NotificationRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiUsersUserIdnotificationsIdPatchWithHttpInfo($userId, $id, $notificationUpdate, string $contentType = self::contentTypes['apiUsersUserIdnotificationsIdPatch'][0])
    {
        $request = $this->apiUsersUserIdnotificationsIdPatchRequest($userId, $id, $notificationUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\NotificationRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\NotificationRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\NotificationRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\NotificationRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\NotificationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiUsersUserIdnotificationsIdPatchAsync
     *
     * Mark as read/unread a notification for User
     *
     * @param  string $userId User identifier (required)
     * @param  string $id Notification identifier (required)
     * @param  \Tripartie\Tpdk\Model\NotificationUpdate $notificationUpdate The updated Notification resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersUserIdnotificationsIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsersUserIdnotificationsIdPatchAsync($userId, $id, $notificationUpdate, string $contentType = self::contentTypes['apiUsersUserIdnotificationsIdPatch'][0])
    {
        return $this->apiUsersUserIdnotificationsIdPatchAsyncWithHttpInfo($userId, $id, $notificationUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiUsersUserIdnotificationsIdPatchAsyncWithHttpInfo
     *
     * Mark as read/unread a notification for User
     *
     * @param  string $userId User identifier (required)
     * @param  string $id Notification identifier (required)
     * @param  \Tripartie\Tpdk\Model\NotificationUpdate $notificationUpdate The updated Notification resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersUserIdnotificationsIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsersUserIdnotificationsIdPatchAsyncWithHttpInfo($userId, $id, $notificationUpdate, string $contentType = self::contentTypes['apiUsersUserIdnotificationsIdPatch'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\NotificationRead';
        $request = $this->apiUsersUserIdnotificationsIdPatchRequest($userId, $id, $notificationUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiUsersUserIdnotificationsIdPatch'
     *
     * @param  string $userId User identifier (required)
     * @param  string $id Notification identifier (required)
     * @param  \Tripartie\Tpdk\Model\NotificationUpdate $notificationUpdate The updated Notification resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersUserIdnotificationsIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiUsersUserIdnotificationsIdPatchRequest($userId, $id, $notificationUpdate, string $contentType = self::contentTypes['apiUsersUserIdnotificationsIdPatch'][0])
    {

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling apiUsersUserIdnotificationsIdPatch'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiUsersUserIdnotificationsIdPatch'
            );
        }

        // verify the required parameter 'notificationUpdate' is set
        if ($notificationUpdate === null || (is_array($notificationUpdate) && count($notificationUpdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notificationUpdate when calling apiUsersUserIdnotificationsIdPatch'
            );
        }


        $resourcePath = '/users/{userId}/notifications/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($notificationUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($notificationUpdate));
            } else {
                $httpBody = $notificationUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
