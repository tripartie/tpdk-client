<?php
/**
 * ResolutionCenterApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tripartie
 *
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.35
 * Contact: noc@tripartie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tripartie\Tpdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tripartie\Tpdk\ApiException;
use Tripartie\Tpdk\Configuration;
use Tripartie\Tpdk\HeaderSelector;
use Tripartie\Tpdk\ObjectSerializer;

/**
 * ResolutionCenterApi Class Doc Comment
 *
 * @category Class
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ResolutionCenterApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiDisputesGetCollection' => [
            'application/json',
        ],
        'apiDisputesPost' => [
            'application/json',
        ],
        'apiDisputesUlidDelete' => [
            'application/json',
        ],
        'apiDisputesUlidGet' => [
            'application/json',
        ],
        'apiDisputesUlidPatch' => [
            'application/json',
        ],
        'apiDisputesUlidevaluationsPost' => [
            'application/json',
        ],
        'apiDisputesUlidevidencesGetCollection' => [
            'application/json',
        ],
        'apiDisputesUlidevidencesIdDelete' => [
            'application/json',
        ],
        'apiDisputesUlidevidencesIdmediaPost' => [
            'multipart/form-data',
        ],
        'apiDisputesUlidevidencesPost' => [
            'application/json',
        ],
        'apiDisputesUlidparcelsGetCollection' => [
            'application/json',
        ],
        'apiDisputesUlidparcelsIdDelete' => [
            'application/json',
        ],
        'apiDisputesUlidparcelsIdGet' => [
            'application/json',
        ],
        'apiDisputesUlidparcelsPost' => [
            'application/json',
        ],
        'apiOffersUlidmediasPost' => [
            'multipart/form-data',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiDisputesGetCollection
     *
     * Retrieves the collection of Dispute resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderCreatedAt  (optional)
     * @param  string $orderStatus  (optional)
     * @param  string $orderUpdatedAt  (optional)
     * @param  string $transactionOfferTitle  (optional)
     * @param  string $createdAtBefore  (optional)
     * @param  string $createdAtStrictlyBefore  (optional)
     * @param  string $createdAtAfter  (optional)
     * @param  string $createdAtStrictlyAfter  (optional)
     * @param  string $status Filter on a limited subset of status (optional)
     * @param  string $transactionStatus Filter on a limited subset of transaction.status (optional)
     * @param  bool $existsRecommendedSolution  (optional)
     * @param  bool $existsChosenSolution  (optional)
     * @param  bool $existsCounterSolution  (optional)
     * @param  bool $existsPlatformSolution  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $transactionMetadata Flattened OrderedMap for transaction.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $transactionOfferMetadata Flattened OrderedMap for transaction.offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\DisputeCollectionRead[]
     */
    public function apiDisputesGetCollection($page = 1, $orderCreatedAt = null, $orderStatus = null, $orderUpdatedAt = null, $transactionOfferTitle = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $status = null, $transactionStatus = null, $existsRecommendedSolution = null, $existsChosenSolution = null, $existsCounterSolution = null, $existsPlatformSolution = null, $metadata = null, $transactionMetadata = null, $transactionOfferMetadata = null, string $contentType = self::contentTypes['apiDisputesGetCollection'][0])
    {
        list($response) = $this->apiDisputesGetCollectionWithHttpInfo($page, $orderCreatedAt, $orderStatus, $orderUpdatedAt, $transactionOfferTitle, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $status, $transactionStatus, $existsRecommendedSolution, $existsChosenSolution, $existsCounterSolution, $existsPlatformSolution, $metadata, $transactionMetadata, $transactionOfferMetadata, $contentType);
        return $response;
    }

    /**
     * Operation apiDisputesGetCollectionWithHttpInfo
     *
     * Retrieves the collection of Dispute resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderCreatedAt  (optional)
     * @param  string $orderStatus  (optional)
     * @param  string $orderUpdatedAt  (optional)
     * @param  string $transactionOfferTitle  (optional)
     * @param  string $createdAtBefore  (optional)
     * @param  string $createdAtStrictlyBefore  (optional)
     * @param  string $createdAtAfter  (optional)
     * @param  string $createdAtStrictlyAfter  (optional)
     * @param  string $status Filter on a limited subset of status (optional)
     * @param  string $transactionStatus Filter on a limited subset of transaction.status (optional)
     * @param  bool $existsRecommendedSolution  (optional)
     * @param  bool $existsChosenSolution  (optional)
     * @param  bool $existsCounterSolution  (optional)
     * @param  bool $existsPlatformSolution  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $transactionMetadata Flattened OrderedMap for transaction.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $transactionOfferMetadata Flattened OrderedMap for transaction.offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\DisputeCollectionRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDisputesGetCollectionWithHttpInfo($page = 1, $orderCreatedAt = null, $orderStatus = null, $orderUpdatedAt = null, $transactionOfferTitle = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $status = null, $transactionStatus = null, $existsRecommendedSolution = null, $existsChosenSolution = null, $existsCounterSolution = null, $existsPlatformSolution = null, $metadata = null, $transactionMetadata = null, $transactionOfferMetadata = null, string $contentType = self::contentTypes['apiDisputesGetCollection'][0])
    {
        $request = $this->apiDisputesGetCollectionRequest($page, $orderCreatedAt, $orderStatus, $orderUpdatedAt, $transactionOfferTitle, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $status, $transactionStatus, $existsRecommendedSolution, $existsChosenSolution, $existsCounterSolution, $existsPlatformSolution, $metadata, $transactionMetadata, $transactionOfferMetadata, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\DisputeCollectionRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\DisputeCollectionRead[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\DisputeCollectionRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\DisputeCollectionRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\DisputeCollectionRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiDisputesGetCollectionAsync
     *
     * Retrieves the collection of Dispute resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderCreatedAt  (optional)
     * @param  string $orderStatus  (optional)
     * @param  string $orderUpdatedAt  (optional)
     * @param  string $transactionOfferTitle  (optional)
     * @param  string $createdAtBefore  (optional)
     * @param  string $createdAtStrictlyBefore  (optional)
     * @param  string $createdAtAfter  (optional)
     * @param  string $createdAtStrictlyAfter  (optional)
     * @param  string $status Filter on a limited subset of status (optional)
     * @param  string $transactionStatus Filter on a limited subset of transaction.status (optional)
     * @param  bool $existsRecommendedSolution  (optional)
     * @param  bool $existsChosenSolution  (optional)
     * @param  bool $existsCounterSolution  (optional)
     * @param  bool $existsPlatformSolution  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $transactionMetadata Flattened OrderedMap for transaction.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $transactionOfferMetadata Flattened OrderedMap for transaction.offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesGetCollectionAsync($page = 1, $orderCreatedAt = null, $orderStatus = null, $orderUpdatedAt = null, $transactionOfferTitle = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $status = null, $transactionStatus = null, $existsRecommendedSolution = null, $existsChosenSolution = null, $existsCounterSolution = null, $existsPlatformSolution = null, $metadata = null, $transactionMetadata = null, $transactionOfferMetadata = null, string $contentType = self::contentTypes['apiDisputesGetCollection'][0])
    {
        return $this->apiDisputesGetCollectionAsyncWithHttpInfo($page, $orderCreatedAt, $orderStatus, $orderUpdatedAt, $transactionOfferTitle, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $status, $transactionStatus, $existsRecommendedSolution, $existsChosenSolution, $existsCounterSolution, $existsPlatformSolution, $metadata, $transactionMetadata, $transactionOfferMetadata, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDisputesGetCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Dispute resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderCreatedAt  (optional)
     * @param  string $orderStatus  (optional)
     * @param  string $orderUpdatedAt  (optional)
     * @param  string $transactionOfferTitle  (optional)
     * @param  string $createdAtBefore  (optional)
     * @param  string $createdAtStrictlyBefore  (optional)
     * @param  string $createdAtAfter  (optional)
     * @param  string $createdAtStrictlyAfter  (optional)
     * @param  string $status Filter on a limited subset of status (optional)
     * @param  string $transactionStatus Filter on a limited subset of transaction.status (optional)
     * @param  bool $existsRecommendedSolution  (optional)
     * @param  bool $existsChosenSolution  (optional)
     * @param  bool $existsCounterSolution  (optional)
     * @param  bool $existsPlatformSolution  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $transactionMetadata Flattened OrderedMap for transaction.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $transactionOfferMetadata Flattened OrderedMap for transaction.offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesGetCollectionAsyncWithHttpInfo($page = 1, $orderCreatedAt = null, $orderStatus = null, $orderUpdatedAt = null, $transactionOfferTitle = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $status = null, $transactionStatus = null, $existsRecommendedSolution = null, $existsChosenSolution = null, $existsCounterSolution = null, $existsPlatformSolution = null, $metadata = null, $transactionMetadata = null, $transactionOfferMetadata = null, string $contentType = self::contentTypes['apiDisputesGetCollection'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\DisputeCollectionRead[]';
        $request = $this->apiDisputesGetCollectionRequest($page, $orderCreatedAt, $orderStatus, $orderUpdatedAt, $transactionOfferTitle, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $status, $transactionStatus, $existsRecommendedSolution, $existsChosenSolution, $existsCounterSolution, $existsPlatformSolution, $metadata, $transactionMetadata, $transactionOfferMetadata, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDisputesGetCollection'
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderCreatedAt  (optional)
     * @param  string $orderStatus  (optional)
     * @param  string $orderUpdatedAt  (optional)
     * @param  string $transactionOfferTitle  (optional)
     * @param  string $createdAtBefore  (optional)
     * @param  string $createdAtStrictlyBefore  (optional)
     * @param  string $createdAtAfter  (optional)
     * @param  string $createdAtStrictlyAfter  (optional)
     * @param  string $status Filter on a limited subset of status (optional)
     * @param  string $transactionStatus Filter on a limited subset of transaction.status (optional)
     * @param  bool $existsRecommendedSolution  (optional)
     * @param  bool $existsChosenSolution  (optional)
     * @param  bool $existsCounterSolution  (optional)
     * @param  bool $existsPlatformSolution  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $transactionMetadata Flattened OrderedMap for transaction.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $transactionOfferMetadata Flattened OrderedMap for transaction.offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDisputesGetCollectionRequest($page = 1, $orderCreatedAt = null, $orderStatus = null, $orderUpdatedAt = null, $transactionOfferTitle = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $status = null, $transactionStatus = null, $existsRecommendedSolution = null, $existsChosenSolution = null, $existsCounterSolution = null, $existsPlatformSolution = null, $metadata = null, $transactionMetadata = null, $transactionOfferMetadata = null, string $contentType = self::contentTypes['apiDisputesGetCollection'][0])
    {




















        $resourcePath = '/disputes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderCreatedAt,
            'order[createdAt]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderStatus,
            'order[status]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderUpdatedAt,
            'order[updatedAt]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transactionOfferTitle,
            'transaction.offer.title', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdAtBefore,
            'createdAt[before]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdAtStrictlyBefore,
            'createdAt[strictly_before]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdAtAfter,
            'createdAt[after]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdAtStrictlyAfter,
            'createdAt[strictly_after]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transactionStatus,
            'transaction.status', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $existsRecommendedSolution,
            'exists[recommendedSolution]', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $existsChosenSolution,
            'exists[chosenSolution]', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $existsCounterSolution,
            'exists[counterSolution]', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $existsPlatformSolution,
            'exists[platformSolution]', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadata,
            'metadata[]', // param base name
            'array', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transactionMetadata,
            'transaction.metadata[]', // param base name
            'array', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transactionOfferMetadata,
            'transaction.offer.metadata[]', // param base name
            'array', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDisputesPost
     *
     * Draft a standalone Dispute
     *
     * @param  \Tripartie\Tpdk\Model\DisputeIndependentWrite $disputeIndependentWrite The new Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\DisputePostCreationRead
     */
    public function apiDisputesPost($disputeIndependentWrite, string $contentType = self::contentTypes['apiDisputesPost'][0])
    {
        list($response) = $this->apiDisputesPostWithHttpInfo($disputeIndependentWrite, $contentType);
        return $response;
    }

    /**
     * Operation apiDisputesPostWithHttpInfo
     *
     * Draft a standalone Dispute
     *
     * @param  \Tripartie\Tpdk\Model\DisputeIndependentWrite $disputeIndependentWrite The new Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\DisputePostCreationRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDisputesPostWithHttpInfo($disputeIndependentWrite, string $contentType = self::contentTypes['apiDisputesPost'][0])
    {
        $request = $this->apiDisputesPostRequest($disputeIndependentWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 422:
                    if ('\Tripartie\Tpdk\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UnprocessableEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Tripartie\Tpdk\Model\DisputePostCreationRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\DisputePostCreationRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\DisputePostCreationRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\DisputePostCreationRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\DisputePostCreationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiDisputesPostAsync
     *
     * Draft a standalone Dispute
     *
     * @param  \Tripartie\Tpdk\Model\DisputeIndependentWrite $disputeIndependentWrite The new Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesPostAsync($disputeIndependentWrite, string $contentType = self::contentTypes['apiDisputesPost'][0])
    {
        return $this->apiDisputesPostAsyncWithHttpInfo($disputeIndependentWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDisputesPostAsyncWithHttpInfo
     *
     * Draft a standalone Dispute
     *
     * @param  \Tripartie\Tpdk\Model\DisputeIndependentWrite $disputeIndependentWrite The new Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesPostAsyncWithHttpInfo($disputeIndependentWrite, string $contentType = self::contentTypes['apiDisputesPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\DisputePostCreationRead';
        $request = $this->apiDisputesPostRequest($disputeIndependentWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDisputesPost'
     *
     * @param  \Tripartie\Tpdk\Model\DisputeIndependentWrite $disputeIndependentWrite The new Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDisputesPostRequest($disputeIndependentWrite, string $contentType = self::contentTypes['apiDisputesPost'][0])
    {

        // verify the required parameter 'disputeIndependentWrite' is set
        if ($disputeIndependentWrite === null || (is_array($disputeIndependentWrite) && count($disputeIndependentWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $disputeIndependentWrite when calling apiDisputesPost'
            );
        }


        $resourcePath = '/disputes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($disputeIndependentWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($disputeIndependentWrite));
            } else {
                $httpBody = $disputeIndependentWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDisputesUlidDelete
     *
     * Abandon claims on Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiDisputesUlidDelete($ulid, string $contentType = self::contentTypes['apiDisputesUlidDelete'][0])
    {
        $this->apiDisputesUlidDeleteWithHttpInfo($ulid, $contentType);
    }

    /**
     * Operation apiDisputesUlidDeleteWithHttpInfo
     *
     * Abandon claims on Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDisputesUlidDeleteWithHttpInfo($ulid, string $contentType = self::contentTypes['apiDisputesUlidDelete'][0])
    {
        $request = $this->apiDisputesUlidDeleteRequest($ulid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiDisputesUlidDeleteAsync
     *
     * Abandon claims on Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidDeleteAsync($ulid, string $contentType = self::contentTypes['apiDisputesUlidDelete'][0])
    {
        return $this->apiDisputesUlidDeleteAsyncWithHttpInfo($ulid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDisputesUlidDeleteAsyncWithHttpInfo
     *
     * Abandon claims on Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidDeleteAsyncWithHttpInfo($ulid, string $contentType = self::contentTypes['apiDisputesUlidDelete'][0])
    {
        $returnType = '';
        $request = $this->apiDisputesUlidDeleteRequest($ulid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDisputesUlidDelete'
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDisputesUlidDeleteRequest($ulid, string $contentType = self::contentTypes['apiDisputesUlidDelete'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiDisputesUlidDelete'
            );
        }


        $resourcePath = '/disputes/{ulid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDisputesUlidGet
     *
     * Retrieves a Dispute resource.
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\DisputeRead
     */
    public function apiDisputesUlidGet($ulid, string $contentType = self::contentTypes['apiDisputesUlidGet'][0])
    {
        list($response) = $this->apiDisputesUlidGetWithHttpInfo($ulid, $contentType);
        return $response;
    }

    /**
     * Operation apiDisputesUlidGetWithHttpInfo
     *
     * Retrieves a Dispute resource.
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\DisputeRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDisputesUlidGetWithHttpInfo($ulid, string $contentType = self::contentTypes['apiDisputesUlidGet'][0])
    {
        $request = $this->apiDisputesUlidGetRequest($ulid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\DisputeRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\DisputeRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\DisputeRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\DisputeRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\DisputeRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiDisputesUlidGetAsync
     *
     * Retrieves a Dispute resource.
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidGetAsync($ulid, string $contentType = self::contentTypes['apiDisputesUlidGet'][0])
    {
        return $this->apiDisputesUlidGetAsyncWithHttpInfo($ulid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDisputesUlidGetAsyncWithHttpInfo
     *
     * Retrieves a Dispute resource.
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidGetAsyncWithHttpInfo($ulid, string $contentType = self::contentTypes['apiDisputesUlidGet'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\DisputeRead';
        $request = $this->apiDisputesUlidGetRequest($ulid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDisputesUlidGet'
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDisputesUlidGetRequest($ulid, string $contentType = self::contentTypes['apiDisputesUlidGet'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiDisputesUlidGet'
            );
        }


        $resourcePath = '/disputes/{ulid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDisputesUlidPatch
     *
     * Update the Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\DisputeUpdate $disputeUpdate The updated Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidPatch'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\DisputeRead
     */
    public function apiDisputesUlidPatch($ulid, $disputeUpdate, string $contentType = self::contentTypes['apiDisputesUlidPatch'][0])
    {
        list($response) = $this->apiDisputesUlidPatchWithHttpInfo($ulid, $disputeUpdate, $contentType);
        return $response;
    }

    /**
     * Operation apiDisputesUlidPatchWithHttpInfo
     *
     * Update the Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\DisputeUpdate $disputeUpdate The updated Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidPatch'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\DisputeRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDisputesUlidPatchWithHttpInfo($ulid, $disputeUpdate, string $contentType = self::contentTypes['apiDisputesUlidPatch'][0])
    {
        $request = $this->apiDisputesUlidPatchRequest($ulid, $disputeUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\DisputeRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\DisputeRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\DisputeRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\DisputeRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\DisputeRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiDisputesUlidPatchAsync
     *
     * Update the Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\DisputeUpdate $disputeUpdate The updated Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidPatchAsync($ulid, $disputeUpdate, string $contentType = self::contentTypes['apiDisputesUlidPatch'][0])
    {
        return $this->apiDisputesUlidPatchAsyncWithHttpInfo($ulid, $disputeUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDisputesUlidPatchAsyncWithHttpInfo
     *
     * Update the Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\DisputeUpdate $disputeUpdate The updated Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidPatchAsyncWithHttpInfo($ulid, $disputeUpdate, string $contentType = self::contentTypes['apiDisputesUlidPatch'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\DisputeRead';
        $request = $this->apiDisputesUlidPatchRequest($ulid, $disputeUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDisputesUlidPatch'
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\DisputeUpdate $disputeUpdate The updated Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDisputesUlidPatchRequest($ulid, $disputeUpdate, string $contentType = self::contentTypes['apiDisputesUlidPatch'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiDisputesUlidPatch'
            );
        }

        // verify the required parameter 'disputeUpdate' is set
        if ($disputeUpdate === null || (is_array($disputeUpdate) && count($disputeUpdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $disputeUpdate when calling apiDisputesUlidPatch'
            );
        }


        $resourcePath = '/disputes/{ulid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($disputeUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($disputeUpdate));
            } else {
                $httpBody = $disputeUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDisputesUlidevaluationsPost
     *
     * Submit an Evaluation for the Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\EvaluationWrite $evaluationWrite The new Evaluation resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevaluationsPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\EvaluationRead
     */
    public function apiDisputesUlidevaluationsPost($ulid, $evaluationWrite, string $contentType = self::contentTypes['apiDisputesUlidevaluationsPost'][0])
    {
        list($response) = $this->apiDisputesUlidevaluationsPostWithHttpInfo($ulid, $evaluationWrite, $contentType);
        return $response;
    }

    /**
     * Operation apiDisputesUlidevaluationsPostWithHttpInfo
     *
     * Submit an Evaluation for the Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\EvaluationWrite $evaluationWrite The new Evaluation resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevaluationsPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\EvaluationRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDisputesUlidevaluationsPostWithHttpInfo($ulid, $evaluationWrite, string $contentType = self::contentTypes['apiDisputesUlidevaluationsPost'][0])
    {
        $request = $this->apiDisputesUlidevaluationsPostRequest($ulid, $evaluationWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 422:
                    if ('\Tripartie\Tpdk\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UnprocessableEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Tripartie\Tpdk\Model\EvaluationRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\EvaluationRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\EvaluationRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\EvaluationRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\EvaluationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiDisputesUlidevaluationsPostAsync
     *
     * Submit an Evaluation for the Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\EvaluationWrite $evaluationWrite The new Evaluation resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevaluationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidevaluationsPostAsync($ulid, $evaluationWrite, string $contentType = self::contentTypes['apiDisputesUlidevaluationsPost'][0])
    {
        return $this->apiDisputesUlidevaluationsPostAsyncWithHttpInfo($ulid, $evaluationWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDisputesUlidevaluationsPostAsyncWithHttpInfo
     *
     * Submit an Evaluation for the Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\EvaluationWrite $evaluationWrite The new Evaluation resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevaluationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidevaluationsPostAsyncWithHttpInfo($ulid, $evaluationWrite, string $contentType = self::contentTypes['apiDisputesUlidevaluationsPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\EvaluationRead';
        $request = $this->apiDisputesUlidevaluationsPostRequest($ulid, $evaluationWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDisputesUlidevaluationsPost'
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\EvaluationWrite $evaluationWrite The new Evaluation resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevaluationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDisputesUlidevaluationsPostRequest($ulid, $evaluationWrite, string $contentType = self::contentTypes['apiDisputesUlidevaluationsPost'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiDisputesUlidevaluationsPost'
            );
        }

        // verify the required parameter 'evaluationWrite' is set
        if ($evaluationWrite === null || (is_array($evaluationWrite) && count($evaluationWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evaluationWrite when calling apiDisputesUlidevaluationsPost'
            );
        }


        $resourcePath = '/disputes/{ulid}/evaluations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($evaluationWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($evaluationWrite));
            } else {
                $httpBody = $evaluationWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDisputesUlidevidencesGetCollection
     *
     * Retrieve all Evidences in Dispute
     *
     * @param  string $ulid  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\EvidenceRead[]
     */
    public function apiDisputesUlidevidencesGetCollection($ulid, string $contentType = self::contentTypes['apiDisputesUlidevidencesGetCollection'][0])
    {
        list($response) = $this->apiDisputesUlidevidencesGetCollectionWithHttpInfo($ulid, $contentType);
        return $response;
    }

    /**
     * Operation apiDisputesUlidevidencesGetCollectionWithHttpInfo
     *
     * Retrieve all Evidences in Dispute
     *
     * @param  string $ulid  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\EvidenceRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDisputesUlidevidencesGetCollectionWithHttpInfo($ulid, string $contentType = self::contentTypes['apiDisputesUlidevidencesGetCollection'][0])
    {
        $request = $this->apiDisputesUlidevidencesGetCollectionRequest($ulid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\EvidenceRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\EvidenceRead[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\EvidenceRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\EvidenceRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\EvidenceRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiDisputesUlidevidencesGetCollectionAsync
     *
     * Retrieve all Evidences in Dispute
     *
     * @param  string $ulid  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidevidencesGetCollectionAsync($ulid, string $contentType = self::contentTypes['apiDisputesUlidevidencesGetCollection'][0])
    {
        return $this->apiDisputesUlidevidencesGetCollectionAsyncWithHttpInfo($ulid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDisputesUlidevidencesGetCollectionAsyncWithHttpInfo
     *
     * Retrieve all Evidences in Dispute
     *
     * @param  string $ulid  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidevidencesGetCollectionAsyncWithHttpInfo($ulid, string $contentType = self::contentTypes['apiDisputesUlidevidencesGetCollection'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\EvidenceRead[]';
        $request = $this->apiDisputesUlidevidencesGetCollectionRequest($ulid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDisputesUlidevidencesGetCollection'
     *
     * @param  string $ulid  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDisputesUlidevidencesGetCollectionRequest($ulid, string $contentType = self::contentTypes['apiDisputesUlidevidencesGetCollection'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiDisputesUlidevidencesGetCollection'
            );
        }


        $resourcePath = '/disputes/{ulid}/evidences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDisputesUlidevidencesIdDelete
     *
     * Withdraw an Evidence from a Dispute
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesIdDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiDisputesUlidevidencesIdDelete($ulid, $id, string $contentType = self::contentTypes['apiDisputesUlidevidencesIdDelete'][0])
    {
        $this->apiDisputesUlidevidencesIdDeleteWithHttpInfo($ulid, $id, $contentType);
    }

    /**
     * Operation apiDisputesUlidevidencesIdDeleteWithHttpInfo
     *
     * Withdraw an Evidence from a Dispute
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesIdDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDisputesUlidevidencesIdDeleteWithHttpInfo($ulid, $id, string $contentType = self::contentTypes['apiDisputesUlidevidencesIdDelete'][0])
    {
        $request = $this->apiDisputesUlidevidencesIdDeleteRequest($ulid, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiDisputesUlidevidencesIdDeleteAsync
     *
     * Withdraw an Evidence from a Dispute
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidevidencesIdDeleteAsync($ulid, $id, string $contentType = self::contentTypes['apiDisputesUlidevidencesIdDelete'][0])
    {
        return $this->apiDisputesUlidevidencesIdDeleteAsyncWithHttpInfo($ulid, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDisputesUlidevidencesIdDeleteAsyncWithHttpInfo
     *
     * Withdraw an Evidence from a Dispute
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidevidencesIdDeleteAsyncWithHttpInfo($ulid, $id, string $contentType = self::contentTypes['apiDisputesUlidevidencesIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiDisputesUlidevidencesIdDeleteRequest($ulid, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDisputesUlidevidencesIdDelete'
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDisputesUlidevidencesIdDeleteRequest($ulid, $id, string $contentType = self::contentTypes['apiDisputesUlidevidencesIdDelete'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiDisputesUlidevidencesIdDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiDisputesUlidevidencesIdDelete'
            );
        }


        $resourcePath = '/disputes/{ulid}/evidences/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDisputesUlidevidencesIdmediaPost
     *
     * Upload attachment in regard of described Evidence
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  \SplFileObject $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesIdmediaPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\MediaRead
     */
    public function apiDisputesUlidevidencesIdmediaPost($ulid, $id, $file = null, string $contentType = self::contentTypes['apiDisputesUlidevidencesIdmediaPost'][0])
    {
        list($response) = $this->apiDisputesUlidevidencesIdmediaPostWithHttpInfo($ulid, $id, $file, $contentType);
        return $response;
    }

    /**
     * Operation apiDisputesUlidevidencesIdmediaPostWithHttpInfo
     *
     * Upload attachment in regard of described Evidence
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesIdmediaPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\MediaRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDisputesUlidevidencesIdmediaPostWithHttpInfo($ulid, $id, $file = null, string $contentType = self::contentTypes['apiDisputesUlidevidencesIdmediaPost'][0])
    {
        $request = $this->apiDisputesUlidevidencesIdmediaPostRequest($ulid, $id, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 422:
                    if ('\Tripartie\Tpdk\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UnprocessableEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Tripartie\Tpdk\Model\MediaRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\MediaRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\MediaRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\MediaRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\MediaRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiDisputesUlidevidencesIdmediaPostAsync
     *
     * Upload attachment in regard of described Evidence
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesIdmediaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidevidencesIdmediaPostAsync($ulid, $id, $file = null, string $contentType = self::contentTypes['apiDisputesUlidevidencesIdmediaPost'][0])
    {
        return $this->apiDisputesUlidevidencesIdmediaPostAsyncWithHttpInfo($ulid, $id, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDisputesUlidevidencesIdmediaPostAsyncWithHttpInfo
     *
     * Upload attachment in regard of described Evidence
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesIdmediaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidevidencesIdmediaPostAsyncWithHttpInfo($ulid, $id, $file = null, string $contentType = self::contentTypes['apiDisputesUlidevidencesIdmediaPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\MediaRead';
        $request = $this->apiDisputesUlidevidencesIdmediaPostRequest($ulid, $id, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDisputesUlidevidencesIdmediaPost'
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesIdmediaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDisputesUlidevidencesIdmediaPostRequest($ulid, $id, $file = null, string $contentType = self::contentTypes['apiDisputesUlidevidencesIdmediaPost'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiDisputesUlidevidencesIdmediaPost'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiDisputesUlidevidencesIdmediaPost'
            );
        }



        $resourcePath = '/disputes/{ulid}/evidences/{id}/media';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDisputesUlidevidencesPost
     *
     * Submit an Evidence to the Dispute case
     *
     * @param  string $ulid  (required)
     * @param  \Tripartie\Tpdk\Model\EvidenceWrite $evidenceWrite The new Evidence resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\EvidenceRead
     */
    public function apiDisputesUlidevidencesPost($ulid, $evidenceWrite, string $contentType = self::contentTypes['apiDisputesUlidevidencesPost'][0])
    {
        list($response) = $this->apiDisputesUlidevidencesPostWithHttpInfo($ulid, $evidenceWrite, $contentType);
        return $response;
    }

    /**
     * Operation apiDisputesUlidevidencesPostWithHttpInfo
     *
     * Submit an Evidence to the Dispute case
     *
     * @param  string $ulid  (required)
     * @param  \Tripartie\Tpdk\Model\EvidenceWrite $evidenceWrite The new Evidence resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\EvidenceRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDisputesUlidevidencesPostWithHttpInfo($ulid, $evidenceWrite, string $contentType = self::contentTypes['apiDisputesUlidevidencesPost'][0])
    {
        $request = $this->apiDisputesUlidevidencesPostRequest($ulid, $evidenceWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 422:
                    if ('\Tripartie\Tpdk\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UnprocessableEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Tripartie\Tpdk\Model\EvidenceRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\EvidenceRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\EvidenceRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\EvidenceRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\EvidenceRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiDisputesUlidevidencesPostAsync
     *
     * Submit an Evidence to the Dispute case
     *
     * @param  string $ulid  (required)
     * @param  \Tripartie\Tpdk\Model\EvidenceWrite $evidenceWrite The new Evidence resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidevidencesPostAsync($ulid, $evidenceWrite, string $contentType = self::contentTypes['apiDisputesUlidevidencesPost'][0])
    {
        return $this->apiDisputesUlidevidencesPostAsyncWithHttpInfo($ulid, $evidenceWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDisputesUlidevidencesPostAsyncWithHttpInfo
     *
     * Submit an Evidence to the Dispute case
     *
     * @param  string $ulid  (required)
     * @param  \Tripartie\Tpdk\Model\EvidenceWrite $evidenceWrite The new Evidence resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidevidencesPostAsyncWithHttpInfo($ulid, $evidenceWrite, string $contentType = self::contentTypes['apiDisputesUlidevidencesPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\EvidenceRead';
        $request = $this->apiDisputesUlidevidencesPostRequest($ulid, $evidenceWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDisputesUlidevidencesPost'
     *
     * @param  string $ulid  (required)
     * @param  \Tripartie\Tpdk\Model\EvidenceWrite $evidenceWrite The new Evidence resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidevidencesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDisputesUlidevidencesPostRequest($ulid, $evidenceWrite, string $contentType = self::contentTypes['apiDisputesUlidevidencesPost'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiDisputesUlidevidencesPost'
            );
        }

        // verify the required parameter 'evidenceWrite' is set
        if ($evidenceWrite === null || (is_array($evidenceWrite) && count($evidenceWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evidenceWrite when calling apiDisputesUlidevidencesPost'
            );
        }


        $resourcePath = '/disputes/{ulid}/evidences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($evidenceWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($evidenceWrite));
            } else {
                $httpBody = $evidenceWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDisputesUlidparcelsGetCollection
     *
     * Retrieves the collection of Parcel resources.
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function apiDisputesUlidparcelsGetCollection($ulid, $page = 1, string $contentType = self::contentTypes['apiDisputesUlidparcelsGetCollection'][0])
    {
        list($response) = $this->apiDisputesUlidparcelsGetCollectionWithHttpInfo($ulid, $page, $contentType);
        return $response;
    }

    /**
     * Operation apiDisputesUlidparcelsGetCollectionWithHttpInfo
     *
     * Retrieves the collection of Parcel resources.
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDisputesUlidparcelsGetCollectionWithHttpInfo($ulid, $page = 1, string $contentType = self::contentTypes['apiDisputesUlidparcelsGetCollection'][0])
    {
        $request = $this->apiDisputesUlidparcelsGetCollectionRequest($ulid, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiDisputesUlidparcelsGetCollectionAsync
     *
     * Retrieves the collection of Parcel resources.
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidparcelsGetCollectionAsync($ulid, $page = 1, string $contentType = self::contentTypes['apiDisputesUlidparcelsGetCollection'][0])
    {
        return $this->apiDisputesUlidparcelsGetCollectionAsyncWithHttpInfo($ulid, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDisputesUlidparcelsGetCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Parcel resources.
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidparcelsGetCollectionAsyncWithHttpInfo($ulid, $page = 1, string $contentType = self::contentTypes['apiDisputesUlidparcelsGetCollection'][0])
    {
        $returnType = 'object[]';
        $request = $this->apiDisputesUlidparcelsGetCollectionRequest($ulid, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDisputesUlidparcelsGetCollection'
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDisputesUlidparcelsGetCollectionRequest($ulid, $page = 1, string $contentType = self::contentTypes['apiDisputesUlidparcelsGetCollection'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiDisputesUlidparcelsGetCollection'
            );
        }



        $resourcePath = '/disputes/{ulid}/parcels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDisputesUlidparcelsIdDelete
     *
     * Removes the Parcel resource.
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsIdDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiDisputesUlidparcelsIdDelete($ulid, $id, string $contentType = self::contentTypes['apiDisputesUlidparcelsIdDelete'][0])
    {
        $this->apiDisputesUlidparcelsIdDeleteWithHttpInfo($ulid, $id, $contentType);
    }

    /**
     * Operation apiDisputesUlidparcelsIdDeleteWithHttpInfo
     *
     * Removes the Parcel resource.
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsIdDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDisputesUlidparcelsIdDeleteWithHttpInfo($ulid, $id, string $contentType = self::contentTypes['apiDisputesUlidparcelsIdDelete'][0])
    {
        $request = $this->apiDisputesUlidparcelsIdDeleteRequest($ulid, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiDisputesUlidparcelsIdDeleteAsync
     *
     * Removes the Parcel resource.
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidparcelsIdDeleteAsync($ulid, $id, string $contentType = self::contentTypes['apiDisputesUlidparcelsIdDelete'][0])
    {
        return $this->apiDisputesUlidparcelsIdDeleteAsyncWithHttpInfo($ulid, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDisputesUlidparcelsIdDeleteAsyncWithHttpInfo
     *
     * Removes the Parcel resource.
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidparcelsIdDeleteAsyncWithHttpInfo($ulid, $id, string $contentType = self::contentTypes['apiDisputesUlidparcelsIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiDisputesUlidparcelsIdDeleteRequest($ulid, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDisputesUlidparcelsIdDelete'
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDisputesUlidparcelsIdDeleteRequest($ulid, $id, string $contentType = self::contentTypes['apiDisputesUlidparcelsIdDelete'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiDisputesUlidparcelsIdDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiDisputesUlidparcelsIdDelete'
            );
        }


        $resourcePath = '/disputes/{ulid}/parcels/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDisputesUlidparcelsIdGet
     *
     * Read single parcel state
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsIdGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\ParcelRead
     */
    public function apiDisputesUlidparcelsIdGet($ulid, $id, string $contentType = self::contentTypes['apiDisputesUlidparcelsIdGet'][0])
    {
        list($response) = $this->apiDisputesUlidparcelsIdGetWithHttpInfo($ulid, $id, $contentType);
        return $response;
    }

    /**
     * Operation apiDisputesUlidparcelsIdGetWithHttpInfo
     *
     * Read single parcel state
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsIdGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\ParcelRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDisputesUlidparcelsIdGetWithHttpInfo($ulid, $id, string $contentType = self::contentTypes['apiDisputesUlidparcelsIdGet'][0])
    {
        $request = $this->apiDisputesUlidparcelsIdGetRequest($ulid, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\ParcelRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\ParcelRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\ParcelRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\ParcelRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\ParcelRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiDisputesUlidparcelsIdGetAsync
     *
     * Read single parcel state
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidparcelsIdGetAsync($ulid, $id, string $contentType = self::contentTypes['apiDisputesUlidparcelsIdGet'][0])
    {
        return $this->apiDisputesUlidparcelsIdGetAsyncWithHttpInfo($ulid, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDisputesUlidparcelsIdGetAsyncWithHttpInfo
     *
     * Read single parcel state
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidparcelsIdGetAsyncWithHttpInfo($ulid, $id, string $contentType = self::contentTypes['apiDisputesUlidparcelsIdGet'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\ParcelRead';
        $request = $this->apiDisputesUlidparcelsIdGetRequest($ulid, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDisputesUlidparcelsIdGet'
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDisputesUlidparcelsIdGetRequest($ulid, $id, string $contentType = self::contentTypes['apiDisputesUlidparcelsIdGet'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiDisputesUlidparcelsIdGet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiDisputesUlidparcelsIdGet'
            );
        }


        $resourcePath = '/disputes/{ulid}/parcels/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDisputesUlidparcelsPost
     *
     * Creates a Parcel resource.
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\ParcelWrite $parcelWrite The new Parcel resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\ParcelRead
     */
    public function apiDisputesUlidparcelsPost($ulid, $parcelWrite, string $contentType = self::contentTypes['apiDisputesUlidparcelsPost'][0])
    {
        list($response) = $this->apiDisputesUlidparcelsPostWithHttpInfo($ulid, $parcelWrite, $contentType);
        return $response;
    }

    /**
     * Operation apiDisputesUlidparcelsPostWithHttpInfo
     *
     * Creates a Parcel resource.
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\ParcelWrite $parcelWrite The new Parcel resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\ParcelRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDisputesUlidparcelsPostWithHttpInfo($ulid, $parcelWrite, string $contentType = self::contentTypes['apiDisputesUlidparcelsPost'][0])
    {
        $request = $this->apiDisputesUlidparcelsPostRequest($ulid, $parcelWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Tripartie\Tpdk\Model\ParcelRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\ParcelRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\ParcelRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\ParcelRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\ParcelRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiDisputesUlidparcelsPostAsync
     *
     * Creates a Parcel resource.
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\ParcelWrite $parcelWrite The new Parcel resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidparcelsPostAsync($ulid, $parcelWrite, string $contentType = self::contentTypes['apiDisputesUlidparcelsPost'][0])
    {
        return $this->apiDisputesUlidparcelsPostAsyncWithHttpInfo($ulid, $parcelWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDisputesUlidparcelsPostAsyncWithHttpInfo
     *
     * Creates a Parcel resource.
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\ParcelWrite $parcelWrite The new Parcel resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDisputesUlidparcelsPostAsyncWithHttpInfo($ulid, $parcelWrite, string $contentType = self::contentTypes['apiDisputesUlidparcelsPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\ParcelRead';
        $request = $this->apiDisputesUlidparcelsPostRequest($ulid, $parcelWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDisputesUlidparcelsPost'
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\ParcelWrite $parcelWrite The new Parcel resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDisputesUlidparcelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDisputesUlidparcelsPostRequest($ulid, $parcelWrite, string $contentType = self::contentTypes['apiDisputesUlidparcelsPost'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiDisputesUlidparcelsPost'
            );
        }

        // verify the required parameter 'parcelWrite' is set
        if ($parcelWrite === null || (is_array($parcelWrite) && count($parcelWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcelWrite when calling apiDisputesUlidparcelsPost'
            );
        }


        $resourcePath = '/disputes/{ulid}/parcels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($parcelWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($parcelWrite));
            } else {
                $httpBody = $parcelWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOffersUlidmediasPost
     *
     * Upload a picture for a given Offer
     *
     * @param  string $ulid  (required)
     * @param  \SplFileObject $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidmediasPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\MediaRead
     */
    public function apiOffersUlidmediasPost($ulid, $file = null, string $contentType = self::contentTypes['apiOffersUlidmediasPost'][0])
    {
        list($response) = $this->apiOffersUlidmediasPostWithHttpInfo($ulid, $file, $contentType);
        return $response;
    }

    /**
     * Operation apiOffersUlidmediasPostWithHttpInfo
     *
     * Upload a picture for a given Offer
     *
     * @param  string $ulid  (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidmediasPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\MediaRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOffersUlidmediasPostWithHttpInfo($ulid, $file = null, string $contentType = self::contentTypes['apiOffersUlidmediasPost'][0])
    {
        $request = $this->apiOffersUlidmediasPostRequest($ulid, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 422:
                    if ('\Tripartie\Tpdk\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UnprocessableEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Tripartie\Tpdk\Model\MediaRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\MediaRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\MediaRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\MediaRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\MediaRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOffersUlidmediasPostAsync
     *
     * Upload a picture for a given Offer
     *
     * @param  string $ulid  (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidmediasPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersUlidmediasPostAsync($ulid, $file = null, string $contentType = self::contentTypes['apiOffersUlidmediasPost'][0])
    {
        return $this->apiOffersUlidmediasPostAsyncWithHttpInfo($ulid, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOffersUlidmediasPostAsyncWithHttpInfo
     *
     * Upload a picture for a given Offer
     *
     * @param  string $ulid  (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidmediasPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersUlidmediasPostAsyncWithHttpInfo($ulid, $file = null, string $contentType = self::contentTypes['apiOffersUlidmediasPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\MediaRead';
        $request = $this->apiOffersUlidmediasPostRequest($ulid, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOffersUlidmediasPost'
     *
     * @param  string $ulid  (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidmediasPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiOffersUlidmediasPostRequest($ulid, $file = null, string $contentType = self::contentTypes['apiOffersUlidmediasPost'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiOffersUlidmediasPost'
            );
        }



        $resourcePath = '/offers/{ulid}/medias';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
