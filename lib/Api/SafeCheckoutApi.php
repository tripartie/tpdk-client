<?php
/**
 * SafeCheckoutApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tripartie
 *
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.194
 * Contact: noc@tripartie.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tripartie\Tpdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tripartie\Tpdk\ApiException;
use Tripartie\Tpdk\Configuration;
use Tripartie\Tpdk\HeaderSelector;
use Tripartie\Tpdk\ObjectSerializer;

/**
 * SafeCheckoutApi Class Doc Comment
 *
 * @category Class
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SafeCheckoutApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiOffersGetCollection' => [
            'application/json',
        ],
        'apiOffersPost' => [
            'application/json',
        ],
        'apiOffersUlidGet' => [
            'application/json',
        ],
        'apiOffersUlidmediasIdDelete' => [
            'application/json',
        ],
        'apiOffersUlidmediasPost' => [
            'multipart/form-data',
        ],
        'apiOffersUlidtransactionsGetCollection' => [
            'application/json',
        ],
        'apiOffersUlidtransactionsIdevaluationsPost' => [
            'application/json',
        ],
        'apiOffersUlidtransactionsPost' => [
            'application/json',
        ],
        'apiPersonasIdoffersDelete' => [
            'application/json',
        ],
        'apiPersonasIdoffersGetCollection' => [
            'application/json',
        ],
        'apiPersonasIdoffersPatch' => [
            'application/json',
        ],
        'apiPersonasIdoffersPost' => [
            'application/json',
        ],
        'apiTransactionsGetCollection' => [
            'application/json',
        ],
        'apiTransactionsUliddisputeDelete' => [
            'application/json',
        ],
        'apiTransactionsUliddisputeGet' => [
            'application/json',
        ],
        'apiTransactionsUliddisputePatch' => [
            'application/json',
        ],
        'apiTransactionsUliddisputePost' => [
            'application/json',
        ],
        'apiTransactionsUlidparcelsGetCollection' => [
            'application/json',
        ],
        'apiTransactionsUlidparcelsIdDelete' => [
            'application/json',
        ],
        'apiTransactionsUlidparcelsPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiOffersGetCollection
     *
     * Read issued Offers
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $title  (optional)
     * @param  string $publicUrl  (optional)
     * @param  string[] $publicUrl2  (optional)
     * @param  float $unitPrice  (optional)
     * @param  float[] $unitPrice2  (optional)
     * @param  int $itemCount  (optional)
     * @param  int[] $itemCount2  (optional)
     * @param  string $createdAtBefore  (optional)
     * @param  string $createdAtStrictlyBefore  (optional)
     * @param  string $createdAtAfter  (optional)
     * @param  string $createdAtStrictlyAfter  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $nature Filter on a limited subset of nature (optional)
     * @param  string $condition Filter on a limited subset of condition (optional)
     * @param  bool $shippingAllowed  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\OfferCollectionRead[]|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiOffersGetCollection($page = 1, $title = null, $publicUrl = null, $publicUrl2 = null, $unitPrice = null, $unitPrice2 = null, $itemCount = null, $itemCount2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $metadata = null, $offerMetadata = null, $nature = null, $condition = null, $shippingAllowed = null, string $contentType = self::contentTypes['apiOffersGetCollection'][0])
    {
        list($response) = $this->apiOffersGetCollectionWithHttpInfo($page, $title, $publicUrl, $publicUrl2, $unitPrice, $unitPrice2, $itemCount, $itemCount2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $metadata, $offerMetadata, $nature, $condition, $shippingAllowed, $contentType);
        return $response;
    }

    /**
     * Operation apiOffersGetCollectionWithHttpInfo
     *
     * Read issued Offers
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $title  (optional)
     * @param  string $publicUrl  (optional)
     * @param  string[] $publicUrl2  (optional)
     * @param  float $unitPrice  (optional)
     * @param  float[] $unitPrice2  (optional)
     * @param  int $itemCount  (optional)
     * @param  int[] $itemCount2  (optional)
     * @param  string $createdAtBefore  (optional)
     * @param  string $createdAtStrictlyBefore  (optional)
     * @param  string $createdAtAfter  (optional)
     * @param  string $createdAtStrictlyAfter  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $nature Filter on a limited subset of nature (optional)
     * @param  string $condition Filter on a limited subset of condition (optional)
     * @param  bool $shippingAllowed  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\OfferCollectionRead[]|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOffersGetCollectionWithHttpInfo($page = 1, $title = null, $publicUrl = null, $publicUrl2 = null, $unitPrice = null, $unitPrice2 = null, $itemCount = null, $itemCount2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $metadata = null, $offerMetadata = null, $nature = null, $condition = null, $shippingAllowed = null, string $contentType = self::contentTypes['apiOffersGetCollection'][0])
    {
        $request = $this->apiOffersGetCollectionRequest($page, $title, $publicUrl, $publicUrl2, $unitPrice, $unitPrice2, $itemCount, $itemCount2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $metadata, $offerMetadata, $nature, $condition, $shippingAllowed, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\OfferCollectionRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\OfferCollectionRead[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\OfferCollectionRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\OfferCollectionRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\OfferCollectionRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOffersGetCollectionAsync
     *
     * Read issued Offers
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $title  (optional)
     * @param  string $publicUrl  (optional)
     * @param  string[] $publicUrl2  (optional)
     * @param  float $unitPrice  (optional)
     * @param  float[] $unitPrice2  (optional)
     * @param  int $itemCount  (optional)
     * @param  int[] $itemCount2  (optional)
     * @param  string $createdAtBefore  (optional)
     * @param  string $createdAtStrictlyBefore  (optional)
     * @param  string $createdAtAfter  (optional)
     * @param  string $createdAtStrictlyAfter  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $nature Filter on a limited subset of nature (optional)
     * @param  string $condition Filter on a limited subset of condition (optional)
     * @param  bool $shippingAllowed  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersGetCollectionAsync($page = 1, $title = null, $publicUrl = null, $publicUrl2 = null, $unitPrice = null, $unitPrice2 = null, $itemCount = null, $itemCount2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $metadata = null, $offerMetadata = null, $nature = null, $condition = null, $shippingAllowed = null, string $contentType = self::contentTypes['apiOffersGetCollection'][0])
    {
        return $this->apiOffersGetCollectionAsyncWithHttpInfo($page, $title, $publicUrl, $publicUrl2, $unitPrice, $unitPrice2, $itemCount, $itemCount2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $metadata, $offerMetadata, $nature, $condition, $shippingAllowed, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOffersGetCollectionAsyncWithHttpInfo
     *
     * Read issued Offers
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $title  (optional)
     * @param  string $publicUrl  (optional)
     * @param  string[] $publicUrl2  (optional)
     * @param  float $unitPrice  (optional)
     * @param  float[] $unitPrice2  (optional)
     * @param  int $itemCount  (optional)
     * @param  int[] $itemCount2  (optional)
     * @param  string $createdAtBefore  (optional)
     * @param  string $createdAtStrictlyBefore  (optional)
     * @param  string $createdAtAfter  (optional)
     * @param  string $createdAtStrictlyAfter  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $nature Filter on a limited subset of nature (optional)
     * @param  string $condition Filter on a limited subset of condition (optional)
     * @param  bool $shippingAllowed  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersGetCollectionAsyncWithHttpInfo($page = 1, $title = null, $publicUrl = null, $publicUrl2 = null, $unitPrice = null, $unitPrice2 = null, $itemCount = null, $itemCount2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $metadata = null, $offerMetadata = null, $nature = null, $condition = null, $shippingAllowed = null, string $contentType = self::contentTypes['apiOffersGetCollection'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\OfferCollectionRead[]';
        $request = $this->apiOffersGetCollectionRequest($page, $title, $publicUrl, $publicUrl2, $unitPrice, $unitPrice2, $itemCount, $itemCount2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $metadata, $offerMetadata, $nature, $condition, $shippingAllowed, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOffersGetCollection'
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $title  (optional)
     * @param  string $publicUrl  (optional)
     * @param  string[] $publicUrl2  (optional)
     * @param  float $unitPrice  (optional)
     * @param  float[] $unitPrice2  (optional)
     * @param  int $itemCount  (optional)
     * @param  int[] $itemCount2  (optional)
     * @param  string $createdAtBefore  (optional)
     * @param  string $createdAtStrictlyBefore  (optional)
     * @param  string $createdAtAfter  (optional)
     * @param  string $createdAtStrictlyAfter  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $nature Filter on a limited subset of nature (optional)
     * @param  string $condition Filter on a limited subset of condition (optional)
     * @param  bool $shippingAllowed  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiOffersGetCollectionRequest($page = 1, $title = null, $publicUrl = null, $publicUrl2 = null, $unitPrice = null, $unitPrice2 = null, $itemCount = null, $itemCount2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $metadata = null, $offerMetadata = null, $nature = null, $condition = null, $shippingAllowed = null, string $contentType = self::contentTypes['apiOffersGetCollection'][0])
    {



















        $resourcePath = '/offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $title,
            'title', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publicUrl,
            'publicUrl', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publicUrl2,
            'publicUrl[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unitPrice,
            'unitPrice', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unitPrice2,
            'unitPrice[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemCount,
            'itemCount', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemCount2,
            'itemCount[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdAtBefore,
            'createdAt[before]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdAtStrictlyBefore,
            'createdAt[strictly_before]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdAtAfter,
            'createdAt[after]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdAtStrictlyAfter,
            'createdAt[strictly_after]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadata,
            'metadata[]', // param base name
            'array', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offerMetadata,
            'offer.metadata[]', // param base name
            'array', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nature,
            'nature', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $condition,
            'condition', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shippingAllowed,
            'shippingAllowed', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOffersPost
     *
     * Create an Offer and retrieve url
     *
     * @param  \Tripartie\Tpdk\Model\OfferIndependentWrite $offerIndependentWrite The new Offer resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\OfferPostCreationRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiOffersPost($offerIndependentWrite, string $contentType = self::contentTypes['apiOffersPost'][0])
    {
        list($response) = $this->apiOffersPostWithHttpInfo($offerIndependentWrite, $contentType);
        return $response;
    }

    /**
     * Operation apiOffersPostWithHttpInfo
     *
     * Create an Offer and retrieve url
     *
     * @param  \Tripartie\Tpdk\Model\OfferIndependentWrite $offerIndependentWrite The new Offer resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\OfferPostCreationRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOffersPostWithHttpInfo($offerIndependentWrite, string $contentType = self::contentTypes['apiOffersPost'][0])
    {
        $request = $this->apiOffersPostRequest($offerIndependentWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Tripartie\Tpdk\Model\OfferPostCreationRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\OfferPostCreationRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\OfferPostCreationRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Tripartie\Tpdk\Model\InvalidQueryError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\InvalidQueryError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\InvalidQueryError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Tripartie\Tpdk\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UnprocessableEntity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\OfferPostCreationRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\OfferPostCreationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\InvalidQueryError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOffersPostAsync
     *
     * Create an Offer and retrieve url
     *
     * @param  \Tripartie\Tpdk\Model\OfferIndependentWrite $offerIndependentWrite The new Offer resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersPostAsync($offerIndependentWrite, string $contentType = self::contentTypes['apiOffersPost'][0])
    {
        return $this->apiOffersPostAsyncWithHttpInfo($offerIndependentWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOffersPostAsyncWithHttpInfo
     *
     * Create an Offer and retrieve url
     *
     * @param  \Tripartie\Tpdk\Model\OfferIndependentWrite $offerIndependentWrite The new Offer resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersPostAsyncWithHttpInfo($offerIndependentWrite, string $contentType = self::contentTypes['apiOffersPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\OfferPostCreationRead';
        $request = $this->apiOffersPostRequest($offerIndependentWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOffersPost'
     *
     * @param  \Tripartie\Tpdk\Model\OfferIndependentWrite $offerIndependentWrite The new Offer resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiOffersPostRequest($offerIndependentWrite, string $contentType = self::contentTypes['apiOffersPost'][0])
    {

        // verify the required parameter 'offerIndependentWrite' is set
        if ($offerIndependentWrite === null || (is_array($offerIndependentWrite) && count($offerIndependentWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offerIndependentWrite when calling apiOffersPost'
            );
        }


        $resourcePath = '/offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($offerIndependentWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($offerIndependentWrite));
            } else {
                $httpBody = $offerIndependentWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOffersUlidGet
     *
     * Read an Offer
     *
     * @param  string $ulid Offer identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\OfferRead|\Tripartie\Tpdk\Model\NotFoundError|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiOffersUlidGet($ulid, string $contentType = self::contentTypes['apiOffersUlidGet'][0])
    {
        list($response) = $this->apiOffersUlidGetWithHttpInfo($ulid, $contentType);
        return $response;
    }

    /**
     * Operation apiOffersUlidGetWithHttpInfo
     *
     * Read an Offer
     *
     * @param  string $ulid Offer identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\OfferRead|\Tripartie\Tpdk\Model\NotFoundError|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOffersUlidGetWithHttpInfo($ulid, string $contentType = self::contentTypes['apiOffersUlidGet'][0])
    {
        $request = $this->apiOffersUlidGetRequest($ulid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\OfferRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\OfferRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\OfferRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tripartie\Tpdk\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\OfferRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\OfferRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOffersUlidGetAsync
     *
     * Read an Offer
     *
     * @param  string $ulid Offer identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersUlidGetAsync($ulid, string $contentType = self::contentTypes['apiOffersUlidGet'][0])
    {
        return $this->apiOffersUlidGetAsyncWithHttpInfo($ulid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOffersUlidGetAsyncWithHttpInfo
     *
     * Read an Offer
     *
     * @param  string $ulid Offer identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersUlidGetAsyncWithHttpInfo($ulid, string $contentType = self::contentTypes['apiOffersUlidGet'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\OfferRead';
        $request = $this->apiOffersUlidGetRequest($ulid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOffersUlidGet'
     *
     * @param  string $ulid Offer identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiOffersUlidGetRequest($ulid, string $contentType = self::contentTypes['apiOffersUlidGet'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiOffersUlidGet'
            );
        }


        $resourcePath = '/offers/{ulid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOffersUlidmediasIdDelete
     *
     * Removes the Media resource.
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidmediasIdDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiOffersUlidmediasIdDelete($ulid, $id, string $contentType = self::contentTypes['apiOffersUlidmediasIdDelete'][0])
    {
        $this->apiOffersUlidmediasIdDeleteWithHttpInfo($ulid, $id, $contentType);
    }

    /**
     * Operation apiOffersUlidmediasIdDeleteWithHttpInfo
     *
     * Removes the Media resource.
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidmediasIdDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOffersUlidmediasIdDeleteWithHttpInfo($ulid, $id, string $contentType = self::contentTypes['apiOffersUlidmediasIdDelete'][0])
    {
        $request = $this->apiOffersUlidmediasIdDeleteRequest($ulid, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOffersUlidmediasIdDeleteAsync
     *
     * Removes the Media resource.
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidmediasIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersUlidmediasIdDeleteAsync($ulid, $id, string $contentType = self::contentTypes['apiOffersUlidmediasIdDelete'][0])
    {
        return $this->apiOffersUlidmediasIdDeleteAsyncWithHttpInfo($ulid, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOffersUlidmediasIdDeleteAsyncWithHttpInfo
     *
     * Removes the Media resource.
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidmediasIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersUlidmediasIdDeleteAsyncWithHttpInfo($ulid, $id, string $contentType = self::contentTypes['apiOffersUlidmediasIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiOffersUlidmediasIdDeleteRequest($ulid, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOffersUlidmediasIdDelete'
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidmediasIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiOffersUlidmediasIdDeleteRequest($ulid, $id, string $contentType = self::contentTypes['apiOffersUlidmediasIdDelete'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiOffersUlidmediasIdDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiOffersUlidmediasIdDelete'
            );
        }


        $resourcePath = '/offers/{ulid}/medias/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOffersUlidmediasPost
     *
     * Upload a picture for a given Offer
     *
     * @param  string $ulid  (required)
     * @param  \SplFileObject $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidmediasPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\MediaRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiOffersUlidmediasPost($ulid, $file = null, string $contentType = self::contentTypes['apiOffersUlidmediasPost'][0])
    {
        list($response) = $this->apiOffersUlidmediasPostWithHttpInfo($ulid, $file, $contentType);
        return $response;
    }

    /**
     * Operation apiOffersUlidmediasPostWithHttpInfo
     *
     * Upload a picture for a given Offer
     *
     * @param  string $ulid  (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidmediasPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\MediaRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOffersUlidmediasPostWithHttpInfo($ulid, $file = null, string $contentType = self::contentTypes['apiOffersUlidmediasPost'][0])
    {
        $request = $this->apiOffersUlidmediasPostRequest($ulid, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Tripartie\Tpdk\Model\MediaRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\MediaRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\MediaRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Tripartie\Tpdk\Model\InvalidQueryError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\InvalidQueryError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\InvalidQueryError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Tripartie\Tpdk\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UnprocessableEntity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\MediaRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\MediaRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\InvalidQueryError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOffersUlidmediasPostAsync
     *
     * Upload a picture for a given Offer
     *
     * @param  string $ulid  (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidmediasPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersUlidmediasPostAsync($ulid, $file = null, string $contentType = self::contentTypes['apiOffersUlidmediasPost'][0])
    {
        return $this->apiOffersUlidmediasPostAsyncWithHttpInfo($ulid, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOffersUlidmediasPostAsyncWithHttpInfo
     *
     * Upload a picture for a given Offer
     *
     * @param  string $ulid  (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidmediasPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersUlidmediasPostAsyncWithHttpInfo($ulid, $file = null, string $contentType = self::contentTypes['apiOffersUlidmediasPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\MediaRead';
        $request = $this->apiOffersUlidmediasPostRequest($ulid, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOffersUlidmediasPost'
     *
     * @param  string $ulid  (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidmediasPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiOffersUlidmediasPostRequest($ulid, $file = null, string $contentType = self::contentTypes['apiOffersUlidmediasPost'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiOffersUlidmediasPost'
            );
        }



        $resourcePath = '/offers/{ulid}/medias';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOffersUlidtransactionsGetCollection
     *
     * Retrieve Payment Intents for Offer
     *
     * @param  string $ulid Transaction identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderStatus  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $status Filter on a limited subset of status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidtransactionsGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\TransactionCollectionRead[]|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiOffersUlidtransactionsGetCollection($ulid, $page = 1, $orderStatus = null, $metadata = null, $status = null, string $contentType = self::contentTypes['apiOffersUlidtransactionsGetCollection'][0])
    {
        list($response) = $this->apiOffersUlidtransactionsGetCollectionWithHttpInfo($ulid, $page, $orderStatus, $metadata, $status, $contentType);
        return $response;
    }

    /**
     * Operation apiOffersUlidtransactionsGetCollectionWithHttpInfo
     *
     * Retrieve Payment Intents for Offer
     *
     * @param  string $ulid Transaction identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderStatus  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $status Filter on a limited subset of status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidtransactionsGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\TransactionCollectionRead[]|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOffersUlidtransactionsGetCollectionWithHttpInfo($ulid, $page = 1, $orderStatus = null, $metadata = null, $status = null, string $contentType = self::contentTypes['apiOffersUlidtransactionsGetCollection'][0])
    {
        $request = $this->apiOffersUlidtransactionsGetCollectionRequest($ulid, $page, $orderStatus, $metadata, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\TransactionCollectionRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\TransactionCollectionRead[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\TransactionCollectionRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\TransactionCollectionRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\TransactionCollectionRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOffersUlidtransactionsGetCollectionAsync
     *
     * Retrieve Payment Intents for Offer
     *
     * @param  string $ulid Transaction identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderStatus  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $status Filter on a limited subset of status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidtransactionsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersUlidtransactionsGetCollectionAsync($ulid, $page = 1, $orderStatus = null, $metadata = null, $status = null, string $contentType = self::contentTypes['apiOffersUlidtransactionsGetCollection'][0])
    {
        return $this->apiOffersUlidtransactionsGetCollectionAsyncWithHttpInfo($ulid, $page, $orderStatus, $metadata, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOffersUlidtransactionsGetCollectionAsyncWithHttpInfo
     *
     * Retrieve Payment Intents for Offer
     *
     * @param  string $ulid Transaction identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderStatus  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $status Filter on a limited subset of status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidtransactionsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersUlidtransactionsGetCollectionAsyncWithHttpInfo($ulid, $page = 1, $orderStatus = null, $metadata = null, $status = null, string $contentType = self::contentTypes['apiOffersUlidtransactionsGetCollection'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\TransactionCollectionRead[]';
        $request = $this->apiOffersUlidtransactionsGetCollectionRequest($ulid, $page, $orderStatus, $metadata, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOffersUlidtransactionsGetCollection'
     *
     * @param  string $ulid Transaction identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderStatus  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $status Filter on a limited subset of status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidtransactionsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiOffersUlidtransactionsGetCollectionRequest($ulid, $page = 1, $orderStatus = null, $metadata = null, $status = null, string $contentType = self::contentTypes['apiOffersUlidtransactionsGetCollection'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiOffersUlidtransactionsGetCollection'
            );
        }






        $resourcePath = '/offers/{ulid}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderStatus,
            'order[status]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadata,
            'metadata[]', // param base name
            'array', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOffersUlidtransactionsIdevaluationsPost
     *
     * Submit an Evaluation for the Offer
     *
     * @param  string $ulid Evaluation identifier (required)
     * @param  string $id Evaluation identifier (required)
     * @param  \Tripartie\Tpdk\Model\EvaluationWrite $evaluationWrite The new Evaluation resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidtransactionsIdevaluationsPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\EvaluationRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiOffersUlidtransactionsIdevaluationsPost($ulid, $id, $evaluationWrite, string $contentType = self::contentTypes['apiOffersUlidtransactionsIdevaluationsPost'][0])
    {
        list($response) = $this->apiOffersUlidtransactionsIdevaluationsPostWithHttpInfo($ulid, $id, $evaluationWrite, $contentType);
        return $response;
    }

    /**
     * Operation apiOffersUlidtransactionsIdevaluationsPostWithHttpInfo
     *
     * Submit an Evaluation for the Offer
     *
     * @param  string $ulid Evaluation identifier (required)
     * @param  string $id Evaluation identifier (required)
     * @param  \Tripartie\Tpdk\Model\EvaluationWrite $evaluationWrite The new Evaluation resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidtransactionsIdevaluationsPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\EvaluationRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOffersUlidtransactionsIdevaluationsPostWithHttpInfo($ulid, $id, $evaluationWrite, string $contentType = self::contentTypes['apiOffersUlidtransactionsIdevaluationsPost'][0])
    {
        $request = $this->apiOffersUlidtransactionsIdevaluationsPostRequest($ulid, $id, $evaluationWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Tripartie\Tpdk\Model\EvaluationRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\EvaluationRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\EvaluationRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Tripartie\Tpdk\Model\InvalidQueryError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\InvalidQueryError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\InvalidQueryError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Tripartie\Tpdk\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UnprocessableEntity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\EvaluationRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\EvaluationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\InvalidQueryError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOffersUlidtransactionsIdevaluationsPostAsync
     *
     * Submit an Evaluation for the Offer
     *
     * @param  string $ulid Evaluation identifier (required)
     * @param  string $id Evaluation identifier (required)
     * @param  \Tripartie\Tpdk\Model\EvaluationWrite $evaluationWrite The new Evaluation resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidtransactionsIdevaluationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersUlidtransactionsIdevaluationsPostAsync($ulid, $id, $evaluationWrite, string $contentType = self::contentTypes['apiOffersUlidtransactionsIdevaluationsPost'][0])
    {
        return $this->apiOffersUlidtransactionsIdevaluationsPostAsyncWithHttpInfo($ulid, $id, $evaluationWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOffersUlidtransactionsIdevaluationsPostAsyncWithHttpInfo
     *
     * Submit an Evaluation for the Offer
     *
     * @param  string $ulid Evaluation identifier (required)
     * @param  string $id Evaluation identifier (required)
     * @param  \Tripartie\Tpdk\Model\EvaluationWrite $evaluationWrite The new Evaluation resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidtransactionsIdevaluationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersUlidtransactionsIdevaluationsPostAsyncWithHttpInfo($ulid, $id, $evaluationWrite, string $contentType = self::contentTypes['apiOffersUlidtransactionsIdevaluationsPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\EvaluationRead';
        $request = $this->apiOffersUlidtransactionsIdevaluationsPostRequest($ulid, $id, $evaluationWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOffersUlidtransactionsIdevaluationsPost'
     *
     * @param  string $ulid Evaluation identifier (required)
     * @param  string $id Evaluation identifier (required)
     * @param  \Tripartie\Tpdk\Model\EvaluationWrite $evaluationWrite The new Evaluation resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidtransactionsIdevaluationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiOffersUlidtransactionsIdevaluationsPostRequest($ulid, $id, $evaluationWrite, string $contentType = self::contentTypes['apiOffersUlidtransactionsIdevaluationsPost'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiOffersUlidtransactionsIdevaluationsPost'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiOffersUlidtransactionsIdevaluationsPost'
            );
        }

        // verify the required parameter 'evaluationWrite' is set
        if ($evaluationWrite === null || (is_array($evaluationWrite) && count($evaluationWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evaluationWrite when calling apiOffersUlidtransactionsIdevaluationsPost'
            );
        }


        $resourcePath = '/offers/{ulid}/transactions/{id}/evaluations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($evaluationWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($evaluationWrite));
            } else {
                $httpBody = $evaluationWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOffersUlidtransactionsPost
     *
     * Create a Payment Intent for Offer
     *
     * @param  string $ulid Transaction identifier (required)
     * @param  object $body The new Transaction resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidtransactionsPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\TransactionRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiOffersUlidtransactionsPost($ulid, $body, string $contentType = self::contentTypes['apiOffersUlidtransactionsPost'][0])
    {
        list($response) = $this->apiOffersUlidtransactionsPostWithHttpInfo($ulid, $body, $contentType);
        return $response;
    }

    /**
     * Operation apiOffersUlidtransactionsPostWithHttpInfo
     *
     * Create a Payment Intent for Offer
     *
     * @param  string $ulid Transaction identifier (required)
     * @param  object $body The new Transaction resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidtransactionsPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\TransactionRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOffersUlidtransactionsPostWithHttpInfo($ulid, $body, string $contentType = self::contentTypes['apiOffersUlidtransactionsPost'][0])
    {
        $request = $this->apiOffersUlidtransactionsPostRequest($ulid, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Tripartie\Tpdk\Model\TransactionRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\TransactionRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\TransactionRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Tripartie\Tpdk\Model\InvalidQueryError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\InvalidQueryError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\InvalidQueryError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Tripartie\Tpdk\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UnprocessableEntity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\TransactionRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\TransactionRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\InvalidQueryError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOffersUlidtransactionsPostAsync
     *
     * Create a Payment Intent for Offer
     *
     * @param  string $ulid Transaction identifier (required)
     * @param  object $body The new Transaction resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidtransactionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersUlidtransactionsPostAsync($ulid, $body, string $contentType = self::contentTypes['apiOffersUlidtransactionsPost'][0])
    {
        return $this->apiOffersUlidtransactionsPostAsyncWithHttpInfo($ulid, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOffersUlidtransactionsPostAsyncWithHttpInfo
     *
     * Create a Payment Intent for Offer
     *
     * @param  string $ulid Transaction identifier (required)
     * @param  object $body The new Transaction resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidtransactionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOffersUlidtransactionsPostAsyncWithHttpInfo($ulid, $body, string $contentType = self::contentTypes['apiOffersUlidtransactionsPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\TransactionRead';
        $request = $this->apiOffersUlidtransactionsPostRequest($ulid, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOffersUlidtransactionsPost'
     *
     * @param  string $ulid Transaction identifier (required)
     * @param  object $body The new Transaction resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOffersUlidtransactionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiOffersUlidtransactionsPostRequest($ulid, $body, string $contentType = self::contentTypes['apiOffersUlidtransactionsPost'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiOffersUlidtransactionsPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiOffersUlidtransactionsPost'
            );
        }


        $resourcePath = '/offers/{ulid}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPersonasIdoffersDelete
     *
     * Revoke an Offer for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiPersonasIdoffersDelete($id, string $contentType = self::contentTypes['apiPersonasIdoffersDelete'][0])
    {
        $this->apiPersonasIdoffersDeleteWithHttpInfo($id, $contentType);
    }

    /**
     * Operation apiPersonasIdoffersDeleteWithHttpInfo
     *
     * Revoke an Offer for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiPersonasIdoffersDeleteWithHttpInfo($id, string $contentType = self::contentTypes['apiPersonasIdoffersDelete'][0])
    {
        $request = $this->apiPersonasIdoffersDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPersonasIdoffersDeleteAsync
     *
     * Revoke an Offer for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasIdoffersDeleteAsync($id, string $contentType = self::contentTypes['apiPersonasIdoffersDelete'][0])
    {
        return $this->apiPersonasIdoffersDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPersonasIdoffersDeleteAsyncWithHttpInfo
     *
     * Revoke an Offer for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasIdoffersDeleteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiPersonasIdoffersDelete'][0])
    {
        $returnType = '';
        $request = $this->apiPersonasIdoffersDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPersonasIdoffersDelete'
     *
     * @param  string $id Offer identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiPersonasIdoffersDeleteRequest($id, string $contentType = self::contentTypes['apiPersonasIdoffersDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiPersonasIdoffersDelete'
            );
        }


        $resourcePath = '/personas/{id}/offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPersonasIdoffersGetCollection
     *
     * List or Search Offers for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $title  (optional)
     * @param  string $publicUrl  (optional)
     * @param  string[] $publicUrl2  (optional)
     * @param  float $unitPrice  (optional)
     * @param  float[] $unitPrice2  (optional)
     * @param  int $itemCount  (optional)
     * @param  int[] $itemCount2  (optional)
     * @param  string $createdAtBefore  (optional)
     * @param  string $createdAtStrictlyBefore  (optional)
     * @param  string $createdAtAfter  (optional)
     * @param  string $createdAtStrictlyAfter  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $nature Filter on a limited subset of nature (optional)
     * @param  string $condition Filter on a limited subset of condition (optional)
     * @param  bool $shippingAllowed  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\OfferCollectionRead[]|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiPersonasIdoffersGetCollection($id, $page = 1, $title = null, $publicUrl = null, $publicUrl2 = null, $unitPrice = null, $unitPrice2 = null, $itemCount = null, $itemCount2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $metadata = null, $offerMetadata = null, $nature = null, $condition = null, $shippingAllowed = null, string $contentType = self::contentTypes['apiPersonasIdoffersGetCollection'][0])
    {
        list($response) = $this->apiPersonasIdoffersGetCollectionWithHttpInfo($id, $page, $title, $publicUrl, $publicUrl2, $unitPrice, $unitPrice2, $itemCount, $itemCount2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $metadata, $offerMetadata, $nature, $condition, $shippingAllowed, $contentType);
        return $response;
    }

    /**
     * Operation apiPersonasIdoffersGetCollectionWithHttpInfo
     *
     * List or Search Offers for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $title  (optional)
     * @param  string $publicUrl  (optional)
     * @param  string[] $publicUrl2  (optional)
     * @param  float $unitPrice  (optional)
     * @param  float[] $unitPrice2  (optional)
     * @param  int $itemCount  (optional)
     * @param  int[] $itemCount2  (optional)
     * @param  string $createdAtBefore  (optional)
     * @param  string $createdAtStrictlyBefore  (optional)
     * @param  string $createdAtAfter  (optional)
     * @param  string $createdAtStrictlyAfter  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $nature Filter on a limited subset of nature (optional)
     * @param  string $condition Filter on a limited subset of condition (optional)
     * @param  bool $shippingAllowed  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\OfferCollectionRead[]|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiPersonasIdoffersGetCollectionWithHttpInfo($id, $page = 1, $title = null, $publicUrl = null, $publicUrl2 = null, $unitPrice = null, $unitPrice2 = null, $itemCount = null, $itemCount2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $metadata = null, $offerMetadata = null, $nature = null, $condition = null, $shippingAllowed = null, string $contentType = self::contentTypes['apiPersonasIdoffersGetCollection'][0])
    {
        $request = $this->apiPersonasIdoffersGetCollectionRequest($id, $page, $title, $publicUrl, $publicUrl2, $unitPrice, $unitPrice2, $itemCount, $itemCount2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $metadata, $offerMetadata, $nature, $condition, $shippingAllowed, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\OfferCollectionRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\OfferCollectionRead[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\OfferCollectionRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\OfferCollectionRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\OfferCollectionRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPersonasIdoffersGetCollectionAsync
     *
     * List or Search Offers for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $title  (optional)
     * @param  string $publicUrl  (optional)
     * @param  string[] $publicUrl2  (optional)
     * @param  float $unitPrice  (optional)
     * @param  float[] $unitPrice2  (optional)
     * @param  int $itemCount  (optional)
     * @param  int[] $itemCount2  (optional)
     * @param  string $createdAtBefore  (optional)
     * @param  string $createdAtStrictlyBefore  (optional)
     * @param  string $createdAtAfter  (optional)
     * @param  string $createdAtStrictlyAfter  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $nature Filter on a limited subset of nature (optional)
     * @param  string $condition Filter on a limited subset of condition (optional)
     * @param  bool $shippingAllowed  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasIdoffersGetCollectionAsync($id, $page = 1, $title = null, $publicUrl = null, $publicUrl2 = null, $unitPrice = null, $unitPrice2 = null, $itemCount = null, $itemCount2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $metadata = null, $offerMetadata = null, $nature = null, $condition = null, $shippingAllowed = null, string $contentType = self::contentTypes['apiPersonasIdoffersGetCollection'][0])
    {
        return $this->apiPersonasIdoffersGetCollectionAsyncWithHttpInfo($id, $page, $title, $publicUrl, $publicUrl2, $unitPrice, $unitPrice2, $itemCount, $itemCount2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $metadata, $offerMetadata, $nature, $condition, $shippingAllowed, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPersonasIdoffersGetCollectionAsyncWithHttpInfo
     *
     * List or Search Offers for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $title  (optional)
     * @param  string $publicUrl  (optional)
     * @param  string[] $publicUrl2  (optional)
     * @param  float $unitPrice  (optional)
     * @param  float[] $unitPrice2  (optional)
     * @param  int $itemCount  (optional)
     * @param  int[] $itemCount2  (optional)
     * @param  string $createdAtBefore  (optional)
     * @param  string $createdAtStrictlyBefore  (optional)
     * @param  string $createdAtAfter  (optional)
     * @param  string $createdAtStrictlyAfter  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $nature Filter on a limited subset of nature (optional)
     * @param  string $condition Filter on a limited subset of condition (optional)
     * @param  bool $shippingAllowed  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasIdoffersGetCollectionAsyncWithHttpInfo($id, $page = 1, $title = null, $publicUrl = null, $publicUrl2 = null, $unitPrice = null, $unitPrice2 = null, $itemCount = null, $itemCount2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $metadata = null, $offerMetadata = null, $nature = null, $condition = null, $shippingAllowed = null, string $contentType = self::contentTypes['apiPersonasIdoffersGetCollection'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\OfferCollectionRead[]';
        $request = $this->apiPersonasIdoffersGetCollectionRequest($id, $page, $title, $publicUrl, $publicUrl2, $unitPrice, $unitPrice2, $itemCount, $itemCount2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $metadata, $offerMetadata, $nature, $condition, $shippingAllowed, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPersonasIdoffersGetCollection'
     *
     * @param  string $id Offer identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $title  (optional)
     * @param  string $publicUrl  (optional)
     * @param  string[] $publicUrl2  (optional)
     * @param  float $unitPrice  (optional)
     * @param  float[] $unitPrice2  (optional)
     * @param  int $itemCount  (optional)
     * @param  int[] $itemCount2  (optional)
     * @param  string $createdAtBefore  (optional)
     * @param  string $createdAtStrictlyBefore  (optional)
     * @param  string $createdAtAfter  (optional)
     * @param  string $createdAtStrictlyAfter  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string[] $offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $nature Filter on a limited subset of nature (optional)
     * @param  string $condition Filter on a limited subset of condition (optional)
     * @param  bool $shippingAllowed  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiPersonasIdoffersGetCollectionRequest($id, $page = 1, $title = null, $publicUrl = null, $publicUrl2 = null, $unitPrice = null, $unitPrice2 = null, $itemCount = null, $itemCount2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $metadata = null, $offerMetadata = null, $nature = null, $condition = null, $shippingAllowed = null, string $contentType = self::contentTypes['apiPersonasIdoffersGetCollection'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiPersonasIdoffersGetCollection'
            );
        }



















        $resourcePath = '/personas/{id}/offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $title,
            'title', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publicUrl,
            'publicUrl', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publicUrl2,
            'publicUrl[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unitPrice,
            'unitPrice', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unitPrice2,
            'unitPrice[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemCount,
            'itemCount', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemCount2,
            'itemCount[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdAtBefore,
            'createdAt[before]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdAtStrictlyBefore,
            'createdAt[strictly_before]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdAtAfter,
            'createdAt[after]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdAtStrictlyAfter,
            'createdAt[strictly_after]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadata,
            'metadata[]', // param base name
            'array', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offerMetadata,
            'offer.metadata[]', // param base name
            'array', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nature,
            'nature', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $condition,
            'condition', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shippingAllowed,
            'shippingAllowed', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPersonasIdoffersPatch
     *
     * Update an Offer for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  \Tripartie\Tpdk\Model\OfferUpdate $offerUpdate The updated Offer resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersPatch'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\OfferRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\NotFoundError|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiPersonasIdoffersPatch($id, $offerUpdate, string $contentType = self::contentTypes['apiPersonasIdoffersPatch'][0])
    {
        list($response) = $this->apiPersonasIdoffersPatchWithHttpInfo($id, $offerUpdate, $contentType);
        return $response;
    }

    /**
     * Operation apiPersonasIdoffersPatchWithHttpInfo
     *
     * Update an Offer for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  \Tripartie\Tpdk\Model\OfferUpdate $offerUpdate The updated Offer resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersPatch'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\OfferRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\NotFoundError|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiPersonasIdoffersPatchWithHttpInfo($id, $offerUpdate, string $contentType = self::contentTypes['apiPersonasIdoffersPatch'][0])
    {
        $request = $this->apiPersonasIdoffersPatchRequest($id, $offerUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\OfferRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\OfferRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\OfferRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Tripartie\Tpdk\Model\InvalidQueryError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\InvalidQueryError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\InvalidQueryError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Tripartie\Tpdk\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UnprocessableEntity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tripartie\Tpdk\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\OfferRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\OfferRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\InvalidQueryError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPersonasIdoffersPatchAsync
     *
     * Update an Offer for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  \Tripartie\Tpdk\Model\OfferUpdate $offerUpdate The updated Offer resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasIdoffersPatchAsync($id, $offerUpdate, string $contentType = self::contentTypes['apiPersonasIdoffersPatch'][0])
    {
        return $this->apiPersonasIdoffersPatchAsyncWithHttpInfo($id, $offerUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPersonasIdoffersPatchAsyncWithHttpInfo
     *
     * Update an Offer for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  \Tripartie\Tpdk\Model\OfferUpdate $offerUpdate The updated Offer resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasIdoffersPatchAsyncWithHttpInfo($id, $offerUpdate, string $contentType = self::contentTypes['apiPersonasIdoffersPatch'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\OfferRead';
        $request = $this->apiPersonasIdoffersPatchRequest($id, $offerUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPersonasIdoffersPatch'
     *
     * @param  string $id Offer identifier (required)
     * @param  \Tripartie\Tpdk\Model\OfferUpdate $offerUpdate The updated Offer resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiPersonasIdoffersPatchRequest($id, $offerUpdate, string $contentType = self::contentTypes['apiPersonasIdoffersPatch'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiPersonasIdoffersPatch'
            );
        }

        // verify the required parameter 'offerUpdate' is set
        if ($offerUpdate === null || (is_array($offerUpdate) && count($offerUpdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offerUpdate when calling apiPersonasIdoffersPatch'
            );
        }


        $resourcePath = '/personas/{id}/offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($offerUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($offerUpdate));
            } else {
                $httpBody = $offerUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPersonasIdoffersPost
     *
     * Create an Offer for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  \Tripartie\Tpdk\Model\OfferWrite $offerWrite The new Offer resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\OfferPostCreationRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiPersonasIdoffersPost($id, $offerWrite, string $contentType = self::contentTypes['apiPersonasIdoffersPost'][0])
    {
        list($response) = $this->apiPersonasIdoffersPostWithHttpInfo($id, $offerWrite, $contentType);
        return $response;
    }

    /**
     * Operation apiPersonasIdoffersPostWithHttpInfo
     *
     * Create an Offer for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  \Tripartie\Tpdk\Model\OfferWrite $offerWrite The new Offer resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\OfferPostCreationRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiPersonasIdoffersPostWithHttpInfo($id, $offerWrite, string $contentType = self::contentTypes['apiPersonasIdoffersPost'][0])
    {
        $request = $this->apiPersonasIdoffersPostRequest($id, $offerWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Tripartie\Tpdk\Model\OfferPostCreationRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\OfferPostCreationRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\OfferPostCreationRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Tripartie\Tpdk\Model\InvalidQueryError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\InvalidQueryError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\InvalidQueryError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Tripartie\Tpdk\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UnprocessableEntity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\OfferPostCreationRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\OfferPostCreationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\InvalidQueryError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPersonasIdoffersPostAsync
     *
     * Create an Offer for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  \Tripartie\Tpdk\Model\OfferWrite $offerWrite The new Offer resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasIdoffersPostAsync($id, $offerWrite, string $contentType = self::contentTypes['apiPersonasIdoffersPost'][0])
    {
        return $this->apiPersonasIdoffersPostAsyncWithHttpInfo($id, $offerWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPersonasIdoffersPostAsyncWithHttpInfo
     *
     * Create an Offer for given Persona
     *
     * @param  string $id Offer identifier (required)
     * @param  \Tripartie\Tpdk\Model\OfferWrite $offerWrite The new Offer resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasIdoffersPostAsyncWithHttpInfo($id, $offerWrite, string $contentType = self::contentTypes['apiPersonasIdoffersPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\OfferPostCreationRead';
        $request = $this->apiPersonasIdoffersPostRequest($id, $offerWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPersonasIdoffersPost'
     *
     * @param  string $id Offer identifier (required)
     * @param  \Tripartie\Tpdk\Model\OfferWrite $offerWrite The new Offer resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasIdoffersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiPersonasIdoffersPostRequest($id, $offerWrite, string $contentType = self::contentTypes['apiPersonasIdoffersPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiPersonasIdoffersPost'
            );
        }

        // verify the required parameter 'offerWrite' is set
        if ($offerWrite === null || (is_array($offerWrite) && count($offerWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offerWrite when calling apiPersonasIdoffersPost'
            );
        }


        $resourcePath = '/personas/{id}/offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($offerWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($offerWrite));
            } else {
                $httpBody = $offerWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsGetCollection
     *
     * Retrieves the collection of Transaction resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderStatus  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $status Filter on a limited subset of status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\TransactionCollectionRead[]|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiTransactionsGetCollection($page = 1, $orderStatus = null, $metadata = null, $status = null, string $contentType = self::contentTypes['apiTransactionsGetCollection'][0])
    {
        list($response) = $this->apiTransactionsGetCollectionWithHttpInfo($page, $orderStatus, $metadata, $status, $contentType);
        return $response;
    }

    /**
     * Operation apiTransactionsGetCollectionWithHttpInfo
     *
     * Retrieves the collection of Transaction resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderStatus  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $status Filter on a limited subset of status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\TransactionCollectionRead[]|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsGetCollectionWithHttpInfo($page = 1, $orderStatus = null, $metadata = null, $status = null, string $contentType = self::contentTypes['apiTransactionsGetCollection'][0])
    {
        $request = $this->apiTransactionsGetCollectionRequest($page, $orderStatus, $metadata, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\TransactionCollectionRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\TransactionCollectionRead[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\TransactionCollectionRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\TransactionCollectionRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\TransactionCollectionRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTransactionsGetCollectionAsync
     *
     * Retrieves the collection of Transaction resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderStatus  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $status Filter on a limited subset of status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsGetCollectionAsync($page = 1, $orderStatus = null, $metadata = null, $status = null, string $contentType = self::contentTypes['apiTransactionsGetCollection'][0])
    {
        return $this->apiTransactionsGetCollectionAsyncWithHttpInfo($page, $orderStatus, $metadata, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsGetCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Transaction resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderStatus  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $status Filter on a limited subset of status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsGetCollectionAsyncWithHttpInfo($page = 1, $orderStatus = null, $metadata = null, $status = null, string $contentType = self::contentTypes['apiTransactionsGetCollection'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\TransactionCollectionRead[]';
        $request = $this->apiTransactionsGetCollectionRequest($page, $orderStatus, $metadata, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsGetCollection'
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderStatus  (optional)
     * @param  string[] $metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param  string $status Filter on a limited subset of status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsGetCollectionRequest($page = 1, $orderStatus = null, $metadata = null, $status = null, string $contentType = self::contentTypes['apiTransactionsGetCollection'][0])
    {






        $resourcePath = '/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderStatus,
            'order[status]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadata,
            'metadata[]', // param base name
            'array', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsUliddisputeDelete
     *
     * Abandon claims on Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputeDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiTransactionsUliddisputeDelete($ulid, string $contentType = self::contentTypes['apiTransactionsUliddisputeDelete'][0])
    {
        $this->apiTransactionsUliddisputeDeleteWithHttpInfo($ulid, $contentType);
    }

    /**
     * Operation apiTransactionsUliddisputeDeleteWithHttpInfo
     *
     * Abandon claims on Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputeDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsUliddisputeDeleteWithHttpInfo($ulid, string $contentType = self::contentTypes['apiTransactionsUliddisputeDelete'][0])
    {
        $request = $this->apiTransactionsUliddisputeDeleteRequest($ulid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTransactionsUliddisputeDeleteAsync
     *
     * Abandon claims on Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputeDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsUliddisputeDeleteAsync($ulid, string $contentType = self::contentTypes['apiTransactionsUliddisputeDelete'][0])
    {
        return $this->apiTransactionsUliddisputeDeleteAsyncWithHttpInfo($ulid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsUliddisputeDeleteAsyncWithHttpInfo
     *
     * Abandon claims on Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputeDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsUliddisputeDeleteAsyncWithHttpInfo($ulid, string $contentType = self::contentTypes['apiTransactionsUliddisputeDelete'][0])
    {
        $returnType = '';
        $request = $this->apiTransactionsUliddisputeDeleteRequest($ulid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsUliddisputeDelete'
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputeDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsUliddisputeDeleteRequest($ulid, string $contentType = self::contentTypes['apiTransactionsUliddisputeDelete'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiTransactionsUliddisputeDelete'
            );
        }


        $resourcePath = '/transactions/{ulid}/dispute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsUliddisputeGet
     *
     * Read Dispute from existing Transaction
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputeGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\DisputeRead|\Tripartie\Tpdk\Model\NotFoundError|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiTransactionsUliddisputeGet($ulid, string $contentType = self::contentTypes['apiTransactionsUliddisputeGet'][0])
    {
        list($response) = $this->apiTransactionsUliddisputeGetWithHttpInfo($ulid, $contentType);
        return $response;
    }

    /**
     * Operation apiTransactionsUliddisputeGetWithHttpInfo
     *
     * Read Dispute from existing Transaction
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputeGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\DisputeRead|\Tripartie\Tpdk\Model\NotFoundError|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsUliddisputeGetWithHttpInfo($ulid, string $contentType = self::contentTypes['apiTransactionsUliddisputeGet'][0])
    {
        $request = $this->apiTransactionsUliddisputeGetRequest($ulid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\DisputeRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\DisputeRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\DisputeRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tripartie\Tpdk\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\DisputeRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\DisputeRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTransactionsUliddisputeGetAsync
     *
     * Read Dispute from existing Transaction
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsUliddisputeGetAsync($ulid, string $contentType = self::contentTypes['apiTransactionsUliddisputeGet'][0])
    {
        return $this->apiTransactionsUliddisputeGetAsyncWithHttpInfo($ulid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsUliddisputeGetAsyncWithHttpInfo
     *
     * Read Dispute from existing Transaction
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsUliddisputeGetAsyncWithHttpInfo($ulid, string $contentType = self::contentTypes['apiTransactionsUliddisputeGet'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\DisputeRead';
        $request = $this->apiTransactionsUliddisputeGetRequest($ulid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsUliddisputeGet'
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsUliddisputeGetRequest($ulid, string $contentType = self::contentTypes['apiTransactionsUliddisputeGet'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiTransactionsUliddisputeGet'
            );
        }


        $resourcePath = '/transactions/{ulid}/dispute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsUliddisputePatch
     *
     * Interact with a Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\DisputeUpdate $disputeUpdate The updated Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputePatch'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\DisputeRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\NotFoundError|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiTransactionsUliddisputePatch($ulid, $disputeUpdate, string $contentType = self::contentTypes['apiTransactionsUliddisputePatch'][0])
    {
        list($response) = $this->apiTransactionsUliddisputePatchWithHttpInfo($ulid, $disputeUpdate, $contentType);
        return $response;
    }

    /**
     * Operation apiTransactionsUliddisputePatchWithHttpInfo
     *
     * Interact with a Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\DisputeUpdate $disputeUpdate The updated Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputePatch'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\DisputeRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\NotFoundError|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsUliddisputePatchWithHttpInfo($ulid, $disputeUpdate, string $contentType = self::contentTypes['apiTransactionsUliddisputePatch'][0])
    {
        $request = $this->apiTransactionsUliddisputePatchRequest($ulid, $disputeUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\DisputeRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\DisputeRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\DisputeRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Tripartie\Tpdk\Model\InvalidQueryError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\InvalidQueryError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\InvalidQueryError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Tripartie\Tpdk\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UnprocessableEntity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tripartie\Tpdk\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\DisputeRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\DisputeRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\InvalidQueryError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTransactionsUliddisputePatchAsync
     *
     * Interact with a Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\DisputeUpdate $disputeUpdate The updated Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsUliddisputePatchAsync($ulid, $disputeUpdate, string $contentType = self::contentTypes['apiTransactionsUliddisputePatch'][0])
    {
        return $this->apiTransactionsUliddisputePatchAsyncWithHttpInfo($ulid, $disputeUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsUliddisputePatchAsyncWithHttpInfo
     *
     * Interact with a Dispute
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\DisputeUpdate $disputeUpdate The updated Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsUliddisputePatchAsyncWithHttpInfo($ulid, $disputeUpdate, string $contentType = self::contentTypes['apiTransactionsUliddisputePatch'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\DisputeRead';
        $request = $this->apiTransactionsUliddisputePatchRequest($ulid, $disputeUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsUliddisputePatch'
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\DisputeUpdate $disputeUpdate The updated Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsUliddisputePatchRequest($ulid, $disputeUpdate, string $contentType = self::contentTypes['apiTransactionsUliddisputePatch'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiTransactionsUliddisputePatch'
            );
        }

        // verify the required parameter 'disputeUpdate' is set
        if ($disputeUpdate === null || (is_array($disputeUpdate) && count($disputeUpdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $disputeUpdate when calling apiTransactionsUliddisputePatch'
            );
        }


        $resourcePath = '/transactions/{ulid}/dispute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($disputeUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($disputeUpdate));
            } else {
                $httpBody = $disputeUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsUliddisputePost
     *
     * Open a Dispute related to existing Transaction
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\DisputeWrite $disputeWrite The new Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputePost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\DisputePostCreationRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiTransactionsUliddisputePost($ulid, $disputeWrite, string $contentType = self::contentTypes['apiTransactionsUliddisputePost'][0])
    {
        list($response) = $this->apiTransactionsUliddisputePostWithHttpInfo($ulid, $disputeWrite, $contentType);
        return $response;
    }

    /**
     * Operation apiTransactionsUliddisputePostWithHttpInfo
     *
     * Open a Dispute related to existing Transaction
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\DisputeWrite $disputeWrite The new Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputePost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\DisputePostCreationRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsUliddisputePostWithHttpInfo($ulid, $disputeWrite, string $contentType = self::contentTypes['apiTransactionsUliddisputePost'][0])
    {
        $request = $this->apiTransactionsUliddisputePostRequest($ulid, $disputeWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Tripartie\Tpdk\Model\DisputePostCreationRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\DisputePostCreationRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\DisputePostCreationRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Tripartie\Tpdk\Model\InvalidQueryError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\InvalidQueryError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\InvalidQueryError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Tripartie\Tpdk\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UnprocessableEntity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\DisputePostCreationRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\DisputePostCreationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\InvalidQueryError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTransactionsUliddisputePostAsync
     *
     * Open a Dispute related to existing Transaction
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\DisputeWrite $disputeWrite The new Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsUliddisputePostAsync($ulid, $disputeWrite, string $contentType = self::contentTypes['apiTransactionsUliddisputePost'][0])
    {
        return $this->apiTransactionsUliddisputePostAsyncWithHttpInfo($ulid, $disputeWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsUliddisputePostAsyncWithHttpInfo
     *
     * Open a Dispute related to existing Transaction
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\DisputeWrite $disputeWrite The new Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsUliddisputePostAsyncWithHttpInfo($ulid, $disputeWrite, string $contentType = self::contentTypes['apiTransactionsUliddisputePost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\DisputePostCreationRead';
        $request = $this->apiTransactionsUliddisputePostRequest($ulid, $disputeWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsUliddisputePost'
     *
     * @param  string $ulid Dispute identifier (required)
     * @param  \Tripartie\Tpdk\Model\DisputeWrite $disputeWrite The new Dispute resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUliddisputePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsUliddisputePostRequest($ulid, $disputeWrite, string $contentType = self::contentTypes['apiTransactionsUliddisputePost'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiTransactionsUliddisputePost'
            );
        }

        // verify the required parameter 'disputeWrite' is set
        if ($disputeWrite === null || (is_array($disputeWrite) && count($disputeWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $disputeWrite when calling apiTransactionsUliddisputePost'
            );
        }


        $resourcePath = '/transactions/{ulid}/dispute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($disputeWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($disputeWrite));
            } else {
                $httpBody = $disputeWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsUlidparcelsGetCollection
     *
     * Read shipments from Transaction
     *
     * @param  string $ulid  (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUlidparcelsGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object[]|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiTransactionsUlidparcelsGetCollection($ulid, $page = 1, string $contentType = self::contentTypes['apiTransactionsUlidparcelsGetCollection'][0])
    {
        list($response) = $this->apiTransactionsUlidparcelsGetCollectionWithHttpInfo($ulid, $page, $contentType);
        return $response;
    }

    /**
     * Operation apiTransactionsUlidparcelsGetCollectionWithHttpInfo
     *
     * Read shipments from Transaction
     *
     * @param  string $ulid  (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUlidparcelsGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object[]|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsUlidparcelsGetCollectionWithHttpInfo($ulid, $page = 1, string $contentType = self::contentTypes['apiTransactionsUlidparcelsGetCollection'][0])
    {
        $request = $this->apiTransactionsUlidparcelsGetCollectionRequest($ulid, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTransactionsUlidparcelsGetCollectionAsync
     *
     * Read shipments from Transaction
     *
     * @param  string $ulid  (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUlidparcelsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsUlidparcelsGetCollectionAsync($ulid, $page = 1, string $contentType = self::contentTypes['apiTransactionsUlidparcelsGetCollection'][0])
    {
        return $this->apiTransactionsUlidparcelsGetCollectionAsyncWithHttpInfo($ulid, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsUlidparcelsGetCollectionAsyncWithHttpInfo
     *
     * Read shipments from Transaction
     *
     * @param  string $ulid  (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUlidparcelsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsUlidparcelsGetCollectionAsyncWithHttpInfo($ulid, $page = 1, string $contentType = self::contentTypes['apiTransactionsUlidparcelsGetCollection'][0])
    {
        $returnType = 'object[]';
        $request = $this->apiTransactionsUlidparcelsGetCollectionRequest($ulid, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsUlidparcelsGetCollection'
     *
     * @param  string $ulid  (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUlidparcelsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsUlidparcelsGetCollectionRequest($ulid, $page = 1, string $contentType = self::contentTypes['apiTransactionsUlidparcelsGetCollection'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiTransactionsUlidparcelsGetCollection'
            );
        }



        $resourcePath = '/transactions/{ulid}/parcels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsUlidparcelsIdDelete
     *
     * Withdraw shipment from Transaction
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUlidparcelsIdDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiTransactionsUlidparcelsIdDelete($ulid, $id, string $contentType = self::contentTypes['apiTransactionsUlidparcelsIdDelete'][0])
    {
        $this->apiTransactionsUlidparcelsIdDeleteWithHttpInfo($ulid, $id, $contentType);
    }

    /**
     * Operation apiTransactionsUlidparcelsIdDeleteWithHttpInfo
     *
     * Withdraw shipment from Transaction
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUlidparcelsIdDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsUlidparcelsIdDeleteWithHttpInfo($ulid, $id, string $contentType = self::contentTypes['apiTransactionsUlidparcelsIdDelete'][0])
    {
        $request = $this->apiTransactionsUlidparcelsIdDeleteRequest($ulid, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTransactionsUlidparcelsIdDeleteAsync
     *
     * Withdraw shipment from Transaction
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUlidparcelsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsUlidparcelsIdDeleteAsync($ulid, $id, string $contentType = self::contentTypes['apiTransactionsUlidparcelsIdDelete'][0])
    {
        return $this->apiTransactionsUlidparcelsIdDeleteAsyncWithHttpInfo($ulid, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsUlidparcelsIdDeleteAsyncWithHttpInfo
     *
     * Withdraw shipment from Transaction
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUlidparcelsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsUlidparcelsIdDeleteAsyncWithHttpInfo($ulid, $id, string $contentType = self::contentTypes['apiTransactionsUlidparcelsIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiTransactionsUlidparcelsIdDeleteRequest($ulid, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsUlidparcelsIdDelete'
     *
     * @param  string $ulid  (required)
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUlidparcelsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsUlidparcelsIdDeleteRequest($ulid, $id, string $contentType = self::contentTypes['apiTransactionsUlidparcelsIdDelete'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiTransactionsUlidparcelsIdDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTransactionsUlidparcelsIdDelete'
            );
        }


        $resourcePath = '/transactions/{ulid}/parcels/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsUlidparcelsPost
     *
     * Manually declare package shipped for Transaction
     *
     * @param  string $ulid  (required)
     * @param  \Tripartie\Tpdk\Model\ParcelWrite $parcelWrite The new Parcel resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUlidparcelsPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\ParcelRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError
     */
    public function apiTransactionsUlidparcelsPost($ulid, $parcelWrite, string $contentType = self::contentTypes['apiTransactionsUlidparcelsPost'][0])
    {
        list($response) = $this->apiTransactionsUlidparcelsPostWithHttpInfo($ulid, $parcelWrite, $contentType);
        return $response;
    }

    /**
     * Operation apiTransactionsUlidparcelsPostWithHttpInfo
     *
     * Manually declare package shipped for Transaction
     *
     * @param  string $ulid  (required)
     * @param  \Tripartie\Tpdk\Model\ParcelWrite $parcelWrite The new Parcel resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUlidparcelsPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\ParcelRead|\Tripartie\Tpdk\Model\InvalidQueryError|\Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\AuthError|\Tripartie\Tpdk\Model\AccessError|\Tripartie\Tpdk\Model\RateLimitError|\Tripartie\Tpdk\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsUlidparcelsPostWithHttpInfo($ulid, $parcelWrite, string $contentType = self::contentTypes['apiTransactionsUlidparcelsPost'][0])
    {
        $request = $this->apiTransactionsUlidparcelsPostRequest($ulid, $parcelWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Tripartie\Tpdk\Model\ParcelRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\ParcelRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\ParcelRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Tripartie\Tpdk\Model\InvalidQueryError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\InvalidQueryError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\InvalidQueryError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Tripartie\Tpdk\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UnprocessableEntity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Tripartie\Tpdk\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AuthError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Tripartie\Tpdk\Model\AccessError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\AccessError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\AccessError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Tripartie\Tpdk\Model\RateLimitError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\RateLimitError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\RateLimitError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tripartie\Tpdk\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\GenericError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\ParcelRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\ParcelRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\InvalidQueryError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\AccessError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\RateLimitError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTransactionsUlidparcelsPostAsync
     *
     * Manually declare package shipped for Transaction
     *
     * @param  string $ulid  (required)
     * @param  \Tripartie\Tpdk\Model\ParcelWrite $parcelWrite The new Parcel resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUlidparcelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsUlidparcelsPostAsync($ulid, $parcelWrite, string $contentType = self::contentTypes['apiTransactionsUlidparcelsPost'][0])
    {
        return $this->apiTransactionsUlidparcelsPostAsyncWithHttpInfo($ulid, $parcelWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsUlidparcelsPostAsyncWithHttpInfo
     *
     * Manually declare package shipped for Transaction
     *
     * @param  string $ulid  (required)
     * @param  \Tripartie\Tpdk\Model\ParcelWrite $parcelWrite The new Parcel resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUlidparcelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsUlidparcelsPostAsyncWithHttpInfo($ulid, $parcelWrite, string $contentType = self::contentTypes['apiTransactionsUlidparcelsPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\ParcelRead';
        $request = $this->apiTransactionsUlidparcelsPostRequest($ulid, $parcelWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsUlidparcelsPost'
     *
     * @param  string $ulid  (required)
     * @param  \Tripartie\Tpdk\Model\ParcelWrite $parcelWrite The new Parcel resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsUlidparcelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsUlidparcelsPostRequest($ulid, $parcelWrite, string $contentType = self::contentTypes['apiTransactionsUlidparcelsPost'][0])
    {

        // verify the required parameter 'ulid' is set
        if ($ulid === null || (is_array($ulid) && count($ulid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ulid when calling apiTransactionsUlidparcelsPost'
            );
        }

        // verify the required parameter 'parcelWrite' is set
        if ($parcelWrite === null || (is_array($parcelWrite) && count($parcelWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcelWrite when calling apiTransactionsUlidparcelsPost'
            );
        }


        $resourcePath = '/transactions/{ulid}/parcels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ulid !== null) {
            $resourcePath = str_replace(
                '{' . 'ulid' . '}',
                ObjectSerializer::toPathValue($ulid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($parcelWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($parcelWrite));
            } else {
                $httpBody = $parcelWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
