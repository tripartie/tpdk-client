<?php
/**
 * UserApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tripartie
 *
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.39
 * Contact: noc@tripartie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tripartie\Tpdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tripartie\Tpdk\ApiException;
use Tripartie\Tpdk\Configuration;
use Tripartie\Tpdk\HeaderSelector;
use Tripartie\Tpdk\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  Tripartie\Tpdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiApiClientsGetCollection' => [
            'application/json',
        ],
        'apiApiClientsIdentifierDelete' => [
            'application/json',
        ],
        'apiApiClientsIdentifierGet' => [
            'application/json',
        ],
        'apiApiClientsPost' => [
            'application/json',
        ],
        'apiMeGet' => [
            'application/json',
        ],
        'apiPersonasauthenticationPost' => [
            'application/json',
        ],
        'apiPersonasmeGet' => [
            'application/json',
        ],
        'apiPersonasregisterPost' => [
            'application/json',
        ],
        'apiRegisterPost' => [
            'application/json',
        ],
        'apiUsersGetCollection' => [
            'application/json',
        ],
        'apiUsersIdGet' => [
            'application/json',
        ],
        'apiUsersIdPatch' => [
            'application/json',
        ],
        'apiUsersIdemailValidationPatch' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiApiClientsGetCollection
     *
     * Retrieves the collection of ApiClient resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\ApiClientRead[]
     */
    public function apiApiClientsGetCollection($page = 1, string $contentType = self::contentTypes['apiApiClientsGetCollection'][0])
    {
        list($response) = $this->apiApiClientsGetCollectionWithHttpInfo($page, $contentType);
        return $response;
    }

    /**
     * Operation apiApiClientsGetCollectionWithHttpInfo
     *
     * Retrieves the collection of ApiClient resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\ApiClientRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiApiClientsGetCollectionWithHttpInfo($page = 1, string $contentType = self::contentTypes['apiApiClientsGetCollection'][0])
    {
        $request = $this->apiApiClientsGetCollectionRequest($page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\ApiClientRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\ApiClientRead[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\ApiClientRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\ApiClientRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\ApiClientRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiApiClientsGetCollectionAsync
     *
     * Retrieves the collection of ApiClient resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiApiClientsGetCollectionAsync($page = 1, string $contentType = self::contentTypes['apiApiClientsGetCollection'][0])
    {
        return $this->apiApiClientsGetCollectionAsyncWithHttpInfo($page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiApiClientsGetCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ApiClient resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiApiClientsGetCollectionAsyncWithHttpInfo($page = 1, string $contentType = self::contentTypes['apiApiClientsGetCollection'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\ApiClientRead[]';
        $request = $this->apiApiClientsGetCollectionRequest($page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiApiClientsGetCollection'
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiApiClientsGetCollectionRequest($page = 1, string $contentType = self::contentTypes['apiApiClientsGetCollection'][0])
    {



        $resourcePath = '/api-clients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiApiClientsIdentifierDelete
     *
     * Removes the ApiClient resource.
     *
     * @param  string $identifier ApiClient identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsIdentifierDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiApiClientsIdentifierDelete($identifier, string $contentType = self::contentTypes['apiApiClientsIdentifierDelete'][0])
    {
        $this->apiApiClientsIdentifierDeleteWithHttpInfo($identifier, $contentType);
    }

    /**
     * Operation apiApiClientsIdentifierDeleteWithHttpInfo
     *
     * Removes the ApiClient resource.
     *
     * @param  string $identifier ApiClient identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsIdentifierDelete'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiApiClientsIdentifierDeleteWithHttpInfo($identifier, string $contentType = self::contentTypes['apiApiClientsIdentifierDelete'][0])
    {
        $request = $this->apiApiClientsIdentifierDeleteRequest($identifier, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiApiClientsIdentifierDeleteAsync
     *
     * Removes the ApiClient resource.
     *
     * @param  string $identifier ApiClient identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsIdentifierDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiApiClientsIdentifierDeleteAsync($identifier, string $contentType = self::contentTypes['apiApiClientsIdentifierDelete'][0])
    {
        return $this->apiApiClientsIdentifierDeleteAsyncWithHttpInfo($identifier, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiApiClientsIdentifierDeleteAsyncWithHttpInfo
     *
     * Removes the ApiClient resource.
     *
     * @param  string $identifier ApiClient identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsIdentifierDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiApiClientsIdentifierDeleteAsyncWithHttpInfo($identifier, string $contentType = self::contentTypes['apiApiClientsIdentifierDelete'][0])
    {
        $returnType = '';
        $request = $this->apiApiClientsIdentifierDeleteRequest($identifier, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiApiClientsIdentifierDelete'
     *
     * @param  string $identifier ApiClient identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsIdentifierDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiApiClientsIdentifierDeleteRequest($identifier, string $contentType = self::contentTypes['apiApiClientsIdentifierDelete'][0])
    {

        // verify the required parameter 'identifier' is set
        if ($identifier === null || (is_array($identifier) && count($identifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identifier when calling apiApiClientsIdentifierDelete'
            );
        }


        $resourcePath = '/api-clients/{identifier}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($identifier !== null) {
            $resourcePath = str_replace(
                '{' . 'identifier' . '}',
                ObjectSerializer::toPathValue($identifier),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiApiClientsIdentifierGet
     *
     * Retrieves a ApiClient resource.
     *
     * @param  string $identifier ApiClient identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsIdentifierGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\ApiClientRead
     */
    public function apiApiClientsIdentifierGet($identifier, string $contentType = self::contentTypes['apiApiClientsIdentifierGet'][0])
    {
        list($response) = $this->apiApiClientsIdentifierGetWithHttpInfo($identifier, $contentType);
        return $response;
    }

    /**
     * Operation apiApiClientsIdentifierGetWithHttpInfo
     *
     * Retrieves a ApiClient resource.
     *
     * @param  string $identifier ApiClient identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsIdentifierGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\ApiClientRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiApiClientsIdentifierGetWithHttpInfo($identifier, string $contentType = self::contentTypes['apiApiClientsIdentifierGet'][0])
    {
        $request = $this->apiApiClientsIdentifierGetRequest($identifier, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\ApiClientRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\ApiClientRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\ApiClientRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\ApiClientRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\ApiClientRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiApiClientsIdentifierGetAsync
     *
     * Retrieves a ApiClient resource.
     *
     * @param  string $identifier ApiClient identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsIdentifierGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiApiClientsIdentifierGetAsync($identifier, string $contentType = self::contentTypes['apiApiClientsIdentifierGet'][0])
    {
        return $this->apiApiClientsIdentifierGetAsyncWithHttpInfo($identifier, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiApiClientsIdentifierGetAsyncWithHttpInfo
     *
     * Retrieves a ApiClient resource.
     *
     * @param  string $identifier ApiClient identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsIdentifierGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiApiClientsIdentifierGetAsyncWithHttpInfo($identifier, string $contentType = self::contentTypes['apiApiClientsIdentifierGet'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\ApiClientRead';
        $request = $this->apiApiClientsIdentifierGetRequest($identifier, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiApiClientsIdentifierGet'
     *
     * @param  string $identifier ApiClient identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsIdentifierGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiApiClientsIdentifierGetRequest($identifier, string $contentType = self::contentTypes['apiApiClientsIdentifierGet'][0])
    {

        // verify the required parameter 'identifier' is set
        if ($identifier === null || (is_array($identifier) && count($identifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identifier when calling apiApiClientsIdentifierGet'
            );
        }


        $resourcePath = '/api-clients/{identifier}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($identifier !== null) {
            $resourcePath = str_replace(
                '{' . 'identifier' . '}',
                ObjectSerializer::toPathValue($identifier),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiApiClientsPost
     *
     * Creates a ApiClient resource.
     *
     * @param  \Tripartie\Tpdk\Model\ApiClientWrite $apiClientWrite The new ApiClient resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\ApiClientPostCreationRead
     */
    public function apiApiClientsPost($apiClientWrite, string $contentType = self::contentTypes['apiApiClientsPost'][0])
    {
        list($response) = $this->apiApiClientsPostWithHttpInfo($apiClientWrite, $contentType);
        return $response;
    }

    /**
     * Operation apiApiClientsPostWithHttpInfo
     *
     * Creates a ApiClient resource.
     *
     * @param  \Tripartie\Tpdk\Model\ApiClientWrite $apiClientWrite The new ApiClient resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\ApiClientPostCreationRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiApiClientsPostWithHttpInfo($apiClientWrite, string $contentType = self::contentTypes['apiApiClientsPost'][0])
    {
        $request = $this->apiApiClientsPostRequest($apiClientWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Tripartie\Tpdk\Model\ApiClientPostCreationRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\ApiClientPostCreationRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\ApiClientPostCreationRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\ApiClientPostCreationRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\ApiClientPostCreationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiApiClientsPostAsync
     *
     * Creates a ApiClient resource.
     *
     * @param  \Tripartie\Tpdk\Model\ApiClientWrite $apiClientWrite The new ApiClient resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiApiClientsPostAsync($apiClientWrite, string $contentType = self::contentTypes['apiApiClientsPost'][0])
    {
        return $this->apiApiClientsPostAsyncWithHttpInfo($apiClientWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiApiClientsPostAsyncWithHttpInfo
     *
     * Creates a ApiClient resource.
     *
     * @param  \Tripartie\Tpdk\Model\ApiClientWrite $apiClientWrite The new ApiClient resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiApiClientsPostAsyncWithHttpInfo($apiClientWrite, string $contentType = self::contentTypes['apiApiClientsPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\ApiClientPostCreationRead';
        $request = $this->apiApiClientsPostRequest($apiClientWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiApiClientsPost'
     *
     * @param  \Tripartie\Tpdk\Model\ApiClientWrite $apiClientWrite The new ApiClient resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiApiClientsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiApiClientsPostRequest($apiClientWrite, string $contentType = self::contentTypes['apiApiClientsPost'][0])
    {

        // verify the required parameter 'apiClientWrite' is set
        if ($apiClientWrite === null || (is_array($apiClientWrite) && count($apiClientWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiClientWrite when calling apiApiClientsPost'
            );
        }


        $resourcePath = '/api-clients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apiClientWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($apiClientWrite));
            } else {
                $httpBody = $apiClientWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiMeGet
     *
     * Retrieves a User resource.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiMeGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\UserAuthenticatedRead
     */
    public function apiMeGet(string $contentType = self::contentTypes['apiMeGet'][0])
    {
        list($response) = $this->apiMeGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation apiMeGetWithHttpInfo
     *
     * Retrieves a User resource.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiMeGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\UserAuthenticatedRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiMeGetWithHttpInfo(string $contentType = self::contentTypes['apiMeGet'][0])
    {
        $request = $this->apiMeGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\UserAuthenticatedRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UserAuthenticatedRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UserAuthenticatedRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\UserAuthenticatedRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UserAuthenticatedRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiMeGetAsync
     *
     * Retrieves a User resource.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiMeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiMeGetAsync(string $contentType = self::contentTypes['apiMeGet'][0])
    {
        return $this->apiMeGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiMeGetAsyncWithHttpInfo
     *
     * Retrieves a User resource.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiMeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiMeGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiMeGet'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\UserAuthenticatedRead';
        $request = $this->apiMeGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiMeGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiMeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiMeGetRequest(string $contentType = self::contentTypes['apiMeGet'][0])
    {


        $resourcePath = '/me';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPersonasauthenticationPost
     *
     * Persona Authentication
     *
     * @param  \Tripartie\Tpdk\Model\PersonaExternalAuth $personaExternalAuth The new Persona resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasauthenticationPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\PersonaAuthReturn
     */
    public function apiPersonasauthenticationPost($personaExternalAuth, string $contentType = self::contentTypes['apiPersonasauthenticationPost'][0])
    {
        list($response) = $this->apiPersonasauthenticationPostWithHttpInfo($personaExternalAuth, $contentType);
        return $response;
    }

    /**
     * Operation apiPersonasauthenticationPostWithHttpInfo
     *
     * Persona Authentication
     *
     * @param  \Tripartie\Tpdk\Model\PersonaExternalAuth $personaExternalAuth The new Persona resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasauthenticationPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\PersonaAuthReturn, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiPersonasauthenticationPostWithHttpInfo($personaExternalAuth, string $contentType = self::contentTypes['apiPersonasauthenticationPost'][0])
    {
        $request = $this->apiPersonasauthenticationPostRequest($personaExternalAuth, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Tripartie\Tpdk\Model\PersonaAuthReturn' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\PersonaAuthReturn' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\PersonaAuthReturn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\PersonaAuthReturn';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\PersonaAuthReturn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPersonasauthenticationPostAsync
     *
     * Persona Authentication
     *
     * @param  \Tripartie\Tpdk\Model\PersonaExternalAuth $personaExternalAuth The new Persona resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasauthenticationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasauthenticationPostAsync($personaExternalAuth, string $contentType = self::contentTypes['apiPersonasauthenticationPost'][0])
    {
        return $this->apiPersonasauthenticationPostAsyncWithHttpInfo($personaExternalAuth, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPersonasauthenticationPostAsyncWithHttpInfo
     *
     * Persona Authentication
     *
     * @param  \Tripartie\Tpdk\Model\PersonaExternalAuth $personaExternalAuth The new Persona resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasauthenticationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasauthenticationPostAsyncWithHttpInfo($personaExternalAuth, string $contentType = self::contentTypes['apiPersonasauthenticationPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\PersonaAuthReturn';
        $request = $this->apiPersonasauthenticationPostRequest($personaExternalAuth, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPersonasauthenticationPost'
     *
     * @param  \Tripartie\Tpdk\Model\PersonaExternalAuth $personaExternalAuth The new Persona resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasauthenticationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiPersonasauthenticationPostRequest($personaExternalAuth, string $contentType = self::contentTypes['apiPersonasauthenticationPost'][0])
    {

        // verify the required parameter 'personaExternalAuth' is set
        if ($personaExternalAuth === null || (is_array($personaExternalAuth) && count($personaExternalAuth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $personaExternalAuth when calling apiPersonasauthenticationPost'
            );
        }


        $resourcePath = '/personas/authentication';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($personaExternalAuth)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($personaExternalAuth));
            } else {
                $httpBody = $personaExternalAuth;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPersonasmeGet
     *
     * Retrieve your authenticated Persona
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasmeGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\PersonaRead
     */
    public function apiPersonasmeGet(string $contentType = self::contentTypes['apiPersonasmeGet'][0])
    {
        list($response) = $this->apiPersonasmeGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation apiPersonasmeGetWithHttpInfo
     *
     * Retrieve your authenticated Persona
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasmeGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\PersonaRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiPersonasmeGetWithHttpInfo(string $contentType = self::contentTypes['apiPersonasmeGet'][0])
    {
        $request = $this->apiPersonasmeGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\PersonaRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\PersonaRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\PersonaRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\PersonaRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\PersonaRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPersonasmeGetAsync
     *
     * Retrieve your authenticated Persona
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasmeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasmeGetAsync(string $contentType = self::contentTypes['apiPersonasmeGet'][0])
    {
        return $this->apiPersonasmeGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPersonasmeGetAsyncWithHttpInfo
     *
     * Retrieve your authenticated Persona
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasmeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasmeGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiPersonasmeGet'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\PersonaRead';
        $request = $this->apiPersonasmeGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPersonasmeGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasmeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiPersonasmeGetRequest(string $contentType = self::contentTypes['apiPersonasmeGet'][0])
    {


        $resourcePath = '/personas/me';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPersonasregisterPost
     *
     * Persona external registration
     *
     * @param  \Tripartie\Tpdk\Model\PersonaRegister $personaRegister The new Persona resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasregisterPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\PersonaRead
     */
    public function apiPersonasregisterPost($personaRegister, string $contentType = self::contentTypes['apiPersonasregisterPost'][0])
    {
        list($response) = $this->apiPersonasregisterPostWithHttpInfo($personaRegister, $contentType);
        return $response;
    }

    /**
     * Operation apiPersonasregisterPostWithHttpInfo
     *
     * Persona external registration
     *
     * @param  \Tripartie\Tpdk\Model\PersonaRegister $personaRegister The new Persona resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasregisterPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\PersonaRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiPersonasregisterPostWithHttpInfo($personaRegister, string $contentType = self::contentTypes['apiPersonasregisterPost'][0])
    {
        $request = $this->apiPersonasregisterPostRequest($personaRegister, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Tripartie\Tpdk\Model\PersonaRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\PersonaRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\PersonaRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\PersonaRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\PersonaRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPersonasregisterPostAsync
     *
     * Persona external registration
     *
     * @param  \Tripartie\Tpdk\Model\PersonaRegister $personaRegister The new Persona resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasregisterPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasregisterPostAsync($personaRegister, string $contentType = self::contentTypes['apiPersonasregisterPost'][0])
    {
        return $this->apiPersonasregisterPostAsyncWithHttpInfo($personaRegister, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPersonasregisterPostAsyncWithHttpInfo
     *
     * Persona external registration
     *
     * @param  \Tripartie\Tpdk\Model\PersonaRegister $personaRegister The new Persona resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasregisterPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPersonasregisterPostAsyncWithHttpInfo($personaRegister, string $contentType = self::contentTypes['apiPersonasregisterPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\PersonaRead';
        $request = $this->apiPersonasregisterPostRequest($personaRegister, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPersonasregisterPost'
     *
     * @param  \Tripartie\Tpdk\Model\PersonaRegister $personaRegister The new Persona resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPersonasregisterPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiPersonasregisterPostRequest($personaRegister, string $contentType = self::contentTypes['apiPersonasregisterPost'][0])
    {

        // verify the required parameter 'personaRegister' is set
        if ($personaRegister === null || (is_array($personaRegister) && count($personaRegister) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $personaRegister when calling apiPersonasregisterPost'
            );
        }


        $resourcePath = '/personas/register';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($personaRegister)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($personaRegister));
            } else {
                $httpBody = $personaRegister;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiRegisterPost
     *
     * Organization onboarding
     *
     * @param  \Tripartie\Tpdk\Model\UserWrite $userWrite The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiRegisterPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\UserPostRegisterRead
     */
    public function apiRegisterPost($userWrite, string $contentType = self::contentTypes['apiRegisterPost'][0])
    {
        list($response) = $this->apiRegisterPostWithHttpInfo($userWrite, $contentType);
        return $response;
    }

    /**
     * Operation apiRegisterPostWithHttpInfo
     *
     * Organization onboarding
     *
     * @param  \Tripartie\Tpdk\Model\UserWrite $userWrite The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiRegisterPost'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\UnprocessableEntity|\Tripartie\Tpdk\Model\UserPostRegisterRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiRegisterPostWithHttpInfo($userWrite, string $contentType = self::contentTypes['apiRegisterPost'][0])
    {
        $request = $this->apiRegisterPostRequest($userWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 422:
                    if ('\Tripartie\Tpdk\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UnprocessableEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Tripartie\Tpdk\Model\UserPostRegisterRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UserPostRegisterRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UserPostRegisterRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\UserPostRegisterRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UserPostRegisterRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiRegisterPostAsync
     *
     * Organization onboarding
     *
     * @param  \Tripartie\Tpdk\Model\UserWrite $userWrite The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiRegisterPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiRegisterPostAsync($userWrite, string $contentType = self::contentTypes['apiRegisterPost'][0])
    {
        return $this->apiRegisterPostAsyncWithHttpInfo($userWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiRegisterPostAsyncWithHttpInfo
     *
     * Organization onboarding
     *
     * @param  \Tripartie\Tpdk\Model\UserWrite $userWrite The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiRegisterPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiRegisterPostAsyncWithHttpInfo($userWrite, string $contentType = self::contentTypes['apiRegisterPost'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\UserPostRegisterRead';
        $request = $this->apiRegisterPostRequest($userWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiRegisterPost'
     *
     * @param  \Tripartie\Tpdk\Model\UserWrite $userWrite The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiRegisterPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiRegisterPostRequest($userWrite, string $contentType = self::contentTypes['apiRegisterPost'][0])
    {

        // verify the required parameter 'userWrite' is set
        if ($userWrite === null || (is_array($userWrite) && count($userWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userWrite when calling apiRegisterPost'
            );
        }


        $resourcePath = '/register';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($userWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($userWrite));
            } else {
                $httpBody = $userWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiUsersGetCollection
     *
     * Retrieves the collection of User resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\UserCollectionRead[]
     */
    public function apiUsersGetCollection($page = 1, string $contentType = self::contentTypes['apiUsersGetCollection'][0])
    {
        list($response) = $this->apiUsersGetCollectionWithHttpInfo($page, $contentType);
        return $response;
    }

    /**
     * Operation apiUsersGetCollectionWithHttpInfo
     *
     * Retrieves the collection of User resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersGetCollection'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\UserCollectionRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiUsersGetCollectionWithHttpInfo($page = 1, string $contentType = self::contentTypes['apiUsersGetCollection'][0])
    {
        $request = $this->apiUsersGetCollectionRequest($page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\UserCollectionRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UserCollectionRead[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UserCollectionRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\UserCollectionRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UserCollectionRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiUsersGetCollectionAsync
     *
     * Retrieves the collection of User resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsersGetCollectionAsync($page = 1, string $contentType = self::contentTypes['apiUsersGetCollection'][0])
    {
        return $this->apiUsersGetCollectionAsyncWithHttpInfo($page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiUsersGetCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of User resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsersGetCollectionAsyncWithHttpInfo($page = 1, string $contentType = self::contentTypes['apiUsersGetCollection'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\UserCollectionRead[]';
        $request = $this->apiUsersGetCollectionRequest($page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiUsersGetCollection'
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiUsersGetCollectionRequest($page = 1, string $contentType = self::contentTypes['apiUsersGetCollection'][0])
    {



        $resourcePath = '/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiUsersIdGet
     *
     * Retrieves a User resource.
     *
     * @param  string $id User identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\User
     */
    public function apiUsersIdGet($id, string $contentType = self::contentTypes['apiUsersIdGet'][0])
    {
        list($response) = $this->apiUsersIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiUsersIdGetWithHttpInfo
     *
     * Retrieves a User resource.
     *
     * @param  string $id User identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdGet'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiUsersIdGetWithHttpInfo($id, string $contentType = self::contentTypes['apiUsersIdGet'][0])
    {
        $request = $this->apiUsersIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\User' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiUsersIdGetAsync
     *
     * Retrieves a User resource.
     *
     * @param  string $id User identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsersIdGetAsync($id, string $contentType = self::contentTypes['apiUsersIdGet'][0])
    {
        return $this->apiUsersIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiUsersIdGetAsyncWithHttpInfo
     *
     * Retrieves a User resource.
     *
     * @param  string $id User identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsersIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiUsersIdGet'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\User';
        $request = $this->apiUsersIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiUsersIdGet'
     *
     * @param  string $id User identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiUsersIdGetRequest($id, string $contentType = self::contentTypes['apiUsersIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiUsersIdGet'
            );
        }


        $resourcePath = '/users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiUsersIdPatch
     *
     * Updates the User resource.
     *
     * @param  string $id User identifier (required)
     * @param  \Tripartie\Tpdk\Model\UserUpdate $userUpdate The updated User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdPatch'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\UserPostRegisterRead
     */
    public function apiUsersIdPatch($id, $userUpdate, string $contentType = self::contentTypes['apiUsersIdPatch'][0])
    {
        list($response) = $this->apiUsersIdPatchWithHttpInfo($id, $userUpdate, $contentType);
        return $response;
    }

    /**
     * Operation apiUsersIdPatchWithHttpInfo
     *
     * Updates the User resource.
     *
     * @param  string $id User identifier (required)
     * @param  \Tripartie\Tpdk\Model\UserUpdate $userUpdate The updated User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdPatch'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\UserPostRegisterRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiUsersIdPatchWithHttpInfo($id, $userUpdate, string $contentType = self::contentTypes['apiUsersIdPatch'][0])
    {
        $request = $this->apiUsersIdPatchRequest($id, $userUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\UserPostRegisterRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UserPostRegisterRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UserPostRegisterRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\UserPostRegisterRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UserPostRegisterRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiUsersIdPatchAsync
     *
     * Updates the User resource.
     *
     * @param  string $id User identifier (required)
     * @param  \Tripartie\Tpdk\Model\UserUpdate $userUpdate The updated User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsersIdPatchAsync($id, $userUpdate, string $contentType = self::contentTypes['apiUsersIdPatch'][0])
    {
        return $this->apiUsersIdPatchAsyncWithHttpInfo($id, $userUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiUsersIdPatchAsyncWithHttpInfo
     *
     * Updates the User resource.
     *
     * @param  string $id User identifier (required)
     * @param  \Tripartie\Tpdk\Model\UserUpdate $userUpdate The updated User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsersIdPatchAsyncWithHttpInfo($id, $userUpdate, string $contentType = self::contentTypes['apiUsersIdPatch'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\UserPostRegisterRead';
        $request = $this->apiUsersIdPatchRequest($id, $userUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiUsersIdPatch'
     *
     * @param  string $id User identifier (required)
     * @param  \Tripartie\Tpdk\Model\UserUpdate $userUpdate The updated User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiUsersIdPatchRequest($id, $userUpdate, string $contentType = self::contentTypes['apiUsersIdPatch'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiUsersIdPatch'
            );
        }

        // verify the required parameter 'userUpdate' is set
        if ($userUpdate === null || (is_array($userUpdate) && count($userUpdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userUpdate when calling apiUsersIdPatch'
            );
        }


        $resourcePath = '/users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($userUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($userUpdate));
            } else {
                $httpBody = $userUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiUsersIdemailValidationPatch
     *
     * Validate email ownership
     *
     * @param  string $id User identifier (required)
     * @param  \Tripartie\Tpdk\Model\UserEmailValidationWrite $userEmailValidationWrite The updated User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdemailValidationPatch'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tripartie\Tpdk\Model\UserPostRegisterRead
     */
    public function apiUsersIdemailValidationPatch($id, $userEmailValidationWrite, string $contentType = self::contentTypes['apiUsersIdemailValidationPatch'][0])
    {
        list($response) = $this->apiUsersIdemailValidationPatchWithHttpInfo($id, $userEmailValidationWrite, $contentType);
        return $response;
    }

    /**
     * Operation apiUsersIdemailValidationPatchWithHttpInfo
     *
     * Validate email ownership
     *
     * @param  string $id User identifier (required)
     * @param  \Tripartie\Tpdk\Model\UserEmailValidationWrite $userEmailValidationWrite The updated User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdemailValidationPatch'] to see the possible values for this operation
     *
     * @throws \Tripartie\Tpdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tripartie\Tpdk\Model\UserPostRegisterRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiUsersIdemailValidationPatchWithHttpInfo($id, $userEmailValidationWrite, string $contentType = self::contentTypes['apiUsersIdemailValidationPatch'][0])
    {
        $request = $this->apiUsersIdemailValidationPatchRequest($id, $userEmailValidationWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tripartie\Tpdk\Model\UserPostRegisterRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tripartie\Tpdk\Model\UserPostRegisterRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tripartie\Tpdk\Model\UserPostRegisterRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tripartie\Tpdk\Model\UserPostRegisterRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tripartie\Tpdk\Model\UserPostRegisterRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiUsersIdemailValidationPatchAsync
     *
     * Validate email ownership
     *
     * @param  string $id User identifier (required)
     * @param  \Tripartie\Tpdk\Model\UserEmailValidationWrite $userEmailValidationWrite The updated User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdemailValidationPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsersIdemailValidationPatchAsync($id, $userEmailValidationWrite, string $contentType = self::contentTypes['apiUsersIdemailValidationPatch'][0])
    {
        return $this->apiUsersIdemailValidationPatchAsyncWithHttpInfo($id, $userEmailValidationWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiUsersIdemailValidationPatchAsyncWithHttpInfo
     *
     * Validate email ownership
     *
     * @param  string $id User identifier (required)
     * @param  \Tripartie\Tpdk\Model\UserEmailValidationWrite $userEmailValidationWrite The updated User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdemailValidationPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsersIdemailValidationPatchAsyncWithHttpInfo($id, $userEmailValidationWrite, string $contentType = self::contentTypes['apiUsersIdemailValidationPatch'][0])
    {
        $returnType = '\Tripartie\Tpdk\Model\UserPostRegisterRead';
        $request = $this->apiUsersIdemailValidationPatchRequest($id, $userEmailValidationWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiUsersIdemailValidationPatch'
     *
     * @param  string $id User identifier (required)
     * @param  \Tripartie\Tpdk\Model\UserEmailValidationWrite $userEmailValidationWrite The updated User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersIdemailValidationPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiUsersIdemailValidationPatchRequest($id, $userEmailValidationWrite, string $contentType = self::contentTypes['apiUsersIdemailValidationPatch'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiUsersIdemailValidationPatch'
            );
        }

        // verify the required parameter 'userEmailValidationWrite' is set
        if ($userEmailValidationWrite === null || (is_array($userEmailValidationWrite) && count($userEmailValidationWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userEmailValidationWrite when calling apiUsersIdemailValidationPatch'
            );
        }


        $resourcePath = '/users/{id}/email-validation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($userEmailValidationWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($userEmailValidationWrite));
            } else {
                $httpBody = $userEmailValidationWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Persona-Authorization');
        if ($apiKey !== null) {
            $headers['X-Persona-Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
